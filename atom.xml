<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ada</title>
  
  <subtitle>Adaの博客</subtitle>
  <link href="https://www.adalucky.com/atom.xml" rel="self"/>
  
  <link href="https://www.adalucky.com/"/>
  <updated>2022-06-13T14:43:37.102Z</updated>
  <id>https://www.adalucky.com/</id>
  
  <author>
    <name>Ada</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VUE3上</title>
    <link href="https://www.adalucky.com/auto/vue3-shang/"/>
    <id>https://www.adalucky.com/auto/vue3-shang/</id>
    <published>2022-06-05T12:51:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://v3.cn.vuejs.org/guide/single-file-component.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#components--libraries">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=723739713&amp;bvid=BV1dS4y1y7vd&amp;cid=499696729&amp;page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul><li>Vue3 推荐的脚手架是 vite ，据说编译打包什么的更加快，所以这里我们就用 vite 开始搭建项目，就不用 vue-cli 来搭建了</li><li>Vite HMR 速度快到惊人的 [模块热更新（HMR）</li><li>采用 Rollup打包 它使用 <a href="https://rollupjs.org/">Rollup</a> 打包你的代码，并且它是预配置的 并且支持大部分rollup插件</li><li>安装依赖：<code>yarn</code>  （进入项目根目录后执行）</li><li>启动项目：可以用截图中的 <code>yarn dev</code> 也可直接用 <code>vite</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yarn 创建项目</span><span class="token function">yarn</span> create vite<span class="token comment"># npm 创建项目</span><span class="token function">npm</span> init vite@latest<span class="token comment"># pnpm 创建项目</span><span class="token function">pnpm</span> create vite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220613180838344.png" alt="vite创建项目"></p><h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><ul><li>以下目录一般是标准的操作，建议按照这种规范去实行</li><li>public：下面的不会被编译,可以存放图片或者静态资源</li><li>src<ul><li>assets：可以被编译的,一般存放静态资源比如图片进行base64</li><li>components：公共组件</li><li>App.vue：全局的组件，尤其注意里面写的样式会影响到其它的</li><li>main.ts：公共的 ts 文件</li></ul></li><li>index.html：非常重要的入口文件 （webpack，rollup 他们的入口文件都是enrty input 是一个js文件 而Vite 的入口文件是一个html文件，他刚开始不会编译这些js文件 只有当你用到的时候 如script src=”xxxxx.js” 会发起一个请求被vite拦截这时候才会解析js文件）</li><li>package.json：包配置信息</li><li>tsconfig.json：ts 的配置</li><li>vite.config.ts：vite的配置文件</li><li>yarn.lock：依赖的锁定版本</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220302233224768.png" alt="目录"></p><h2 id="vite-配置"><a href="#vite-配置" class="headerlink" title="vite 配置"></a>vite 配置</h2><ul><li>vite 的配置都在 vite.config.js 中</li></ul><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><ul><li>打包后再的 html 在 windows 上是正常的，但是在 Mac或者 linux 上可能是访问不到，会有提示<code>Refused to apply style from 'http://localhost:63342/assets/index.16c4fe9c.css' because its MIME type ('text/html') is not a supported stylesheet MIME type, and strict MIME checking is enabled.</code></li><li>原因就是 访问的路径默认是 <code>/assets</code> 下找 css js 资源， 但是在 Mac 或者 Linux 下会认为是最顶层的文件目录，因此找不到需要用 <code>./assets</code></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220302221636715.png" alt="修改前"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220302221835898.png" alt="修改后"></p><h3 id="alias-TODO"><a href="#alias-TODO" class="headerlink" title="alias-TODO"></a>alias-TODO</h3><ul><li>alias 别名</li></ul><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul><li><p>在时间中可能会遇到 切换 node 版本的情况，这里推荐使用 nvm 进行 node.js 版本的管理 这里就不展开了参考博客<a href="https://blog.csdn.net/qq1195566313/article/details/125027972?spm=1001.2014.3001.5502">Nvm Nrm 使用教程</a></p></li><li><p>下载插件 volar,在当vue3.2发布完之后 vetur 并不能给我们提供良好的代码提示，所以<code>volar</code>顺应而生</p></li><li><p>与<code>vetur</code>相同，<code>volar</code>是一个针对<code>vue</code>的<code>vscode</code>插件，不过与<code>vetur</code>不同的是，<code>volar</code>提供了更为强大的功能（使用的时候需要把vetur 设置为禁用状态）</p></li><li><p>分别安装 <strong>Vue Language Features (Volar)</strong> <strong>TypeScript Vue Plugin(Volar)</strong></p></li></ul><h1 id="认识-VUE"><a href="#认识-VUE" class="headerlink" title="认识 VUE"></a>认识 VUE</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Vue (读音 /vjuː/，类似于 view)是一套用于构建用户界面的渐进式框架</li><li>Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合</li><li>和库不一样，Vue是一套架构，会基于自身特点向用户提供一套相当完整的解决方案，而且控制权在框架本身；对项目的侵入性较大，使用者要按照框架所规定的某种特定规范进行开发，项目如果需要更换框架，则需要重新架构整个项目。</li><li>渐进式就跟下面图片一样，开发可以根据需求，逐渐递增所要的方式，但每个方式有不是依靠行特别强</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220301232441625.png" alt="渐进式框架"></p><h2 id="vue两大核心"><a href="#vue两大核心" class="headerlink" title="vue两大核心"></a>vue两大核心</h2><ul><li><code>响应式的数据绑定</code>：当数据发生改变，视图可以自动更新，可以不用关心dom操作，而专心数据操作</li><li><code>可组合的视图组件</code>：把视图按照功能切分成若干基本单元，组件可以一级一级组合整个应用形成倒置组件树，可维护，可重用，可测试</li><li>组件：我们一般将需要复用的东西封装成一个组件 一处封装处处调用</li></ul><h2 id="Vue2-amp-Vue3"><a href="#Vue2-amp-Vue3" class="headerlink" title="Vue2 &amp; Vue3"></a>Vue2 &amp; Vue3</h2><ul><li>Vue3 组合式 API（Composition API） 主要用于在大型组件中提高代码逻辑的可复用性。</li><li>传统的组件随着业务复杂度越来越高，代码量会不断的加大，整个代码逻辑都不易阅读和理解。</li><li>Vue3 使用组合式 API 的地方为 <strong>setup</strong>。</li><li>在 setup 中，我们可以按逻辑关注点对部分代码进行分组，然后提取逻辑片段并与其他组件共享代码。因此，组合式 API（Composition API） 允许我们编写更有条理的代码。</li><li>发现传统的 vue2 使用 <strong>Option Api</strong> 逻辑比较分散 可读性差 可维护性差,对比 vue3 <strong>Composition Api</strong> 逻辑分明 可维护性 高</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220613174052655.png" alt="Composition API"></p><h2 id="Vue3-新特性"><a href="#Vue3-新特性" class="headerlink" title="Vue3 新特性"></a>Vue3 新特性</h2><h3 id="Composition-Api"><a href="#Composition-Api" class="headerlink" title="Composition Api"></a>Composition Api</h3><ul><li>Setup 函数式编程 也叫vue Hook</li><li>例如 ref reactive watch computed toRefs toRaws 我们会在下几个章节详解</li></ul><h3 id="重写双向绑定"><a href="#重写双向绑定" class="headerlink" title="重写双向绑定"></a>重写双向绑定</h3><ul><li>vue2 基于 Object.defineProperty()实现</li><li>vue3 基于Proxy  proxy与Object.defineProperty(obj, prop, desc)方式相比有以下优势：<ul><li>丢掉麻烦的备份数据</li><li>省去for in 循环</li><li>可以监听数组变化</li><li>代码更简化</li><li>可以监听动态新增的属性；</li><li>可以监听删除的属性 ；</li><li>可以监听数组的索引和 length 属性；</li></ul></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">let</span> proxyObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token function-variable function">get</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> prop <span class="token keyword">in</span> target <span class="token operator">?</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function-variable function">set</span> <span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span>prop<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">888</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优化Vdom"><a href="#优化Vdom" class="headerlink" title="优化Vdom"></a>优化Vdom</h3><ul><li>在Vue2中,每次更新diff,都是全量对比,Vue3则只对比带有标记的,这样大大减少了非动态内容的对比消耗</li></ul><h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><ul><li>Vue3 支持多个根节点,Vue2 <strong>template</strong> 中只能有一个根节点</li></ul><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;12&lt;/div&gt;  &lt;div&gt;23&lt;/div&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tree-shaking"><a href="#Tree-shaking" class="headerlink" title="Tree shaking"></a>Tree shaking</h3><ul><li>之前 webpack 里面的树摇,能减少打包后的代码体积</li></ul><h1 id="VUE-开发初体验"><a href="#VUE-开发初体验" class="headerlink" title="VUE 开发初体验"></a>VUE 开发初体验</h1><h2 id="VUE文件介绍"><a href="#VUE文件介绍" class="headerlink" title="VUE文件介绍"></a>VUE文件介绍</h2><h3 id="SFC-语法规范"><a href="#SFC-语法规范" class="headerlink" title="SFC 语法规范"></a>SFC 语法规范</h3><ul><li><strong>*.vue</strong> 文件都由三种类型的顶层语法块所组成：<code>&lt;template&gt;</code> <code>&lt;script&gt;</code> <code>&lt;style&gt;</code></li></ul><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><ul><li>每个 <code>*.vue</code> 文件最多可同时包含一个顶层 <code>&lt;template&gt;</code> 块。</li><li>其中的内容会被提取出来并传递给 <code>@vue/compiler-dom</code>，预编译为 JavaScript 的渲染函数，并附属到导出的组件上作为其 <code>render</code> 选项。</li></ul><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><ul><li>每一个 <code>*.vue</code> 文件可同时包含多个 <code>&lt;script&gt;</code> 块 (不包括 <code>&lt;script setup&gt;</code>)</li><li>该脚本将作为 ES Module 来执行</li><li>其<strong>默认导出</strong>的内容应该是 Vue 组件选项对象，它要么是一个普通的对象，要么是 <a href="https://v3.cn.vuejs.org/api/global-api.html#definecomponent">defineComponent</a> 的返回值</li></ul><h3 id="script-setup"><a href="#script-setup" class="headerlink" title="script setup"></a>script setup</h3><ul><li>每个 *.vue 文件最多可同时包含一个 <code>&lt;script setup&gt;</code> 块 (不包括常规的 <code>&lt;script&gt;</code>)</li><li>该脚本会被预处理并作为组件的 setup() 函数使用，也就是说它会在每个组件实例中执行。<code>&lt;script setup&gt; </code>的顶层绑定会自动暴露给模板。更多详情请查看 <a href="https://v3.cn.vuejs.org/api/sfc-script-setup.html"><code>&lt;script setup&gt; 文档</code></a></li></ul><h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><ul><li>一个 <code>*.vue</code> 文件可以包含多个 <code>&lt;style&gt;</code> 标签。</li><li><code>&lt;style&gt;</code> 标签可以通过 <code>scoped</code> 或 <code>module</code> attribute (更多详情请查看 <a href="https://v3.cn.vuejs.org/api/sfc-style">SFC 样式特性</a>) 将样式封装在当前组件内。多个不同封装模式的 <code>&lt;style&gt;</code> 标签可以在同一个组件中混</li></ul><h2 id="js引入及创建-APP"><a href="#js引入及创建-APP" class="headerlink" title="js引入及创建 APP"></a>js引入及创建 APP</h2><ul><li>可以下载 cdn 地址的 js 到本地引用</li><li>通过Vue.createApp 创建实例对象</li><li>实例中 return返回的数据，可在被挂载的组件中通过  两对大括号的方式 声明式定义</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    vue@next 这个是最新版，不推荐这么用，一般用指定版本 或者下载 js 文件，防止自动更新后语法出错--&gt;</span>    <span class="token comment">&lt;!--    &lt;script src="https://unpkg.com/vue@next"&gt;&lt;/script&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.global.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--这是一个组件--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{messages}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    {{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    创建一个实例 app <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                messages<span class="token operator">:</span> <span class="token string">"this is a test"</span><span class="token punctuation">,</span>                msg<span class="token operator">:</span> <span class="token string">"hello vue"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#demo"</span><span class="token punctuation">)</span>        <span class="token comment">// 挂载上面的 demo 组件</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">原始的 app.msg 信息：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>app<span class="token punctuation">.</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"hello vue3.2.31"</span>     <span class="token comment">// 这里能改变 data return 下 msg 值，也就是 return 里面的都是app实例的属性</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220302004040409.png" alt="引入及创建 APP"></p><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ul><li>取整个返回的数组：<code>v-for="titles in articles</code></li><li>从数组中下标 0 开始取 5 条：<code>v-for="titles in articles.slice(0, 5)</code> 将每次遍历的结果赋值给 titles</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220302005037359.png" alt="v-for 循环"></p><h2 id="插入属性"><a href="#插入属性" class="headerlink" title="插入属性"></a>插入属性</h2><ul><li>对标签中新增属性，可通过冒号+属性名的方式来操作，例如：<code>&lt;div style="color: red;background:yellow" :style="{width,height}"&gt;</code></li><li><code>height,width</code> 是 ES6 json 的简写，既是键又是值</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220302012013762.png" alt="插入属性"></p><h2 id="点击控制是否显示"><a href="#点击控制是否显示" class="headerlink" title="点击控制是否显示"></a>点击控制是否显示</h2><ul><li>在 &lt;h2&gt; 标签上添加点击，改变show 的布尔值控制 display 属性是否显示</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.global.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment">/*将元素的显示设为无 隐藏*/</span>    <span class="token punctuation">}</span>    <span class="token selector">div.show</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{messages}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show = !show<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    &lt;div class="box" :class="{show:true}" :style="{width,height}"&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{show}<span class="token punctuation">"</span></span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span>width<span class="token punctuation">,</span>height<span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>titles in articles.slice(0, 5)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{titles.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                show<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                messages<span class="token operator">:</span> <span class="token string">"this is a test"</span><span class="token punctuation">,</span>                msg<span class="token operator">:</span> <span class="token string">"hello vue"</span><span class="token punctuation">,</span>                height<span class="token operator">:</span> <span class="token string">"200px"</span><span class="token punctuation">,</span>                width<span class="token operator">:</span> <span class="token string">"300px"</span><span class="token punctuation">,</span>                articles<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title111111'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1111"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title222222'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1112"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title333333'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1113"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title444444'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1114"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title555555'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1115"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title666666'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1116"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title777777'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1117"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#demo"</span><span class="token punctuation">)</span>        <span class="token comment">// 挂载上面的 demo 组件</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">原始的 app.msg 信息：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>app<span class="token punctuation">.</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"hello vue3.2.31"</span>     <span class="token comment">// 这里能改变 data return 下 msg 值，也就是 return 里面的都是app实例的属性</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220302014726313.png" alt="点击显示或隐藏"></p><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><ul><li>上面是在&lt;h2&gt;标签里面通过点击对，show属性取反，现在可以通过定义一个方法，改变属性取反，在&lt;h2&gt; 标签中引用方法</li><li>方法名和属性名最好不要重复有可能会出现系统不知道找的是方法还是属性（但是方法后面会有括号）</li><li>定义方法通过 <code>methods</code> 标签，和 <code>data()</code> 同级</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>../js/vue.global.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">.box</span> <span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token comment">/*将元素的显示设为无 隐藏*/</span>    <span class="token punctuation">}</span>    <span class="token selector">div.show</span> <span class="token punctuation">{</span>        <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {{messages}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>isShow()<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    &lt;div class="box" :class="{show:true}" :style="{width,height}"&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{show}<span class="token punctuation">"</span></span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span>width<span class="token punctuation">,</span>height<span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>titles in articles.slice(0, 5)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{titles.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                show<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                messages<span class="token operator">:</span> <span class="token string">"this is a test"</span><span class="token punctuation">,</span>                msg<span class="token operator">:</span> <span class="token string">"hello vue"</span><span class="token punctuation">,</span>                height<span class="token operator">:</span> <span class="token string">"200px"</span><span class="token punctuation">,</span>                width<span class="token operator">:</span> <span class="token string">"300px"</span><span class="token punctuation">,</span>                articles<span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title111111'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1111"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title222222'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1112"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title333333'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1113"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title444444'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1114"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title555555'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1115"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title666666'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1116"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token punctuation">{</span>title<span class="token operator">:</span> <span class="token string">'title777777'</span><span class="token punctuation">,</span> content<span class="token operator">:</span> <span class="token string">"content1117"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token function">isShow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>show <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>show<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">"#demo"</span><span class="token punctuation">)</span>        <span class="token comment">// 挂载上面的 demo 组件</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">原始的 app.msg 信息：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>app<span class="token punctuation">.</span>msg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"hello vue3.2.31"</span>     <span class="token comment">// 这里能改变 data return 下 msg 值，也就是 return 里面的都是app实例的属性</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220302020615183.png" alt="方法定义与引用"></p><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><ul><li>内容指定为 ts 变量可指定类型</li><li><code>template {{ }}</code> 中可直接引用</li><li>number或者 Boolean 类型的可以用三目运算符</li><li>还可直接计算，可调用 api等等</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup lang="ts"&gt;let msg: string = "好像是 ts 的语法指定类型";let num: number = 0;  //1 为真，其它都为假let num2: number = 3;let str: string = "this,is,测,试";&lt;/script&gt;&lt;template&gt;  &lt;div&gt;    &lt;h2&gt;{{ msg }}&lt;/h2&gt;    &lt;h2&gt;{{ num ? `num为真${num}` : `num为假${num}` }}&lt;/h2&gt;    &lt;h2&gt;{{ num2 + 1 }}&lt;/h2&gt;    &lt;h2&gt;{{ str.split(",") }}&lt;/h2&gt;    &lt;h2&gt;{{ str.split(",").map(v =&gt; `v=${v}`) }}&lt;/h2&gt;  &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220302235352596.png" alt="体验"></p><h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><ul><li><p>3:30  P7</p></li><li><p>vue 的指令都是以 V 开头的</p></li><li><p>v-text：在一个标签中插入文本显示</p></li><li><p>v-html：插入富文本</p></li><li><p>v-if  v-show：布尔值控制元素是否展示（v-show 操作的是 display：none，比 v-if 性能好）</p></li><li><p>v-if-else语法：如果要对比文本 <code>v-if="flag == 'A'"</code>  双引号套单引号</p></li><li><p>v-on:click 或者简写 @click 绑定事件</p></li></ul><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue (读音 /vjuː/，类似于 &lt;strong&gt;view&lt;/strong&gt;) 是一套用于构建用户界面的&lt;strong&gt;渐进式框架&lt;/strong&gt;。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与&lt;a href=&quot;https://v3.cn.vuejs.org/guide/single-file-component.html&quot;&gt;现代化的工具链&lt;/a&gt;以及各种&lt;a href=&quot;https://github.com/vuejs/awesome-vue#components--libraries&quot;&gt;支持类库&lt;/a&gt;结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="TS" scheme="https://www.adalucky.com/tags/TS/"/>
    
    <category term="Vue3" scheme="https://www.adalucky.com/tags/Vue3/"/>
    
    <category term="Vite" scheme="https://www.adalucky.com/tags/Vite/"/>
    
    <category term="pinia" scheme="https://www.adalucky.com/tags/pinia/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 下</title>
    <link href="https://www.adalucky.com/auto/typescript2/"/>
    <id>https://www.adalucky.com/auto/typescript2/</id>
    <published>2022-06-03T08:16:29.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>TypeScript是<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF/124767">微软</a>开发的一个开源的<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/9845131">编程语言</a>，通过在<a href="https://baike.baidu.com/item/JavaScript/321142">JavaScript</a>的基础上添加静态类型定义构建而成。TypeScript通过TypeScript<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067">编译器</a>或Babel转译为JavaScript代码，可运行在任何<a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911">浏览器</a>，任何<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=337697099&amp;bvid=BV1wR4y1377K&amp;cid=485681203&amp;page=18" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="tsconfig-json-文件"><a href="#tsconfig-json-文件" class="headerlink" title="tsconfig.json 文件"></a>tsconfig.json 文件</h1><ul><li><code>tsc --init</code>命令可生成 tsconfig.json 文件</li></ul><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><ul><li>具体使用可见查官网配置简介</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"incremental"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span>    <span class="token property">"tsBuildInfoFile"</span><span class="token operator">:</span> <span class="token string">"./buildFile"</span><span class="token punctuation">,</span>    <span class="token comment">// 增量编译文件的存储位置</span>    <span class="token property">"diagnostics"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 打印诊断信息</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"ES5"</span><span class="token punctuation">,</span>    <span class="token comment">// 目标语言的版本</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"CommonJS"</span><span class="token punctuation">,</span>    <span class="token comment">// 生成代码的模板标准</span>    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"./app.js"</span><span class="token punctuation">,</span>    <span class="token comment">// 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD",</span>    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"DOM"</span><span class="token punctuation">,</span>      <span class="token string">"ES2015"</span><span class="token punctuation">,</span>      <span class="token string">"ScriptHost"</span><span class="token punctuation">,</span>      <span class="token string">"ES2019.Array"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array",</span>    <span class="token property">"allowJS"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 允许编译器编译JS，JSX文件</span>    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 允许在JS文件中报错，通常与allowJS一起使用</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>    <span class="token comment">// 指定输出目录</span>    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>    <span class="token comment">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span>    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 生成声明文件，开启后会自动生成声明文件</span>    <span class="token property">"declarationDir"</span><span class="token operator">:</span> <span class="token string">"./file"</span><span class="token punctuation">,</span>    <span class="token comment">// 指定生成声明文件存放目录</span>    <span class="token property">"emitDeclarationOnly"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 只生成声明文件，而不会生成js文件</span>    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 生成目标文件的sourceMap文件</span>    <span class="token property">"inlineSourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中</span>    <span class="token property">"declarationMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 为声明文件生成sourceMap</span>    <span class="token property">"typeRoots"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 声明文件目录，默认时node_modules/@types</span>    <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 加载的声明文件包</span>    <span class="token property">"removeComments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 删除注释</span>    <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 不输出文件,即编译后不会生成任何js文件</span>    <span class="token property">"noEmitOnError"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 发送错误时不输出任何文件</span>    <span class="token property">"noEmitHelpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用</span>    <span class="token property">"importHelpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 通过tslib引入helper函数，文件必须是模块</span>    <span class="token property">"downlevelIteration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现</span>    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 开启所有严格的类型检查</span>    <span class="token property">"alwaysStrict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 在代码中注入'use strict'</span>    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 不允许隐式的any类型</span>    <span class="token property">"strictNullChecks"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 不允许把null、undefined赋值给其他类型的变量</span>    <span class="token property">"strictFunctionTypes"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 不允许函数参数双向协变</span>    <span class="token property">"strictPropertyInitialization"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 类的实例属性必须初始化</span>    <span class="token property">"strictBindCallApply"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 严格的bind/call/apply检查</span>    <span class="token property">"noImplicitThis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 不允许this有隐式的any类型</span>    <span class="token property">"noUnusedLocals"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 检查只声明、未使用的局部变量(只提示不报错)</span>    <span class="token property">"noUnusedParameters"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 检查未使用的函数参数(只提示不报错)</span>    <span class="token property">"noFallthroughCasesInSwitch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 防止switch语句贯穿(即如果没有break语句后面不会执行)</span>    <span class="token property">"noImplicitReturns"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">//每个分支都会有返回值</span>    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 允许export=导出，由import from 导入</span>    <span class="token property">"allowUmdGlobalAccess"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 允许在模块中全局变量的方式访问umd模块</span>    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>    <span class="token comment">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>    <span class="token comment">// 解析非相对模块的基地址，默认是当前目录</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token comment">// 路径映射，相对于baseUrl</span>      <span class="token comment">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span>      <span class="token property">"jquery"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"node_modules/jquery/dist/jquery.min.js"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"rootDirs"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"src"</span><span class="token punctuation">,</span>      <span class="token string">"out"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错</span>    <span class="token property">"listEmittedFiles"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 打印输出文件</span>    <span class="token property">"listFiles"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token comment">// 打印编译的文件(包括引用的声明文件)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"src/**/*"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 指定一个排除列表（include的反向操作）</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"demo.ts"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 指定哪些文件使用该配置（属于手动一个个指定文件）</span>  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"demo.ts"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><ul><li>编译默认是编译当前目录下所有的ts文件,也可用 include 指定需要编译的文件</li><li>如下所示,指定只编译 <strong>index.ts index3.ts</strong> 两个文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"./src/index.ts"</span><span class="token punctuation">,</span>    <span class="token string">"./src/index3.ts"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220603193103950.png" alt="include"></p><h3 id="exclude"><a href="#exclude" class="headerlink" title="exclude"></a>exclude</h3><ul><li>和 include 相反，指定编译需要排除的文件</li><li>如下所示即表示,编译时排除 <strong>./src/index3.ts</strong> 这个文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"./src/index3.ts"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><ul><li>指定编译 js 的版本例如 es5  es6 es2016</li><li>一般采用 es6 的较多，如果为了兼容低版本的浏览器可以指定 es5 或者更低 </li><li>该属性时写在 compilerOptions 内的</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"./src/index3.ts"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es6"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220603195413230.png" alt="target"></p><h3 id="allowsJS"><a href="#allowsJS" class="headerlink" title="allowsJS"></a>allowsJS</h3><ul><li>是否允许编译 js 文件</li><li>如果项目中有 js 和 ts 就需要设置该属性开启一起编译（不过一个项目最好还是固定一种）</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"./src/index2.ts"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span>    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="removeComments"><a href="#removeComments" class="headerlink" title="removeComments"></a>removeComments</h3><ul><li>是否在编译过程中删除文件中的注释</li></ul><h3 id="rootDir"><a href="#rootDir" class="headerlink" title="rootDir"></a>rootDir</h3><ul><li>编译文件的目录</li></ul><h3 id="outDir"><a href="#outDir" class="headerlink" title="outDir"></a>outDir</h3><ul><li>输出的目录</li><li>打包后的目录 一般默认为 <strong>./dist</strong></li></ul><h3 id="sourceMap"><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h3><ul><li>代码源文件</li></ul><h3 id="strict"><a href="#strict" class="headerlink" title="strict"></a>strict</h3><ul><li>严格模式</li><li>布尔值,开启后就不能滥用类型 </li></ul><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><ul><li>默认common.js 可选es6模式 amd umd 等</li><li>看上去定义定义方法 导包的关键字不一样了</li></ul><h1 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>在我们的工作中无法避免 <strong>全局变量</strong> 造成的污染,在 JS 中我们一般是通过模块的方式进行导出进行解决</li><li>全局变量污染: 在两个不同的文件中定义了相同变量名的全局变量会造成重复,通过 <strong>export进行导出，当成一个模块</strong> 的方式进行解决</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>在 TypeScript 中为我们提供了 namespace 避免这个问题的出现</li><li>通过 <code>namespace</code> 关键字定义,通过 <code>export</code> 暴露</li><li>内部模块,主要用于组织代码,避免命名冲突。</li><li>命名空间内的类默认私有</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>namespace 定义,export 导出</li><li>使用时用 命名空间名.导出的对象或者方法</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 命名空间</span><span class="token keyword">namespace</span> base <span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1888</span>    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">args<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>base<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="嵌套命名空间"><a href="#嵌套命名空间" class="headerlink" title="嵌套命名空间"></a>嵌套命名空间</h2><ul><li>里面加一层命名空间,命名空间名前面加上 export 关键字</li><li>支持多层或者多个嵌套</li><li>使用时注意嵌套关系</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 嵌套命名空间</span><span class="token keyword">namespace</span> basePro <span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">namespace</span> base <span class="token punctuation">{</span>        <span class="token keyword">export</span> <span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"ada"</span>        <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>basePro<span class="token punctuation">.</span>base<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>basePro<span class="token punctuation">.</span>base<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="抽离命令空间"><a href="#抽离命令空间" class="headerlink" title="抽离命令空间"></a>抽离命令空间</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 抽离命名空间</span><span class="token keyword">export</span> <span class="token keyword">namespace</span> abs <span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span>abs<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./abs"</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>abs<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220603205615822.png" alt="抽离命名空间"></p><h2 id="简化命名空间"><a href="#简化命名空间" class="headerlink" title="简化命名空间"></a>简化命名空间</h2><ul><li>在上面的嵌套命名空间中,使用一个里层的命名空间往往需要带上前面几层例如 <strong>basePro.base.say(basePro.base.str)</strong></li><li>我们可以通过 import 的方式进行导入简化</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 嵌套命名空间</span><span class="token keyword">namespace</span> basePro <span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">namespace</span> base <span class="token punctuation">{</span>        <span class="token keyword">export</span> <span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"ada"</span>        <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 普通用法</span>basePro<span class="token punctuation">.</span>base<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>basePro<span class="token punctuation">.</span>base<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token comment">// 简化命名空间(有点类之前的别名)</span><span class="token keyword">import</span> base1 <span class="token operator">=</span> basePro<span class="token punctuation">.</span>base<span class="token punctuation">;</span><span class="token keyword">import</span> str2 <span class="token operator">=</span> basePro<span class="token punctuation">.</span>base<span class="token punctuation">.</span>str<span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>base1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220603210814288.png" alt="简化命名空间"></p><h2 id="合并命名空间"><a href="#合并命名空间" class="headerlink" title="合并命名空间"></a>合并命名空间</h2><ul><li>重名的命名空间会自动合并</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">namespace</span> User <span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">let</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"ada"</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> User <span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">let</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token comment">// 两个命名空间名称相同时会自动合并</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220603211752988.png" alt="合并命名空间"></p><h1 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="三斜线指令"></a>三斜线指令</h1><ul><li>三斜线指令是包含单个 XML 标签的单行注释。 注释的内容会做为编译器指令使用</li><li>三斜线指令<em>仅</em>可放在包含它的文件的最顶端。 一个三斜线指令的前面只能出现单行或多行注释，这包括其它的三斜线指令。 如果它们出现在一个语句或声明之后，那么它们会被当做普通的单行注释，并且不具有特殊的涵义</li><li><code>/// &lt;reference path="..." /&gt;</code>指令是三斜线指令中最常见的一种,它用于声明文件间的<strong>依赖</strong></li><li>三斜线引用告诉编译器在编译过程中要引入的额外的文件,你也可以把它理解能<code>import</code>，它可以告诉编译器在编译过程中要引入的额外的文件</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">namespace</span> <span class="token constant">A</span> <span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">'a'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">namespace</span> <span class="token constant">A</span> <span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">'b'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">///&lt;reference path="./index2.ts" /&gt;</span><span class="token comment">///&lt;reference path="./index3.ts" /&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li>声明文件引入</li><li><code>yarn add @types/node -D</code></li><li><code>/// &lt;reference types="node" /&gt;</code> 就会找到 <strong>@types/node/index.d.ts</strong></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">/// &lt;reference types="node" /&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220604151748540.png" alt="声明文件引入"></p><h1 id="声明文件-d-ts"><a href="#声明文件-d-ts" class="headerlink" title="声明文件 d.ts"></a>声明文件 d.ts</h1><ul><li><strong>声明文件 declare</strong> 当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">declare</span> <span class="token keyword">var</span> 声明全局变量<span class="token keyword">declare</span> <span class="token keyword">function</span> 声明全局方法<span class="token keyword">declare</span> <span class="token keyword">class</span> <span class="token class-name">声明全局类</span><span class="token keyword">declare</span> <span class="token keyword">enum</span> 声明全局枚举类型<span class="token keyword">declare</span> <span class="token keyword">namespace</span> 声明（含有子属性的）全局对象<span class="token keyword">interface</span> <span class="token class-name">和</span> <span class="token keyword">type</span> <span class="token class-name">声明全局类型</span><span class="token comment">/// &lt;reference /&gt; 三斜线指令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>假设我们有两个依赖 <strong>axios</strong> <strong>express</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> axios express -S<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果导入报错提示安装 @type/xxxxx  那么直接进行安装依赖即可（原因的一些老的依赖没有声明文件 <strong>index.d.ts</strong> 基本上通过 @type 进行安装都行(前提是存在)，微软在 npm 上维护了大量的 ）</li></ul><h1 id="Mixins混入"><a href="#Mixins混入" class="headerlink" title="Mixins混入"></a>Mixins混入</h1><h2 id="对象混入"><a href="#对象混入" class="headerlink" title="对象混入"></a>对象混入</h2><ul><li>可以使用 ES6 的 <strong>Object.assign</strong> 合并多个对象</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// Object.assign 对象混入</span><span class="token keyword">enum</span> <span class="token constant">GENDER</span> <span class="token punctuation">{</span>    <span class="token constant">WOMAN</span><span class="token punctuation">,</span> <span class="token constant">MAN</span><span class="token punctuation">,</span> <span class="token constant">OTHER</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Name</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Age</span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Gender</span> <span class="token punctuation">{</span>    gender<span class="token operator">:</span> <span class="token constant">GENDER</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1<span class="token operator">:</span> Name <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">}</span><span class="token keyword">let</span> p2<span class="token operator">:</span> Age <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token operator">:</span> <span class="token number">66</span><span class="token punctuation">}</span><span class="token keyword">let</span> p3<span class="token operator">:</span> Gender <span class="token operator">=</span> <span class="token punctuation">{</span>gender<span class="token operator">:</span> <span class="token constant">GENDER</span><span class="token punctuation">.</span><span class="token constant">MAN</span><span class="token punctuation">}</span><span class="token comment">// 此时的 User 会被推断成 Name &amp; Age &amp; Gender 交叉类型</span><span class="token keyword">const</span> User <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220604160954607.png" alt="对象混入"></p><h2 id="类混入"><a href="#类混入" class="headerlink" title="类混入"></a>类混入</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 类的混入</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">changeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'张三'</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 下面创建一个 C 类，结合了这两个 mixins，没使用extends而是使用implements。 把类当成了接口</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">C</span></span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token punctuation">{</span>    <span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">boolean</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token operator">:</span> boolean<span class="token punctuation">,</span> name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token keyword">type</span>    <span class="token punctuation">}</span>    <span class="token function">changeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 最后，创建这个帮助函数，帮我们做混入操作 curClazz 目标类--&gt;C  itemClazz 混入类数组 [A,B]</span><span class="token keyword">function</span> <span class="token function">Mixins</span><span class="token punctuation">(</span><span class="token parameter">curCls<span class="token operator">:</span> any<span class="token punctuation">,</span> itemCls<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    itemCls<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment">// Object.getOwnPropertyNames()可以获取对象自身的属性，除去他继承来的属性</span>        Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>            curCls<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>name<span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 把 A B 两个类的方法都混入编入到 C 中</span><span class="token function">Mixins</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">let</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">C</span></span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c1<span class="token punctuation">.</span><span class="token function">changeType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220604170534944.png" alt="类混入"></p><h1 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h1><h2 id="装饰器简介"><a href="#装饰器简介" class="headerlink" title="装饰器简介"></a>装饰器简介</h2><ul><li><em>装饰器</em>是一种特殊类型的声明，它能够被附加到 <strong>类声明</strong> <strong>方法</strong> <strong>访问符</strong> <strong>属性</strong> 或 <strong>参数</strong>上。</li><li>Decorator 装饰器是一项实验性特性，在未来的版本中可能会发生改变（我个人的理解就是后端的注解）</li><li>它们不仅增加了代码的可读性，清晰地表达了意图，而且提供一种方便的手段，增加或修改类的功能</li><li>若要启用实验性的装饰器特性，你必须在命令行或<code>tsconfig.json</code>里启用编译器选项</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无参类装饰器"><a href="#无参类装饰器" class="headerlink" title="无参类装饰器"></a>无参类装饰器</h2><ul><li>定义类装饰器使用 <code>ClassDecorator</code> 记得要区分作用域,类装饰器就在类上用</li><li><code>target: Function</code> 表示使用该装饰器的对象</li><li>使用时通过 <code>@装饰器名</code></li><li>注意使用 <strong>any 临时断言</strong> </li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// ClassDecorator 作用在类上装饰器</span><span class="token keyword">const</span> watcher<span class="token operator">:</span> <span class="token function-variable function">ClassDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>    <span class="token comment">// 给传入的类追加一个泛型方法 getName</span>    target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getInput <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">(name: T): T =&gt; </span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token plain-text">}// 在类上通过 @ 符号 + 装饰器名称进行使用@watcherclass User </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token plain-text">let user = new User();// 由于 User 类没有直接声明或者继承 getInput 方法编译会报错，所以需要临时断言成 any 类型let u1 = (</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">user).getInput("人类")console.log(u1)@watcherclass Phone </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token plain-text">let phone = new Phone();// 同样这里也要使用 any 临时断言let p1 = (</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">phone).getInput(1888)console.log(p1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220604182056458.png" alt="无参类装饰器"></p><h2 id="带参类装饰器"><a href="#带参类装饰器" class="headerlink" title="带参类装饰器"></a>带参类装饰器</h2><ul><li>装饰器工厂,其实也就是一个高阶函数 外层的函数接受值 里层的函数最终接受类的构造函数</li><li>同样使用 <code>ClassDecorator</code> 来表示类装饰器</li><li>装饰器参数可定义多个,这里只定义了一个 type,约束为 string </li><li>在类上使用该装饰器时,需要传一个 string 类型的值给装饰器</li><li>装饰器的参数和内部的 sum 函数的参数是独立的,内部的 sum 函数是在使用了该装饰器的类对象调用时的传参</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 带参数的类装饰器,可以定义多个参数,目前装饰器只定义了一个 type</span><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">type</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">ClassDecorator</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">// 高阶函数通过 @sum 在类上，返回一个 sum 函数,函数需要两个参数 a b 函数的执行逻辑由 type 决定</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">"add"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">===</span> <span class="token string">"minus"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">minus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">+</span> b    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">-</span> b    <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>@<span class="token function">sum</span><span class="token punctuation">(</span><span class="token string">"minus"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Minus</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">add).sum(1, 2));let minus = new Minus();console.log((</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">minus).sum(1, 2));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220604182331717.png" alt="带参类装饰器"></p><h2 id="组合式装饰器"><a href="#组合式装饰器" class="headerlink" title="组合式装饰器"></a>组合式装饰器</h2><ul><li>说人话就是可以使用多个装饰器</li><li>没什么特殊的,就是在使用的地方引用多个已定义的装饰器就行</li><li>引用的时候可以写在一行或者换行书写</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 组合装饰器,先定义两个装饰器</span><span class="token keyword">let</span> Age<span class="token operator">:</span> <span class="token function-variable function">ClassDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">let</span> Amount<span class="token operator">:</span> <span class="token function-variable function">ClassDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    target<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>amount <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">}</span><span class="token comment">// 组合装饰器的使用1</span>@Age @Amount<span class="token keyword">class</span> <span class="token class-name">User2</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 组合装饰器使用2</span>@Age@Amount<span class="token keyword">class</span> <span class="token class-name">User3</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">new User2()).age);console.log((</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">new User2()).amount);console.log((</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">new User3()).age);console.log((</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">new User3()).amount);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220604205044372.png" alt="装饰器组合"></p><h2 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h2><ul><li>该装饰器作用在方法上,通过关键字 <code>MethodDecorator</code></li><li>返回的信息也是三部分,最后的 <strong>value writable enumerable configurable</strong> 是一些附加信息</li></ul><p><img src="https://blog.adalucky.com/notes/ada/image-20220604213802178.png" alt="方法装饰器"></p><h2 id="方法的形参装饰器"><a href="#方法的形参装饰器" class="headerlink" title="方法的形参装饰器"></a>方法的形参装饰器</h2><ul><li>作用在方法的形参上,通过关键字 <code>ParameterDecorator</code> 定义</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 作用在方法的形参上</span><span class="token keyword">const</span> parm1<span class="token operator">:</span> <span class="token function-variable function">ParameterDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Pa1</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">// 返回 [ { getName: [Function (anonymous)] }, 'getName', 2 ]</span>    <span class="token comment">// 第二个值表示方法的名称,第三个值 2 表示使用修饰器参数的 index 为 2 (从 0 开始)</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> age<span class="token operator">:</span> number<span class="token punctuation">,</span> @parm1 amount<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220604213551203.png" alt="方法的形参装饰器"></p><h2 id="属性装饰器"><a href="#属性装饰器" class="headerlink" title="属性装饰器"></a>属性装饰器</h2><ul><li>该装饰器作用在属性上,通过关键字 <code>PropertyDecorator</code> 定义</li><li>控制台会输出三个属性分别是 target 参数名 还有一个 undefined</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> prop1<span class="token operator">:</span> <span class="token function-variable function">PropertyDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> prop2<span class="token operator">:</span> <span class="token function-variable function">PropertyDecorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">P1</span></span> <span class="token punctuation">{</span>    @prop1    age<span class="token operator">:</span> <span class="token number">18</span>    amount<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name"><span class="token constant">P2</span></span> <span class="token punctuation">{</span>    @prop2    age<span class="token operator">:</span> <span class="token number">18</span>    amount<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220604211004077.png" alt="属性装饰器"></p><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;TypeScript是&lt;a href=&quot;https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF/124767&quot;&gt;微软&lt;/a&gt;开发的一个开源的&lt;a href=&quot;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/9845131&quot;&gt;编程语言&lt;/a&gt;，通过在&lt;a href=&quot;https://baike.baidu.com/item/JavaScript/321142&quot;&gt;JavaScript&lt;/a&gt;的基础上添加静态类型定义构建而成。TypeScript通过TypeScript&lt;a href=&quot;https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067&quot;&gt;编译器&lt;/a&gt;或Babel转译为JavaScript代码，可运行在任何&lt;a href=&quot;https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911&quot;&gt;浏览器&lt;/a&gt;，任何&lt;a href=&quot;https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192&quot;&gt;操作系统&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="TS" scheme="https://www.adalucky.com/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 上</title>
    <link href="https://www.adalucky.com/auto/typescript1/"/>
    <id>https://www.adalucky.com/auto/typescript1/</id>
    <published>2022-05-21T13:47:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>TypeScript是<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF/124767">微软</a>开发的一个开源的<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/9845131">编程语言</a>，通过在<a href="https://baike.baidu.com/item/JavaScript/321142">JavaScript</a>的基础上添加静态类型定义构建而成。TypeScript通过TypeScript<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067">编译器</a>或Babel转译为JavaScript代码，可运行在任何<a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911">浏览器</a>，任何<a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=337697099&amp;bvid=BV1wR4y1377K&amp;cid=470617753&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>为什么要使用 TypeScript? 因为现在主流的前端框架都采用 TS 了，比如我们常见的 Vue React Angular,已然成为了一种趋势</li><li>TS是JS的超集，所以JS基础的类型都包含在内</li><li>网上流传着一句话 <strong>始于 JavaScript,终于 JavaScript</strong> 因为浏览器是不认识 TypeScript 所以我们会把 TS 编译成 JS 最终运行的还是 js 文件</li></ul><h2 id="起步安装"><a href="#起步安装" class="headerlink" title="起步安装"></a>起步安装</h2><ul><li>以下安装均采用 yarn 进行管理，如果是 npm 替换对应的命令即可</li><li>安装 @types/node ts-node 是为了在开发环境直接使用命令运行 ts 文件,因为 node 不认识 ts ,如果不安装的话需要先用 tsc xxx.ts  进行编译 然后 node xxx.js 比较麻烦</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局安装 typescript </span><span class="token function">yarn</span> <span class="token function">add</span> typescript -g<span class="token comment"># 查看 typescript 版本 当前使用的是 Version 4.6.4</span>tsc -v<span class="token comment"># @types/node ts-node 支持</span><span class="token function">yarn</span> <span class="token function">add</span> @types/node --save-dev<span class="token function">yarn</span> <span class="token function">add</span> ts-node -g<span class="token comment"># ts-node 版本查看  当前版本 v10.7.0</span>ts-node -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="类型约束"><a href="#类型约束" class="headerlink" title="类型约束"></a>类型约束</h1><h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><ul><li>约定为字符串类型</li><li>string 为小写的</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">//基本数据类型 string</span><span class="token keyword">let</span> str<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"定义一个字符串类型"</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//也可以使用 ES6 的字符串模板</span><span class="token keyword">let</span> str2<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">引用字符串模板--&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220521202151651.png" alt="string类型"></p><h2 id="number"><a href="#number" class="headerlink" title="number"></a>number</h2><ul><li>number 类型</li><li>支持十六进制、十进制、八进制和二进制</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 支持十六进制、十进制、八进制和二进制</span><span class="token comment">//Nan</span><span class="token keyword">let</span> notANumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notANumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//普通数字  如右所示 number 类型用字符串赋值就会报错 let num2: number = "123";</span><span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无穷大</span><span class="token keyword">let</span> infinityNumber<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>infinityNumber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//十六进制</span><span class="token keyword">let</span> hex<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0xf00d</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//二进制</span><span class="token keyword">let</span> binary<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0b1010</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//八进制s</span><span class="token keyword">let</span> octal<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0o744</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>octal<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220521202900444.png" alt="number类型"></p><h2 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h2><ul><li>注意，使用构造函数 <code>Boolean</code> 创造的对象<strong>不是</strong>布尔值</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">//new Boolean() 返回的是一个 Boolean 对象</span><span class="token keyword">let</span> objBoolean<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">let</span> falseBoolean<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>objBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>falseBoolean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以直接使用布尔值</span><span class="token keyword">let</span> <span class="token builtin">boolean</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">//也可以通过构造函数初始化返回布尔值</span><span class="token keyword">let</span> boolean1<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>boolean1<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220521210140018.png" alt="boolean类型"></p><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><ul><li>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 <code>void</code> 表示没有任何返回值的函数</li><li><code>void</code> 类型的用法，主要是用在我们<strong>不希望</strong>调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数</strong></li><li><strong>void也可以定义undefined 和 null类型</strong></li><li>运行前需要先编译成 js 文件用 node 运行（直接用 ts-node 运行 ts 文件会报错）</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// void定义undefined 和 null类型</span><span class="token keyword">let</span> u<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回值为 void 或者不返回</span><span class="token keyword">function</span> <span class="token function">voidFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test void'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">voidFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'test void2'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">voidFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">voidFn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220521212357797.png" alt="void类型"></p><h2 id="null-undefined"><a href="#null-undefined" class="headerlink" title="null_undefined"></a>null_undefined</h2><ul><li>与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 null undefined 类型的变量，可以赋值给 string 类型的变量</li><li>void 类型不能赋值给其它类型,编译不会通过</li><li>运行前需要先编译成 js 文件用 node 运行（直接用 ts-node 运行 ts 文件会报错）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220521213923387.png" alt="null_undefined类型"></p><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><ul><li>any类型没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型</li><li>声明变量的时候没有指定任意类型默认为any</li><li>弊端如果使用any 就失去了TS类型检测的作用</li><li>any 可以是对象，并且调用对应的属性或者方法</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// any类型没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型</span><span class="token keyword">let</span> anyStr<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token string">"string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> anyNum<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">let</span> anyArray<span class="token operator">:</span><span class="token builtin">any</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">let</span> anyBoolean<span class="token operator">:</span><span class="token builtin">any</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token keyword">let</span> anySym<span class="token operator">:</span><span class="token builtin">any</span><span class="token operator">=</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anyStr<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anyNum<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anyArray<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anyBoolean<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anySym<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220523232051195.png" alt="any类型示例"></p><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><ul><li>TypeScript 3.0中引入的 unknown 类型也被认为是 top type ，但它更安全。与 any 一样，所有类型都可以分配给unknown</li><li>unknow unknow类型比any更加严格当你要使用any 的时候可以尝试使用unknow</li><li>unknow unknown定义的对象不能使用属性或者方法</li><li>unknown 类型的只能赋值给 unknown 或者 any 类型的数据</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">let</span> unkStr<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token string">"str"</span><span class="token keyword">let</span> unkNum<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">let</span> unkArray<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">let</span> unkBoolean<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token keyword">let</span> unkSym<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unkStr<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unkNum<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unkArray<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unkBoolean<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unkSym<span class="token punctuation">)</span><span class="token keyword">let</span> unkObj<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">}</span><span class="token keyword">let</span> unkFun<span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    fun<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">666</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> anyObj<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">}</span><span class="token keyword">let</span> anyFun<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    fun<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">888</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// unknown 类定义的对象不能使用对应的属性和方法 any 类型的可以使用对应的属性</span><span class="token comment">// console.log(unkObj.age)</span><span class="token comment">// console.log(unkFun.fun());</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anyObj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anyFun<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220523234344243.png" alt="unknown类型"></p><h2 id="any与-unknown区别"><a href="#any与-unknown区别" class="headerlink" title="any与 unknown区别"></a>any与 unknown区别</h2><ul><li>unknown 类定义的对象不能使用对应的属性和方法 any 类型的可以使用对应的属性</li><li>unknown可赋值对象只有unknown 和 any</li><li>any 类型可赋值给其它任意类型 </li></ul><h1 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h1><h2 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h2><ul><li>在 typescript 中，我们定义对象的方式要用关键字<strong>interface</strong>（接口），我的理解是使用<strong>interface</strong>来定义一种约束,让数据的结构满足约束的格式</li><li>如果有两个 interface 重名,那么会合并对象的属性</li><li>使用接口约束的时候不能多一个属性也不能少一个属性,必须与接口保持一致 </li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token builtin">number</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token keyword">const</span> ada<span class="token operator">:</span> Person <span class="token operator">=</span>    <span class="token punctuation">{</span>        age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span>        amount<span class="token operator">:</span> <span class="token number">3000</span>    <span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">device</span> <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">device</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">const</span> computer<span class="token operator">:</span> device <span class="token operator">=</span> <span class="token punctuation">{</span>    id<span class="token operator">:</span> <span class="token string">"10010"</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"Mac"</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>computer<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220524220336832.png" alt="基础示例"></p><h2 id="可选式操作符"><a href="#可选式操作符" class="headerlink" title="可选式操作符"></a>可选式操作符</h2><ul><li>上面的基本示例中,使用接口约束时必须要求属性和接口一致,如果有些属性希望可有可没有的需要使用可选式操作符 <code>?</code> 来声明接口中的属性</li><li>一般用做在一些新数据和老数据之间,老数据没有该字段</li><li><em>可选属性的含义是该属性可以不存在</em></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 对于接口 Person ,并不是所有的对象都有 amount 属性,那么就可以用 ? 号标识为可选操作</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    amount<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token comment">// amount 是一个可选操作,所以不声明不会报错</span><span class="token keyword">const</span> ada<span class="token operator">:</span> Person <span class="token operator">=</span>    <span class="token punctuation">{</span>        age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"阿达"</span>    <span class="token punctuation">}</span><span class="token keyword">const</span> p<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"people"</span><span class="token punctuation">,</span>    amount<span class="token operator">:</span> <span class="token number">36000</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220524220228350.png" alt="可选操作符"></p><h2 id="任意属性proName"><a href="#任意属性proName" class="headerlink" title="任意属性proName"></a>任意属性proName</h2><ul><li>当不确定后台返回的属性时，可用 proName 描述任意属性</li><li>需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> number<span class="token punctuation">,</span>    name<span class="token operator">:</span> string<span class="token punctuation">,</span>    amount<span class="token operator">?</span><span class="token operator">:</span> number<span class="token punctuation">,</span>    <span class="token comment">// any 任意类型   联合类型 string|number 范围为其中一种</span>    <span class="token punctuation">[</span>proName<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">}</span><span class="token keyword">const</span> ada<span class="token operator">:</span> Person <span class="token operator">=</span>    <span class="token punctuation">{</span>        age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">,</span>        friends<span class="token operator">:</span> <span class="token string">"萨瓦迪卡"</span>    <span class="token punctuation">}</span><span class="token keyword">const</span> p<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"people"</span><span class="token punctuation">,</span>    amount<span class="token operator">:</span> <span class="token number">36000</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220524222111199.png" alt="proName任意属性"></p><h2 id="只读属性-readonly"><a href="#只读属性-readonly" class="headerlink" title="只读属性 readonly"></a>只读属性 readonly</h2><ul><li>readonly 只读属性,初始化后是不允许被赋值,<strong>只能读取</strong></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    amount<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    <span class="token comment">// any 任意类型   联合类型 string|number 范围为其中一种</span>    <span class="token punctuation">[</span>proName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">}</span><span class="token keyword">const</span> ada<span class="token operator">:</span> Person <span class="token operator">=</span>    <span class="token punctuation">{</span>        age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">,</span>        friends<span class="token operator">:</span> <span class="token string">"萨瓦迪卡"</span>    <span class="token punctuation">}</span>ada<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">66</span><span class="token comment">// ada.name = "ada" 会报错,因为上面定义了为 readonly 初始化对象后就不能再赋值了,只能读取不能修改</span><span class="token comment">// ada.name = "ada"</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220524222737259.png" alt="只读属性 readonly"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li>接口中定义函数</li><li>函数定义参数和返回值类型(参数可选,没有返回可用用 void 表示 )</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    amount<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    <span class="token comment">// any 任意类型   联合类型 string|number 范围为其中一种</span>    <span class="token punctuation">[</span>proName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>    <span class="token function">eat</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">const</span> ada<span class="token operator">:</span> Person <span class="token operator">=</span>    <span class="token punctuation">{</span>        age<span class="token operator">:</span> <span class="token number">25</span><span class="token punctuation">,</span>        name<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">,</span>        friends<span class="token operator">:</span> <span class="token string">"萨瓦迪卡"</span><span class="token punctuation">,</span>        <span class="token function">eat</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">在吃东西</span><span class="token template-punctuation string">`</span></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"阿达"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220524223621697.png" alt="function函数"></p><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><ul><li>接口的继承关系</li><li>支持多继承</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token punctuation">{</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token comment">// 多继承 P 拥有 A B 的属性和自己定义的属性</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">P</span></span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">A</span></span><span class="token punctuation">,</span> <span class="token constant">B</span> <span class="token punctuation">{</span>    amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token comment">// 初始化对象必须要实现 P 拥有的属性</span><span class="token keyword">let</span> ada<span class="token operator">:</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">88</span><span class="token punctuation">,</span>    amount<span class="token operator">:</span> <span class="token number">666</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><ul><li>Array 数组</li></ul><h2 id="常用声明方式"><a href="#常用声明方式" class="headerlink" title="常用声明方式"></a>常用声明方式</h2><ul><li>一般可以通过 <code>类型[]</code> <code>Array&lt;具体类型&gt;</code> 两种方式来进行声明</li><li>一般用泛型声明,泛型的类型为 any 是最常用的</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 定义方式一  类型[]</span><span class="token keyword">let</span> arrStr<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token string">'是'</span><span class="token punctuation">,</span> <span class="token string">'阿'</span><span class="token punctuation">,</span> <span class="token string">'达'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arrNum<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arrBoolean<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arrAny<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span><span class="token comment">// 定义方式二 泛型  Array&lt;具体类型&gt;</span><span class="token keyword">let</span> arrStr1<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = ['我', '是', '阿', '达1'];let arrNum1: Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = [1, 3, 5, 7, 91];let arrBoolean1: Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>boolean</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = [true, false, true, false];let arrAny1: Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = ['我', 1, true, 1];console.log(arrStr)console.log(arrStr1)console.log(arrNum)console.log(arrNum1)console.log(arrBoolean)console.log(arrBoolean1)console.log(arrAny)console.log(arrAny1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220525215037112.png" alt="声明数组"></p><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><ul><li>数组中的值还是一个数组</li><li>和基本定义的一样也有两种方式</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220525220721503.png" alt="多维数组"></p><h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><ul><li>arguments 是入参的集合，该对象需要用 IArguments 类来接收</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// arguments 参数集合</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>    <span class="token comment">//  我们传入的参数全部都是数字但是我们不能通过 number[]  或者 any[] 来进行接收</span>    <span class="token comment">//  let arr1: number[] = arguments;</span>    <span class="token comment">//  let arr2: any[] = arguments;</span>    <span class="token comment">//    只能用 IArguments 接收，从右侧控制台打印也能看出数据的类型</span>    <span class="token keyword">let</span> arr3<span class="token operator">:</span> IArguments <span class="token operator">=</span> arguments<span class="token punctuation">;</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220525222657138.png" alt="arguments"></p><h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><ul><li>一般用来描述类数组</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 通过接口定义的数组一般用来描述 类数组</span><span class="token keyword">interface</span> <span class="token class-name">ArrNumber</span> <span class="token punctuation">{</span>    <span class="token comment">// index 下标用 number 类型表示  值的类型约束为 number</span>    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ArrString</span> <span class="token punctuation">{</span>    <span class="token comment">// index 下标用 number 类型表示  值的类型约束为 string</span>    <span class="token punctuation">[</span>index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">let</span> arrNumber<span class="token operator">:</span> ArrNumber <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrString<span class="token operator">:</span> ArrString <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrNumber<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrString<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220525223652564.png" alt="类数组"></p><h1 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h1><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><ul><li>默认情况 <strong>参数不能多传，也不能少传 必须按照约定的类型来</strong></li><li>可通过 <strong>?</strong> 号将参数标记为可选参数,例如 <code>amount?: number</code> 在使用该函数的时候被标记的参数就可传可不传了(如果不传的话,再去使用该参数就是 <strong>undefined</strong>)</li><li>也可在声明参数的时候给默认值,例如 <code>amount: number = 0</code> 如果不传该参数就会使用默认值,传了就会以实际传参为准</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 基础使用</span><span class="token comment">//ES6 方法体只有一条语句 不用大括号和 return</span><span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> amount<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">string</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,amount=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> ada <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'ada'</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada<span class="token punctuation">)</span><span class="token comment">// amount --&gt; 指定为可选参数，可传可不传(但是这样输出的时候会是 amount=undefined )</span><span class="token keyword">const</span> fun1 <span class="token operator">=</span> <span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> amount<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">string</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,amount=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> ada1 <span class="token operator">=</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'ada'</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada1<span class="token punctuation">)</span><span class="token comment">// 默认参数 --&gt; 如果 amount 不传就默认为 0 ,传了就以传的为准</span><span class="token keyword">const</span> fun2 <span class="token operator">=</span> <span class="token punctuation">(</span>age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">string</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">age=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,name=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,amount=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>amount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">let</span> ada2 <span class="token operator">=</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'ada'</span><span class="token punctuation">)</span><span class="token keyword">let</span> ada3 <span class="token operator">=</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'ada'</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada2<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220525230500354.png" alt="基础使用"></p><h2 id="接口约束函数"><a href="#接口约束函数" class="headerlink" title="接口约束函数"></a>接口约束函数</h2><ul><li>通过接口定义一个类型，函数约定为该类型</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 同样支持可选参数</span><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>    amount<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token comment">// 定义了一个函数叫做 printUser,传入的参数类型为 User 类型,返回值也为 User 类型</span><span class="token keyword">const</span> printUser <span class="token operator">=</span> <span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">User</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> user<span class="token punctuation">}</span><span class="token comment">// 传参需要满足约定类型 User 类型的对象 {}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">printUser</span><span class="token punctuation">(</span>        <span class="token punctuation">{</span>            name<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">,</span>            age<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220525231730876.png" alt="接口约束函数"></p><h2 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h2><ul><li><p>函数名相同，参数列表不同</p></li><li><p>参数列表包括参数的类型和个数以及参数的顺序</p></li><li><p>与返回类型无关</p></li><li><p>如果参数类型不同，则参数类型应设置为 <strong>any</strong>。</p></li><li><p>参数数量不同你可以将不同的参数设置为可选</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 上面两个是函数的重载</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">:</span> string<span class="token punctuation">,</span> params2<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span><span class="token comment">//这个是执行函数</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token operator">:</span> string<span class="token punctuation">,</span> params2<span class="token operator">?</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> params <span class="token operator">+</span> params2<span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">'我'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220525234815202.png" alt="重载函数"></p><h2 id="剩余参数（展开）"><a href="#剩余参数（展开）" class="headerlink" title="剩余参数（展开）"></a>剩余参数（展开）</h2><ul><li>可变参数用 …args 来表示</li><li>在定义可变参数时,也可以定义一些固定参数,然后用可变参数定义剩余参数</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>array<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">...</span>items<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>       <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>items<span class="token punctuation">)</span>       <span class="token keyword">return</span> items<span class="token punctuation">}</span> <span class="token keyword">let</span> a<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h1><ul><li>联合类型,能约束属性为多个类型中的一个</li><li>比如工作中需求瞬息万变,一个联系人的电话既可以存 11 位手机号，又可以存座机号或者其它场景要求 既可以传参 0或1,又可以传参布尔值</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 联合类型,能约束属性为多个类型中的一个</span><span class="token keyword">let</span> phone<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">'021-09xxxx98'</span><span class="token keyword">let</span> phone2<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token number">13566778899</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phone<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment">// phone2 因为实际类型为 number 类型，因此没有 length 属性</span><span class="token comment">// console.log(phone2.length)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>phone2<span class="token punctuation">)</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>beautiful<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token comment">//强转 2 次   0 --&gt; true --&gt; false     true --&gt; false --&gt; true</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span>beautiful<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//非 0 及真</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220528221512928.png" alt="联合类型"></p><h1 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h1><ul><li>多种类型的集合，联合对象将具有所联合类型的所有成员</li><li>如下示例 info 参数为 <strong>Person</strong> <strong>Man</strong> 的交叉类型,传递参数时需要传递两个类型的所有必填参数</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 交叉类型 有点类是与 extends</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Man</span> <span class="token punctuation">{</span>    hasBeard<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">}</span><span class="token keyword">let</span> ada <span class="token operator">=</span> <span class="token punctuation">(</span>info<span class="token operator">:</span> Person <span class="token operator">&amp;</span> Man<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">ada</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> hasBeard<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220528221615416.png" alt="交叉类型"></p><h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h1><ul><li>需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误</li><li>语法:  <code>值 as 类型  value as string</code> 或 <code>&lt;类型&gt;值  &lt;string&gt;value</code></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 类型断言</span><span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token punctuation">(</span>amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>amount <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"10元"</span><span class="token punctuation">)</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">F1</span></span> <span class="token punctuation">{</span>    run<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name"><span class="token constant">F2</span></span> <span class="token punctuation">{</span>    build<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">let</span> fun2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">F</span><span class="token operator">:</span> <span class="token constant">F1</span> <span class="token operator">|</span> <span class="token constant">F2</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter"><span class="token keyword">void</span></span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">F2</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">F).build)}fun2(</span><span class="token punctuation">{</span>build<span class="token operator">:</span> <span class="token string">"bui"</span><span class="token punctuation">}</span><span class="token plain-text">)fun2(</span><span class="token punctuation">{</span>run<span class="token operator">:</span> <span class="token string">"bui"</span><span class="token punctuation">}</span><span class="token plain-text">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220528220926660.png" alt="类型断言"></p><hr><ul><li>使用 any 临时断言</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">//这样写会报错因为 window 对象没有abc这个东西</span>window<span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token number">123</span><span class="token comment">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span><span class="token punctuation">(</span>window <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>abc <span class="token operator">=</span> <span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>断言型断言是不具影响力的</li><li>在下面的例子中，将 something 断言为 boolean 虽然可以通过编译，但是并没有什么用 并不会影响结果, 因为编译过程中会删除类型断言</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token parameter">something<span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> something <span class="token keyword">as</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 返回值为 1 并不会因为方法中进行了断言 或者定义了返回值类型这里就变成了布尔值 </span><span class="token function">toBoolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><h2 id="ECMAScript-内置对象"><a href="#ECMAScript-内置对象" class="headerlink" title="ECMAScript 内置对象"></a>ECMAScript 内置对象</h2><ul><li><code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>RegExp</code>、<code>Date</code>、<code>Error</code></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">let</span> b<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">let</span> n<span class="token operator">:</span> Number <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">let</span> s<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'哔哩哔哩XXXX'</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">let</span> d<span class="token operator">:</span> Date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">let</span> r<span class="token operator">:</span> RegExp <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^1</span><span class="token regex-delimiter">/</span></span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">let</span> e<span class="token operator">:</span> Error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"error!"</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM-内置对象"><a href="#DOM-内置对象" class="headerlink" title="DOM 内置对象"></a>DOM 内置对象</h2><ul><li>**<code>Document</code>、<code>HTMLElement</code>、<code>NodeList</code> **</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">let</span> body<span class="token operator">:</span> HTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span class="token keyword">let</span> allDiv<span class="token operator">:</span> NodeList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取div 这种需要类型断言 或者加个判断应为读不到返回null</span><span class="token keyword">let</span> div<span class="token operator">:</span> HTMLElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLDivElementdocument<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token operator">:</span> MouseEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BOM-内置对象"><a href="#BOM-内置对象" class="headerlink" title="BOM 内置对象"></a>BOM 内置对象</h2><ul><li><code>Event</code></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">//dom元素的映射表</span><span class="token keyword">interface</span> <span class="token class-name">HTMLElementTagNameMap</span> <span class="token punctuation">{</span>    <span class="token string">"a"</span><span class="token operator">:</span> HTMLAnchorElement<span class="token punctuation">;</span>    <span class="token string">"abbr"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"address"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"applet"</span><span class="token operator">:</span> HTMLAppletElement<span class="token punctuation">;</span>    <span class="token string">"area"</span><span class="token operator">:</span> HTMLAreaElement<span class="token punctuation">;</span>    <span class="token string">"article"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"aside"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"audio"</span><span class="token operator">:</span> HTMLAudioElement<span class="token punctuation">;</span>    <span class="token string">"b"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"base"</span><span class="token operator">:</span> HTMLBaseElement<span class="token punctuation">;</span>    <span class="token string">"bdi"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"bdo"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"blockquote"</span><span class="token operator">:</span> HTMLQuoteElement<span class="token punctuation">;</span>    <span class="token string">"body"</span><span class="token operator">:</span> HTMLBodyElement<span class="token punctuation">;</span>    <span class="token string">"br"</span><span class="token operator">:</span> HTMLBRElement<span class="token punctuation">;</span>    <span class="token string">"button"</span><span class="token operator">:</span> HTMLButtonElement<span class="token punctuation">;</span>    <span class="token string">"canvas"</span><span class="token operator">:</span> HTMLCanvasElement<span class="token punctuation">;</span>    <span class="token string">"caption"</span><span class="token operator">:</span> HTMLTableCaptionElement<span class="token punctuation">;</span>    <span class="token string">"cite"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"code"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"col"</span><span class="token operator">:</span> HTMLTableColElement<span class="token punctuation">;</span>    <span class="token string">"colgroup"</span><span class="token operator">:</span> HTMLTableColElement<span class="token punctuation">;</span>    <span class="token string">"data"</span><span class="token operator">:</span> HTMLDataElement<span class="token punctuation">;</span>    <span class="token string">"datalist"</span><span class="token operator">:</span> HTMLDataListElement<span class="token punctuation">;</span>    <span class="token string">"dd"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"del"</span><span class="token operator">:</span> HTMLModElement<span class="token punctuation">;</span>    <span class="token string">"details"</span><span class="token operator">:</span> HTMLDetailsElement<span class="token punctuation">;</span>    <span class="token string">"dfn"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"dialog"</span><span class="token operator">:</span> HTMLDialogElement<span class="token punctuation">;</span>    <span class="token string">"dir"</span><span class="token operator">:</span> HTMLDirectoryElement<span class="token punctuation">;</span>    <span class="token string">"div"</span><span class="token operator">:</span> HTMLDivElement<span class="token punctuation">;</span>    <span class="token string">"dl"</span><span class="token operator">:</span> HTMLDListElement<span class="token punctuation">;</span>    <span class="token string">"dt"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"em"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"embed"</span><span class="token operator">:</span> HTMLEmbedElement<span class="token punctuation">;</span>    <span class="token string">"fieldset"</span><span class="token operator">:</span> HTMLFieldSetElement<span class="token punctuation">;</span>    <span class="token string">"figcaption"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"figure"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"font"</span><span class="token operator">:</span> HTMLFontElement<span class="token punctuation">;</span>    <span class="token string">"footer"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"form"</span><span class="token operator">:</span> HTMLFormElement<span class="token punctuation">;</span>    <span class="token string">"frame"</span><span class="token operator">:</span> HTMLFrameElement<span class="token punctuation">;</span>    <span class="token string">"frameset"</span><span class="token operator">:</span> HTMLFrameSetElement<span class="token punctuation">;</span>    <span class="token string">"h1"</span><span class="token operator">:</span> HTMLHeadingElement<span class="token punctuation">;</span>    <span class="token string">"h2"</span><span class="token operator">:</span> HTMLHeadingElement<span class="token punctuation">;</span>    <span class="token string">"h3"</span><span class="token operator">:</span> HTMLHeadingElement<span class="token punctuation">;</span>    <span class="token string">"h4"</span><span class="token operator">:</span> HTMLHeadingElement<span class="token punctuation">;</span>    <span class="token string">"h5"</span><span class="token operator">:</span> HTMLHeadingElement<span class="token punctuation">;</span>    <span class="token string">"h6"</span><span class="token operator">:</span> HTMLHeadingElement<span class="token punctuation">;</span>    <span class="token string">"head"</span><span class="token operator">:</span> HTMLHeadElement<span class="token punctuation">;</span>    <span class="token string">"header"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"hgroup"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"hr"</span><span class="token operator">:</span> HTMLHRElement<span class="token punctuation">;</span>    <span class="token string">"html"</span><span class="token operator">:</span> HTMLHtmlElement<span class="token punctuation">;</span>    <span class="token string">"i"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"iframe"</span><span class="token operator">:</span> HTMLIFrameElement<span class="token punctuation">;</span>    <span class="token string">"img"</span><span class="token operator">:</span> HTMLImageElement<span class="token punctuation">;</span>    <span class="token string">"input"</span><span class="token operator">:</span> HTMLInputElement<span class="token punctuation">;</span>    <span class="token string">"ins"</span><span class="token operator">:</span> HTMLModElement<span class="token punctuation">;</span>    <span class="token string">"kbd"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"label"</span><span class="token operator">:</span> HTMLLabelElement<span class="token punctuation">;</span>    <span class="token string">"legend"</span><span class="token operator">:</span> HTMLLegendElement<span class="token punctuation">;</span>    <span class="token string">"li"</span><span class="token operator">:</span> HTMLLIElement<span class="token punctuation">;</span>    <span class="token string">"link"</span><span class="token operator">:</span> HTMLLinkElement<span class="token punctuation">;</span>    <span class="token string">"main"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"map"</span><span class="token operator">:</span> HTMLMapElement<span class="token punctuation">;</span>    <span class="token string">"mark"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"marquee"</span><span class="token operator">:</span> HTMLMarqueeElement<span class="token punctuation">;</span>    <span class="token string">"menu"</span><span class="token operator">:</span> HTMLMenuElement<span class="token punctuation">;</span>    <span class="token string">"meta"</span><span class="token operator">:</span> HTMLMetaElement<span class="token punctuation">;</span>    <span class="token string">"meter"</span><span class="token operator">:</span> HTMLMeterElement<span class="token punctuation">;</span>    <span class="token string">"nav"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"noscript"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"object"</span><span class="token operator">:</span> HTMLObjectElement<span class="token punctuation">;</span>    <span class="token string">"ol"</span><span class="token operator">:</span> HTMLOListElement<span class="token punctuation">;</span>    <span class="token string">"optgroup"</span><span class="token operator">:</span> HTMLOptGroupElement<span class="token punctuation">;</span>    <span class="token string">"option"</span><span class="token operator">:</span> HTMLOptionElement<span class="token punctuation">;</span>    <span class="token string">"output"</span><span class="token operator">:</span> HTMLOutputElement<span class="token punctuation">;</span>    <span class="token string">"p"</span><span class="token operator">:</span> HTMLParagraphElement<span class="token punctuation">;</span>    <span class="token string">"param"</span><span class="token operator">:</span> HTMLParamElement<span class="token punctuation">;</span>    <span class="token string">"picture"</span><span class="token operator">:</span> HTMLPictureElement<span class="token punctuation">;</span>    <span class="token string">"pre"</span><span class="token operator">:</span> HTMLPreElement<span class="token punctuation">;</span>    <span class="token string">"progress"</span><span class="token operator">:</span> HTMLProgressElement<span class="token punctuation">;</span>    <span class="token string">"q"</span><span class="token operator">:</span> HTMLQuoteElement<span class="token punctuation">;</span>    <span class="token string">"rp"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"rt"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"ruby"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"s"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"samp"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"script"</span><span class="token operator">:</span> HTMLScriptElement<span class="token punctuation">;</span>    <span class="token string">"section"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"select"</span><span class="token operator">:</span> HTMLSelectElement<span class="token punctuation">;</span>    <span class="token string">"slot"</span><span class="token operator">:</span> HTMLSlotElement<span class="token punctuation">;</span>    <span class="token string">"small"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"source"</span><span class="token operator">:</span> HTMLSourceElement<span class="token punctuation">;</span>    <span class="token string">"span"</span><span class="token operator">:</span> HTMLSpanElement<span class="token punctuation">;</span>    <span class="token string">"strong"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"style"</span><span class="token operator">:</span> HTMLStyleElement<span class="token punctuation">;</span>    <span class="token string">"sub"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"summary"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"sup"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"table"</span><span class="token operator">:</span> HTMLTableElement<span class="token punctuation">;</span>    <span class="token string">"tbody"</span><span class="token operator">:</span> HTMLTableSectionElement<span class="token punctuation">;</span>    <span class="token string">"td"</span><span class="token operator">:</span> HTMLTableDataCellElement<span class="token punctuation">;</span>    <span class="token string">"template"</span><span class="token operator">:</span> HTMLTemplateElement<span class="token punctuation">;</span>    <span class="token string">"textarea"</span><span class="token operator">:</span> HTMLTextAreaElement<span class="token punctuation">;</span>    <span class="token string">"tfoot"</span><span class="token operator">:</span> HTMLTableSectionElement<span class="token punctuation">;</span>    <span class="token string">"th"</span><span class="token operator">:</span> HTMLTableHeaderCellElement<span class="token punctuation">;</span>    <span class="token string">"thead"</span><span class="token operator">:</span> HTMLTableSectionElement<span class="token punctuation">;</span>    <span class="token string">"time"</span><span class="token operator">:</span> HTMLTimeElement<span class="token punctuation">;</span>    <span class="token string">"title"</span><span class="token operator">:</span> HTMLTitleElement<span class="token punctuation">;</span>    <span class="token string">"tr"</span><span class="token operator">:</span> HTMLTableRowElement<span class="token punctuation">;</span>    <span class="token string">"track"</span><span class="token operator">:</span> HTMLTrackElement<span class="token punctuation">;</span>    <span class="token string">"u"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"ul"</span><span class="token operator">:</span> HTMLUListElement<span class="token punctuation">;</span>    <span class="token string">"var"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span>    <span class="token string">"video"</span><span class="token operator">:</span> HTMLVideoElement<span class="token punctuation">;</span>    <span class="token string">"wbr"</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><ul><li>定义 Promise 时,如果我们不指定返回的类型TS是推断不出来返回的是什么类型</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 函数和 new 对象的时候都需要指定泛型  这个 Promise 才知道要返回什么类型</span><span class="token keyword">function</span> <span class="token function">promise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">promise().then(res =&gt; </span><span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><h2 id="类的基本声明"><a href="#类的基本声明" class="headerlink" title="类的基本声明"></a>类的基本声明</h2><ul><li>在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明</li><li>如果了定义了属性但是构造函数不进行初始化 也会报错 通常是给个默认值（在定义属性的时候给个默认值） 或者 进行赋值</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">//定义三个属性 和一个带有默认值的属性(如果gender 不进行默认值赋值,就需要在构造器中初始化,不然会报错)</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    age<span class="token operator">:</span> <span class="token builtin">number</span>    amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span>    gender<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"未知"</span>    <span class="token comment">//constructor 构造器</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> age<span class="token operator">:</span> number<span class="token punctuation">,</span> amount<span class="token operator">:</span> number <span class="token operator">|</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> ada <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"10元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> ada2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"阿达"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada<span class="token punctuation">,</span> ada2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220528230035526.png" alt="定义类"></p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ul><li>TS 中类属性有三个权限修饰符 <strong>public  private  protected</strong></li><li>属性显示声明的情况下默认就是 <strong>public</strong></li><li>public 没有限制作用域，类外也能访问</li><li>private 只能在类的内部访问</li><li>protected 内部和子类中能访问</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">//姓名大家都可以知道公开的,年龄的话属于一点点隐私只有比较熟的人能访问,个人余额是保密的只有自己能访问</span>    <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token keyword">protected</span> age<span class="token operator">:</span> <span class="token builtin">number</span>    <span class="token keyword">private</span> amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span>    gender<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"未知"</span>    <span class="token comment">//constructor 构造器</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> age<span class="token operator">:</span> number<span class="token punctuation">,</span> amount<span class="token operator">:</span> number <span class="token operator">|</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> ada <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"10元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 外部只能访问 public 属性(gender 未显示声明，默认为 public)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ada<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ada<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> age<span class="token operator">:</span> number<span class="token punctuation">,</span> amount<span class="token operator">:</span> number <span class="token operator">|</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// amount 属性子类中也不能访问</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">Man</span><span class="token punctuation">(</span><span class="token string">"TypeScript"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220528232905205.png" alt="修饰符"></p><h2 id="static-修饰符"><a href="#static-修饰符" class="headerlink" title="static 修饰符"></a>static 修饰符</h2><ul><li>静态方法只能访问静态属性(和 java 差不多)</li><li>类中的静态函数之间可以用 this 相互调用</li><li>非静态函数中如果要调用静态函数需要用 <strong>类名.静态函数名</strong></li><li>外部调用静态函数也是用 <strong>类名.静态函数名</strong> 不需要再单独 New 对象了</li><li>static 属性在构造器中也只能用 <strong>类名.静态属性名</strong></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 静态属性  静态函数</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token keyword">protected</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">23</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> amount<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">//constructor 构造器</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string<span class="token punctuation">,</span> age<span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"初始化对象"</span><span class="token punctuation">)</span>        <span class="token comment">//非静态函数中如果要调用静态函数需要用 类名.静态函数名</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 静态函数中只能访问静态属性</span>    <span class="token keyword">static</span> <span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>amount    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//静态函数调用另外一个静态函数,直接用 this</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//外部调用静态函数也是用 类名.静态函数名 不需要再单独 New 对象了</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220528235931744.png" alt="static"></p><h2 id="interface-1"><a href="#interface-1" class="headerlink" title="interface"></a>interface</h2><ul><li>interface 定义类 使用关键字 implements  后面跟interface的名字多个用逗号隔开 继承还是用extends</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Man</span> <span class="token punctuation">{</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Woman</span> <span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//继承 Woman 并且实现 Person, Man 两个接口</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Woman</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">,</span> Man <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"---子类实现接口未显示的方法"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"+++子类实现接口未显示的方法"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 创建对象后调用实现的方法和继承方法</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529003044399.png" alt="接口"></p><h2 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h2><ul><li>应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类</li><li>或者你也可以把他作为一个基类-&gt; 通过继承一个派生类去实现基类的一些方法</li><li>抽象类中可以有普通函数和抽象函数 </li><li>普通函数可以实现具体方法,派生类不需要实现该方法</li><li>抽象函数不能实现具体业务,派生类必须要实现该方法</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 抽象类中可以有普通函数和抽象函数</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Abs</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token builtin">string</span>    <span class="token keyword">protected</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 普通函数可以实现具体方法,派生类不需要实现该方法</span>    <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment">// 抽象函数不能实现具体业务,派生类必须要实现该方法</span>    <span class="token keyword">abstract</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">PersonAbs</span> <span class="token keyword">extends</span> <span class="token class-name">Abs</span> <span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonAbs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"setName"</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529144736210.png" alt="abstract"></p><h1 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h1><ul><li>元组就是数组的变种</li><li>元组 Tuple 是固定数量的不同类型的元素的组合(但是也可以越界 push)</li><li>元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。元组的好处在于可以把多个元素作为一个单元传递。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 元组 赋值的类型和长度需要和定义时一致</span><span class="token keyword">let</span> arrTuple<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">let</span> arrTuple2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrTuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// arrTuple[1] 自动推断出来是数字类型所以没有 length 属性</span><span class="token comment">// console.log(arrTuple[1].length);</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrTuple<span class="token punctuation">)</span><span class="token comment">// 越界元组(上面显示声明的时候 arrTuple 长度只有 2)，但是这里可以 越界 push 类型约束为联合类型</span>arrTuple<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'ada'</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrTuple<span class="token punctuation">)</span><span class="token comment">// 实际应用场景比如 excel 对象</span><span class="token keyword">let</span> excel<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'title1'</span><span class="token punctuation">,</span> <span class="token string">'name1'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'title2'</span><span class="token punctuation">,</span> <span class="token string">'name2'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'title3'</span><span class="token punctuation">,</span> <span class="token string">'name3'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'title4'</span><span class="token punctuation">,</span> <span class="token string">'name4'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'title5'</span><span class="token punctuation">,</span> <span class="token string">'name5'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'123'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529151528282.png" alt="元组 Tuple"></p><h1 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h1><ul><li>在 JavaScript 中是没有枚举的概念的 TS 帮我们定义了枚举这个类型</li></ul><h2 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 数字枚举 只需要定义属性名，会自动给你排序下标</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    <span class="token constant">RED</span><span class="token punctuation">,</span>    <span class="token constant">GREEN</span><span class="token punctuation">,</span>    <span class="token constant">BLUE</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span><span class="token constant">BLUE</span><span class="token punctuation">)</span><span class="token comment">//增长枚举,给第一个枚举对象定义下标，后面的会自动增长</span><span class="token keyword">enum</span> Color2 <span class="token punctuation">{</span>    <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>    <span class="token constant">GREEN</span><span class="token punctuation">,</span>    <span class="token constant">BLUE</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color2<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">,</span> Color2<span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">,</span> Color2<span class="token punctuation">.</span><span class="token constant">BLUE</span><span class="token punctuation">)</span><span class="token comment">//自定义枚举,没有自定义的会根据前面一个的值自动增长</span><span class="token keyword">enum</span> Color3 <span class="token punctuation">{</span>    <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token constant">GREEN</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token constant">BLUE</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color3<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">,</span> Color3<span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">,</span> Color3<span class="token punctuation">.</span><span class="token constant">BLUE</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529153128888.png" alt="数字枚举"></p><h2 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h2><ul><li>字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</li><li>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。 换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 - 它并不能表达有用的信息，字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字</li><li>下面的 Color1 其实算是一个异构枚举(这里只是为了对比)</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 字符串枚举 没有自增的说法定义了一个,后面的都要定义()</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">,</span>    <span class="token constant">GREEN</span> <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span>    <span class="token constant">BLUE</span> <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">,</span> Color<span class="token punctuation">.</span><span class="token constant">BLUE</span><span class="token punctuation">)</span><span class="token comment">// 字符串枚举,第一个不定义字符串默认为 0,第二个定义了字符串后面的都要定义字符串</span><span class="token keyword">enum</span> Color1 <span class="token punctuation">{</span>    <span class="token constant">RED</span><span class="token punctuation">,</span>    <span class="token constant">GREEN</span> <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">,</span>    <span class="token constant">BLUE</span> <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color1<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">,</span> Color1<span class="token punctuation">.</span><span class="token constant">GREEN</span><span class="token punctuation">,</span> Color1<span class="token punctuation">.</span><span class="token constant">BLUE</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529153902030.png" alt="字符串枚举"></p><h2 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h2><ul><li>将枚举的类型进行混合为字符串和数字类型</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 异构枚举 不到万不得不用这种</span><span class="token keyword">enum</span> bool <span class="token punctuation">{</span>    <span class="token constant">YES</span> <span class="token operator">=</span> <span class="token string">'true'</span><span class="token punctuation">,</span>    <span class="token constant">NO</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token constant">UNKNOWN</span><span class="token punctuation">}</span><span class="token comment">// unknown 在 no 下,因为 no 定义了 0 ,name unknown 会自增</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bool<span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">,</span> bool<span class="token punctuation">.</span><span class="token constant">NO</span><span class="token punctuation">,</span> bool<span class="token punctuation">.</span><span class="token constant">UNKNOWN</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529165531357.png" alt="异构枚举"></p><h2 id="接口枚举"><a href="#接口枚举" class="headerlink" title="接口枚举"></a>接口枚举</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>    <span class="token constant">RED</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token constant">GREEN</span><span class="token punctuation">,</span>    <span class="token constant">BLUE</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// 接口属性的值为枚举属性</span><span class="token keyword">interface</span> <span class="token class-name">Col</span> <span class="token punctuation">{</span>    red<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">}</span><span class="token comment">// 要实现接口中的属性,值的类型必须要和枚举中值的类型相同,因为枚举中声明了 RED = 1 ,那么这里赋值的时候必须是 number 型</span><span class="token keyword">let</span> <span class="token constant">C</span><span class="token operator">:</span> Col <span class="token operator">=</span> <span class="token punctuation">{</span>    red<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token constant">C2</span><span class="token operator">:</span> Col <span class="token operator">=</span> <span class="token punctuation">{</span>    red<span class="token operator">:</span> Color<span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">}</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">C</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">C2</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529171303702.png" alt="接口枚举"></p><h2 id="const枚举"><a href="#const枚举" class="headerlink" title="const枚举"></a>const枚举</h2><ul><li>什么枚举 let 和 var 都是不允许的声明只能使用const 或者不用</li><li>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 <code>const</code>枚举。 常量枚举通过在枚举上使用 <code>const</code>修饰符来定义</li><li>const 声明的枚举会被编译成常量,普通声明的枚举编译完后是个对象</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token keyword">enum</span> bool <span class="token punctuation">{</span>    <span class="token constant">YES</span> <span class="token operator">=</span> <span class="token string">'true'</span><span class="token punctuation">,</span>    <span class="token constant">NO</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bool<span class="token punctuation">.</span><span class="token constant">NO</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//-----------对比----------------</span><span class="token keyword">enum</span> bool2 <span class="token punctuation">{</span>    <span class="token constant">YES</span> <span class="token operator">=</span> <span class="token string">'true'</span><span class="token punctuation">,</span>    <span class="token constant">NO</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bool2<span class="token punctuation">.</span><span class="token constant">NO</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529172807531.png" alt="const枚举"></p><h2 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h2><ul><li>它包含了正向映射（ <code>name</code> -&gt; <code>value</code>）和反向映射（ <code>value</code> -&gt; <code>name</code>）</li><li>要注意的是 <em>不会</em>为字符串枚举成员生成反向映射</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 反向映射</span><span class="token keyword">enum</span> Type <span class="token punctuation">{</span>    <span class="token constant">SUCCESS</span> <span class="token operator">=</span> <span class="token string">'true'</span><span class="token punctuation">,</span>    <span class="token constant">FAIL</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token constant">SUCCESS</span> <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token keyword">let</span> failureValue <span class="token operator">=</span> Type<span class="token punctuation">.</span><span class="token constant">FAIL</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">SUCCESS</span><span class="token punctuation">,</span> failureValue<span class="token punctuation">)</span><span class="token comment">// 这里能取 FAIL 的 key ,SUCCESS 是字符串不能取到 Key</span><span class="token keyword">let</span> failKeys <span class="token operator">=</span> Type<span class="token punctuation">[</span>failureValue<span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>failKeys<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529174931025.png" alt="反向映射"></p><h1 id="类型推论-amp-类型别名"><a href="#类型推论-amp-类型别名" class="headerlink" title="类型推论&amp;类型别名"></a>类型推论&amp;类型别名</h1><ul><li>什么是类型推论？—&gt; 我声明了一个变量，在没有约束类型的情况对其进行了赋值,那么 TS 就会根据赋值的类型推断出实际的类型</li><li>如果你声明变量没有定义类型也没有赋值这时候 TS 会推断成 any 类型可以进行任何操作</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// 类型推论  没有约束类型  a:string b:number</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'str'</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token comment">// 声明时没有定义值,这个时候就是 any 类型</span><span class="token keyword">let</span> anan <span class="token operator">=</span> <span class="token string">"123"</span>an <span class="token operator">=</span> <span class="token number">123</span>an <span class="token operator">=</span> <span class="token boolean">false</span>an <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"22"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> an<span class="token punctuation">)</span><span class="token comment">// 类型别名 s 等同与 string 类型</span><span class="token keyword">type</span> <span class="token class-name">s</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token keyword">let</span> username<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"ada"</span><span class="token comment">// 类型别名 联合类型</span><span class="token keyword">type</span> <span class="token class-name">snb</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span><span class="token keyword">let</span> amount<span class="token operator">:</span> snb <span class="token operator">=</span> <span class="token number">0</span>amount <span class="token operator">=</span> <span class="token string">"0元"</span>amount <span class="token operator">=</span> <span class="token boolean">false</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token comment">// 函数式类型别名,str 类型的函数必须返回 string</span><span class="token keyword">type</span> <span class="token class-name">str</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token keyword">const</span> getName<span class="token operator">:</span> <span class="token function-variable function">str</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">"ada函数式别名"</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 字面量类型别名    变量 s 的赋值 只能是 status 类型值中的 on 或者 off false 三个中的一个</span><span class="token keyword">type</span> <span class="token class-name">status</span> <span class="token operator">=</span> <span class="token string">"on"</span> <span class="token operator">|</span> <span class="token string">"off"</span> <span class="token operator">|</span> <span class="token boolean">false</span><span class="token keyword">let</span> s<span class="token operator">:</span> status <span class="token operator">=</span> <span class="token string">"on"</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529203916253.png" alt="类型推论&amp;类型别名"></p><h1 id="never-类型"><a href="#never-类型" class="headerlink" title="never 类型"></a>never 类型</h1><ul><li>TypeScript 将使用 never 类型来表示不应该存在的状态</li><li>never 与 void 差异: ① void 类型只是没有返回值但本身不会出错 ② never 只会抛出异常没有返回值</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// never 类型 这里约束的是一个交叉类型 实际上是一个不可能的类型,所以被推断出了 never 类型</span><span class="token keyword">let</span> never1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span> <span class="token builtin">number</span><span class="token comment">// 返回never的函数必须存在无法达到的终点</span><span class="token comment">// 因为必定抛出异常，所以 error 将不会有返回值</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">message<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 因为存在死循环，所以 loop 将不会有返回值</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>never 类型的一个应用场景：现在有  <strong>Working</strong> <strong>Happy</strong> 两个接口,产品加了一个新需求，刚好老同事离职了,让新同事加个 Money 接口,我们必须手动找到所有 switch 代码并处理，否则将有可能引入 BUG ,而且这将是一个“隐蔽型”的BUG，如果回归面不够广，很难发现此类BUG,那 TS 有没有办法帮助我们在类型检查阶段发现这个问题呢?当然是有的,由于任何类型都不能赋值给 <code>never</code> 类型的变量，所以当存在进入 <code>default</code> 分支的可能性时，TS的类型检查会及时帮我们发现这个问题</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">Working</span> <span class="token punctuation">{</span>    today<span class="token operator">:</span> <span class="token string">"工作日"</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Happy</span> <span class="token punctuation">{</span>    today<span class="token operator">:</span> <span class="token string">"休息日"</span><span class="token punctuation">}</span><span class="token comment">// 1.产品新加一个需求,新同时把这个 interface 加上了</span><span class="token keyword">interface</span> <span class="token class-name">Money</span> <span class="token punctuation">{</span>    today<span class="token operator">:</span> <span class="token string">"今天 10 号发工资"</span><span class="token punctuation">}</span><span class="token comment">// 2.类型别名也加上了</span><span class="token keyword">type</span> <span class="token class-name">days</span> <span class="token operator">=</span> Working <span class="token operator">|</span> Happy <span class="token operator">|</span> Money<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">day<span class="token operator">:</span> days</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">.</span>today<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 3.这个 case 的代码他不清楚就没加</span>        <span class="token keyword">case</span> <span class="token string">"工作日"</span><span class="token operator">:</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"搬砖"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token string">"休息日"</span><span class="token operator">:</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"看电影"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token comment">// 兜底逻辑</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token comment">// 4.这里编译就会报错，这样就能防止出现其它意外,这就是 never 的一个经典场景</span>            <span class="token keyword">const</span> check<span class="token operator">:</span> <span class="token builtin">never</span> <span class="token operator">=</span> day            <span class="token keyword">break</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220529212454793.png" alt="never经典应用场景"></p><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><ul><li>Symbol 是ES6 新增的一个类型,意寓着象征的意思</li><li><code>symbol</code>类型的值是通过<code>Symbol</code>构造函数创建的。</li><li>可以传递参做为唯一标识 只支持 string 和 number类型的参数,其它类型的值会被 toString</li></ul><h2 id="基础使用-1"><a href="#基础使用-1" class="headerlink" title="基础使用"></a>基础使用</h2><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'字符串'</span><span class="token punctuation">)</span><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">"stri"</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    name<span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span>    arg<span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">}</span><span class="token comment">//for  in 遍历的时候 不会输出 Symbol 类型的 key</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Object.keys  Object.getOwnPropertyNames 遍历的时候 不会输出 Symbol 类型的 key</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 转成 JSON Symbol 类型的 不会被转进去</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object.getOwnPropertySymbols 或者  Symbol 类型的属性</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 获取所有的属性</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220530213313556.png" alt="Symnol基础使用"></p><h2 id="Iterator迭代器"><a href="#Iterator迭代器" class="headerlink" title="Iterator迭代器"></a>Iterator迭代器</h2><ul><li>迭代器不支持对象(对象没有Symbol.iterator() 方法) <strong>Map Set Array 这些都支持</strong></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// Iterator</span><span class="token comment">// 定义一个 number 类型的数组</span><span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = [1, 3, 5]// 通过 Symbol.iterator 的方式迭代 arr  返回的类型是 Iterator&lt;number&gt; ,泛型指定为 arr 的泛型let numbers: Iterator</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = arr[Symbol.iterator]();// next 方法有会返回一个对象，包含两个属性一个是 value 表示迭代出来的值,另外一个是 done 表示是否结束迭代( [true/false])console.log(numbers.next());console.log(numbers.next());console.log(numbers.next());// 其实只能迭代三次第四次的 value= undefined done=true (表示没有了)console.log(numbers.next());// 迭代器示例done 的属性值取反let arr2: Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = [1, 3, 5]let set: Set</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = new Set&lt;string&gt;(["我", "是", "ada"]);let map: Map&lt;string, any&gt; = new Map&lt;string, any&gt;()map.set("name", "ada")map.set("age", 20)let iterator = (args: any): void =&gt; </span><span class="token punctuation">{</span>    <span class="token keyword">let</span> it<span class="token operator">:</span> Iterator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = args[Symbol.iterator]()    let next: any = </span><span class="token punctuation">{</span>done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token plain-text">    while (!next.done) </span><span class="token punctuation">{</span>        next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>next<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token plain-text">}iterator(arr2)iterator(set)iterator(map)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220530232552397.png" alt="iterator迭代器"></p><h2 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h2><ul><li>for of 就像是 iterator 迭代器的语法糖,底层会自动调用Symbol.iterator() 方法帮我们进行迭代</li><li>同样也不支持对象</li><li>与 for in 的区别： for in 主要针对与 Array 迭代出来的是索引,for of 支持遍历大部分类型迭代器 arr nodeList argumetns set map 等,迭代出来的是 value</li><li>ps:截图中我的 <strong>let item of items</strong> 编辑器在报错，但是也能正常运行不知道咋回事</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// for of 生成器</span><span class="token keyword">let</span> arr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = [1, 3, 5]let set: Set</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> = new Set&lt;string&gt;(["我", "是", "ada"]);let map: Map&lt;string, any&gt; = new Map()map.set("name", "ada")map.set("age", 20)type asm = Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> | Set</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> | Map&lt;string, any&gt;let forOf = (items: asm): void =&gt; </span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">forOf(arr)forOf(set)forOf(map)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220530235726882.png" alt="for of生成器"></p><h2 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h2><ul><li>Symbol.hasInstance 方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。</li><li>Symbol.isConcatSpreadable布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。</li><li>Symbol.iterator 方法，被for-of语句调用。返回对象的默认迭代器。</li><li>Symbol.match 方法，被String.prototype.match调用。正则表达式用来匹配字符串。</li><li>Symbol.replace 方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。</li><li>Symbol.search 方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。</li><li>Symbol.species 函数值，为一个构造函数。用来创建派生对象。</li><li>Symbol.split 方法，被String.prototype.split调用。正则表达式来用分割字符串。</li><li>Symbol.toPrimitive 方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。</li><li>Symbol.toStringTag 方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。</li><li>Symbol.unscopables 对象，它自己拥有的属性会被with作用域排除在外。</li></ul><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><ul><li>泛型在 TS 中是很重要的东西,例如 VUE3 是用 TS 编写的,里面用得到了非常多的泛型</li></ul><h2 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h2><ul><li>在我们的场景中会有很多功能一样的函数，但是需要的参数类型却是各不相同,如下两端代码,功能一致,但是对传参类型一个是 number,另外一个是 string</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token function">num</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token operator">:</span> number<span class="token punctuation">,</span> b<span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>number</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token plain-text">num(15, 20)function str(a: string, b: string): Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token plain-text">str("好好学", "上网")</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>泛型函数语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了 T</li><li>当我们使用这个函数的时候把参数的类型传进去就可以了（也就是动态类型）</li><li>我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">returnInput</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">T</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text"> </span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token plain-text">// 调用泛型函数时可做泛型类型约束,如 returnInput&lt;number&gt;(15, 20) ,或不约束 returnInput(15, 20) 会自动触发类型推论console.log(returnInput&lt;number&gt;(15, 20));console.log(returnInput(15, 20));console.log(returnInput("好好学", "上网"));// 多个类型function returnInput2&lt;N, S&gt;(a: N, b: S): Array&lt;N | S&gt; </span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token plain-text">console.log(returnInput2(5, "幼儿园"));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220603145827248.png" alt="泛型函数"></p><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><ul><li>上面我们已经实现了泛型化了，但是这种泛型太任意了,可能会导致传递的参数类型与我们预期的不一致,因此我们可以对泛型进行一定的约束 <strong>使用 extends 关键字</strong></li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">interface</span> <span class="token class-name">len</span> <span class="token punctuation">{</span>    length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">}</span><span class="token comment">// 定义了一个泛型方法,要求传递的参数必须要有 length 属性，且属性值是 number 类型</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">f</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> len<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token comment">// 调用 f 方法是要求传递的参数必须要有 length 属性，如果传如的是 boolean  number 是没有 length 属性的</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220603151604435.png" alt="泛型约束"></p><h2 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h2><ul><li>其中使用了TS泛型和泛型约束。首先定义了T类型并使用extends关键字继承object类型的子类型，然后使用<strong>keyof操作符获取T类型的所有键</strong>，它的返回 类型是联合 类型，最后利用extends关键字约束 K类型必须为keyof T联合类型的子类型</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// K extends keyof O  ---&gt;  K 类型为 O 类型的所有 KEY 的集合</span><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">prop</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">O</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">O</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>obj<span class="token operator">:</span> <span class="token constant">O</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 根据 key值, 获取 obj 该 key 对应的 value</span>    <span class="token keyword">return</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Gender <span class="token punctuation">{</span>    <span class="token constant">WOMAN</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token constant">MAN</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token constant">OTHER</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">,</span>    age<span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    grand<span class="token operator">:</span> Gender<span class="token punctuation">.</span><span class="token constant">MAN</span><span class="token punctuation">}</span><span class="token comment">// 传递的第一个参数是任意类型，但是第二个参数必须要是第一个参数的属性中的 任意一个 key</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">prop</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">prop</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span> <span class="token string">"length"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220603154356559.png" alt="keyof"></p><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><ul><li>声明方法跟函数类似名称后面定义&lt;类型&gt;</li><li>使用的时候确定类型new Sub&lt;类型&gt;()</li></ul><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">class</span> <span class="token class-name">Clazz<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>    str<span class="token operator">:</span> <span class="token constant">S</span>    num<span class="token operator">:</span> <span class="token constant">N</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter">str<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">,</span> num<span class="token operator">:</span> <span class="token constant">N</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num    <span class="token punctuation">}</span>    <span class="token function">arr</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token operator">|</span> <span class="token constant">N</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token function">getStr</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token constant">S</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">S</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a    <span class="token punctuation">}</span>    <span class="token function">getNum</span><span class="token punctuation">(</span>b<span class="token operator">:</span> <span class="token constant">N</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token constant">N</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">N</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span> c<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 先约束一下类型</span><span class="token keyword">let</span> cla <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Clazz<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"string"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>cla<span class="token punctuation">.</span>str <span class="token operator">=</span> <span class="token string">"string 类型"</span>cla<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">10</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cla<span class="token punctuation">.</span><span class="token function">arr</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cla<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span><span class="token string">"参数只能传 S 类型的"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cla<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220603160451545.png" alt="image-20220603160451545"></p><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;TypeScript是&lt;a href=&quot;https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF/124767&quot;&gt;微软&lt;/a&gt;开发的一个开源的&lt;a href=&quot;https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/9845131&quot;&gt;编程语言&lt;/a&gt;，通过在&lt;a href=&quot;https://baike.baidu.com/item/JavaScript/321142&quot;&gt;JavaScript&lt;/a&gt;的基础上添加静态类型定义构建而成。TypeScript通过TypeScript&lt;a href=&quot;https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067&quot;&gt;编译器&lt;/a&gt;或Babel转译为JavaScript代码，可运行在任何&lt;a href=&quot;https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911&quot;&gt;浏览器&lt;/a&gt;，任何&lt;a href=&quot;https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192&quot;&gt;操作系统&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="TS" scheme="https://www.adalucky.com/tags/TS/"/>
    
  </entry>
  
  <entry>
    <title>CSS</title>
    <link href="https://www.adalucky.com/auto/css/"/>
    <id>https://www.adalucky.com/auto/css/</id>
    <published>2022-05-18T04:13:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>CSS3是<a href="https://baike.baidu.com/item/CSS/5457">CSS</a>（层叠样式表）技术的升级版本，于1999年开始制订，2001年5月23日W3C完成了CSS3的工作草案，主要包括盒子模型、列表模块、<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5/97857">超链接</a>方式、语言模块、背景和边框、文字特效、多栏布局等模块</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=723067572&amp;bvid=BV1mS4y1Z7Ga&amp;cid=479934507&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>css 也叫样式层叠表，是一个控制与显示 html 元素的声明式语言，从而达到控制网页的显示效果</li><li>html 和 css 就是一对组合</li><li>选择器：选择器是 用于选择 html 元素用的，即表示这个样式对 哪个 html 元素有效</li></ul><h2 id="CSS-语法结构"><a href="#CSS-语法结构" class="headerlink" title="CSS 语法结构"></a>CSS 语法结构</h2><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220512183357632.png" alt="css语法结构"></p><h2 id="CSS-样式类型"><a href="#CSS-样式类型" class="headerlink" title="CSS 样式类型"></a>CSS 样式类型</h2><ul><li>CSS 样式类型包括三种：内联样式、内部样式、外部样式</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512183636761.png" alt="CSS 样式类型"></p><h3 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h3><ul><li>内联样式(Inline Style),也叫内嵌样式</li><li>内联样式是直接写在 html 元素上的，没有选择器，直接使用 <code>style 属性</code>声明,该样式仅仅对当前的元素有效</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512184210816.png" alt="内联样式"></p><h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><ul><li>内部样式表(Internal Style. Sheet)</li><li>内部样式是写在 HTML 文件的 <code>&lt;head&gt;</code> 标签中的 <code>&lt;style&gt;</code> 标签中</li><li> <code>&lt;style&gt;</code> 标签中 可以有一个或者多个样式规则</li><li><code>&lt;style&gt;</code> 标签中 的样式只对当前页面有效</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512184402006.png" alt="内部样式"></p><h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><ul><li>外部样式表(External Style. Sheet)</li><li>外部样式通过 <code>link</code> 标签下的 <code>href</code> 属性指定外部样式文件的路径，这样就可以引入外部样式表了</li><li>引入的外部样式也仅仅是对当前页面有效</li><li>外部样式可以被多个文件引用</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512185017060.png" alt="外部样式"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="内联样式示例"><a href="#内联样式示例" class="headerlink" title="内联样式示例"></a>内联样式示例</h3><ul><li>因为内联样式是直接写到元素上的，因此只对当前元素有效</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512222207739.png" alt="内联样式示例"></p><h3 id="内部样式示例"><a href="#内部样式示例" class="headerlink" title="内部样式示例"></a>内部样式示例</h3><ul><li>内部样式是写在 HTML 文件的 <code>&lt;head&gt;</code> 标签中的 <code>&lt;style&gt;</code> 标签中</li><li>内部样式需要选择器选择某个标签对其生效</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512222302425.png" alt="内部样式示例"></p><h3 id="外部样式示例"><a href="#外部样式示例" class="headerlink" title="外部样式示例"></a>外部样式示例</h3><ul><li>创建外部样式表</li><li>通过 link 引入外部样式表</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512224004034.png" alt="外部样式示例"></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>选择器：选择器 Selector 是用于选择 html 元素用的，即表示这个样式对 哪个 html 元素有效</li><li>常见的选择器有：<code>类型选择器</code> <code>样式选择器</code> <code>id选择器</code> <code>属性选择器</code></li></ul><h3 id="类型选择器"><a href="#类型选择器" class="headerlink" title="类型选择器"></a>类型选择器</h3><ul><li>类型选择器直接写 HTML 标签的名称</li><li>类型选择器的作用是 <code>选择页面上所有该类型的元素 </code></li><li>如下所示 h1 h2 就是类型选择器，会对该页面所有的 h1 h2 标签的元素生效</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h2</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220512230207227.png" alt="类型选择器"></p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><ul><li>类选择器通过  <code>.className{}</code> 进行定义 CSS 规则后，在元素中通过 class 属性指定类名</li><li>如下所示的 <strong>p标签</strong></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512230041364.png" alt="类选择器"></p><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h3><ul><li>id选择器以 # 号开头加上样式名称例如 <code>#otherText{}</code></li><li>在元素上通过 id 属性指定 样式名称进行选择</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512230705930.png" alt="id选择器"></p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><ul><li>属性选择器在实际中并不是很常用</li><li>它的规则就是元素中包含了某个属性时</li><li>语法：标签名[属性名]，例如 <strong>a[title] a标签有 title 属性的元素</strong> <strong>a[title="baidu"] a标签且 title 属性等于 baidu 的元素</strong>  **a[title=""] a标签且 title 属性为空的元素 **</li><li><code>属性值是区分大小写的</code> 例如在元素中叫做 <strong>Welcome</strong> 那么我们 CSS 规则中的属性值匹配也需要用大写</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512232500107.png" alt="属性选择器"></p><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><ul><li>通用选择器是对所有元素进行选择，也就我么的 <code>*{}</code> 一般用来设置全局的样式、字体等</li><li>如下所示进行了一个全局 Mac 系统下的全局的字体设置</li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Pingfang SC"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220512232839316.png" alt="通用选择器"></p><h2 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h2><ul><li>组合选择器，指的是进行多个条件的组合定位到某一元素例如 <code>h1.text{}</code> 表示 <strong>h1 标签下并且 class=”text” 的元素</strong></li></ul><h3 id="类型选择器-类选择器"><a href="#类型选择器-类选择器" class="headerlink" title="类型选择器+类选择器"></a>类型选择器+类选择器</h3><ul><li>例如 <code>h1.text{}</code> 表示 <strong>h1 标签下并且 class=”text” 的元素</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">h1.text{    color: red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220512233556947.png" alt="类型选择器+类选择器示例一"></p><ul><li>例如<code>h1.text, h1.other {color: red;}</code> 表示 <strong>h1 标签下 class="text"或者 class="other" 的元素</strong></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1.text, h1.other</span> <span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220512234221473.png" alt="类型选择器+类选择器示例二"></p><h3 id="多个类型选择器"><a href="#多个类型选择器" class="headerlink" title="多个类型选择器"></a>多个类型选择器</h3><ul><li>例如 <code>h1,p{color: green;}</code> <strong>选择所有的 h1 和 p 标签</strong></li><li>下面的截图示例中 <strong>h1.text</strong> 它也是一个 <strong>h1标签</strong> 但是颜色没有和其它的一样，这个要涉及到优先级，后面章节会介绍 </li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1,p</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220512234732127.png" alt="多个类型选择器示例"></p><h3 id="父子选择器"><a href="#父子选择器" class="headerlink" title="父子选择器"></a>父子选择器</h3><ul><li>父子选择器两个元素之间用空格隔开表示下一级</li><li>例如<code>div h1,p a{color:red;}</code> 表示选择 <strong>div标签下的 h1 标签元素，和 P 标签下的 a标签元素</strong></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">div h1,p a</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220512235720202.png" alt="父子选择器示例"></p><h2 id="CSS-优先级"><a href="#CSS-优先级" class="headerlink" title="CSS 优先级"></a>CSS 优先级</h2><h3 id="相同规则先后顺序"><a href="#相同规则先后顺序" class="headerlink" title="相同规则先后顺序"></a>相同规则先后顺序</h3><ul><li>相同的规则按照加载顺序，写在后面的优先级更高</li><li>如图所示，对 h1 标签定义了两个相同的规则，写在后面的会覆盖掉前面的，因此顺序在后面的优先级更高</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220513121925998.png" alt="相同规则示例"></p><h3 id="内部样式与比外部样式"><a href="#内部样式与比外部样式" class="headerlink" title="内部样式与比外部样式"></a>内部样式与比外部样式</h3><ul><li>在一个 html 文件中 通过 link 引入了外部样式，并且在 style 中也定义了相同规则的内部样式，先后顺序由所在的 link 标签和 style 标签顺序决定，同样是后面的优先级更高</li><li>如下图所示：style 标签位于 link 标签下方因此 style 标签中定义的类型选择器 h1 会覆盖掉外部样式中定义的 h1 标签的样式</li><li>总结：内部样式和外部样式没有优先级，还是通过加载顺序控制</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220513122735954.png" alt="内部样式对比外部样式示例"></p><h3 id="继承样式与指定样式"><a href="#继承样式与指定样式" class="headerlink" title="继承样式与指定样式"></a>继承样式与指定样式</h3><ul><li>继承下来的样式优先级永远低于直接指定的样式</li><li>当我们的 html 中有一个全局的样式配置后，又对其中具体的某个标签进行指定，那么指定的样式优先级高于继承与全局样式的优先级</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220513124405833.png" alt="继承样式与指定样式"></p><h3 id="内联样式与-important"><a href="#内联样式与-important" class="headerlink" title="内联样式与!important"></a>内联样式与!important</h3><ul><li>内联样式优先级最高, !important 是个意外</li><li>在元素中通过内联样式指定的优先级是最高的，但是如果外部样式或者内部样式 用了!important 声明，那么就会把这个指的 !important 当成一个例外</li><li>如下图所示，内联样式虽然优先级最近，但是 !important 是个意外</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220513130428306.png" alt="内联样式与!important"></p><h3 id="选择器之间的优先级"><a href="#选择器之间的优先级" class="headerlink" title="选择器之间的优先级"></a>选择器之间的优先级</h3><ul><li>ID选择器 (ID Selector) &gt; 类选择器 (Class Selector) &gt; 类型选择器 (Type Selector) </li><li>与先后顺序无关</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514123630873.png" alt="选择器之间的优先级"></p><h3 id="优先级总结"><a href="#优先级总结" class="headerlink" title="优先级总结"></a>优先级总结</h3><ul><li>相同的规则按照加载顺序,写在后面的优先级更高</li><li>内部样式和外部样式没有优先级,还是通过加载顺序控制,写在后面的优先级更高</li><li>继承下来的样式优先级永远低于直接指定的样式</li><li>内联样式优先级最高, !important 是个意外</li><li>ID选择器 (ID Selector) &gt; 类选择器 (Class Selector) &gt; 类型选择器 (Type Selector) </li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220513120953234.png" alt="优先级总结"></p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><img src="http://blog.adalucky.com/notes/ada/image-20220514132930182.png" alt="Box"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220514132717461.png" alt="Box示例"></p><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;CSS3是&lt;a href=&quot;https://baike.baidu.com/item/CSS/5457&quot;&gt;CSS&lt;/a&gt;（层叠样式表）技术的升级版本，于1999年开始制订，2001年5月23日W3C完成了CSS3的工作草案，主要包括盒子模型、列表模块、&lt;a href=&quot;https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5/97857&quot;&gt;超链接&lt;/a&gt;方式、语言模块、背景和边框、文字特效、多栏布局等模块&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="css" scheme="https://www.adalucky.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="https://www.adalucky.com/auto/html/"/>
    <id>https://www.adalucky.com/auto/html/</id>
    <published>2022-05-12T04:13:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>HTML5是构建Web内容的一种语言描述方式。HTML5是互联网的下一代标准，是构建以及呈现互联网内容的一种语言方式．被认为是互联网的核心技术之一。HTML产生于1990年，1997年HTML4成为互联网标准，并广泛应用于互联网应用的开发。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=892926447&amp;bvid=BV1gP4y1E75S&amp;cid=476313508&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=683947883&amp;bvid=BV1oU4y1278g&amp;cid=716441550&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="初识HTML"><a href="#初识HTML" class="headerlink" title="初识HTML"></a>初识HTML</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>什么是HTML? –&gt; HTML是Hyper Text Markup Language的缩写,中文：超文本标记语言</li><li>HTML并不是一门编程语言   编程语言的关键是逻辑，例如有条件选择  if  else</li><li>HTML是用来构建网页元素的标记语言  文本段落、表格、图片</li><li>目前看到的所有网站，都是由 html 元素构成</li><li>编程语言例如们 javaScript 用来写页面逻辑、调用接口、操作&amp;连接数据库等</li><li>在做 WEB 开发时，HTML是最基础和最必须要了解的 只使用HTML就可以构建简单网页</li><li>HTML+CSS+JavaScript:组成了WEB开发的基石<ul><li>把整个人当做成一个WEB</li><li>HTML: 就是由各种元素组成的人的身体  body  手、脚、眼睛、耳朵 各种不同的标签</li><li>CSS: 决定人身体的外观和布局，眼睛张在哪里，单眼皮还是双眼，多高多重，还可以给人元素加上各种各样的样式美化，就像人一样穿上好看的衣服和化着美美的妆</li><li>JavaScript:决定行为、动作、让人动起来，不然再好看的 HTML+CSS 也是静态的死的</li></ul></li></ul><h2 id="开发环境准备"><a href="#开发环境准备" class="headerlink" title="开发环境准备"></a>开发环境准备</h2><ul><li>html 的开发只需要一个 文本编辑器或 IDE 工具（用于写代码）外加一个浏览器用来查看效果</li><li>浏览器一般用 chrome ,文本编辑器看自己习惯吧，比如 sublime Text  vsCode 或者其它的 IDE 工具</li><li>HTML 的好处是我们不需要使用其他的环境和服务，只需要创建一个以 <strong>.html</strong> 为后缀的文件，然后使用浏览器打开就可以了</li><li>首页 HTML 文件一般是 index.html ，如果你部署了一个 <a href="http://www.xxx.com/">www.xxx.com</a> 根域名默认显示 index.html 中的内容，当然也是可以自行配置的</li></ul><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li><code>&lt;!DOCTYPE html&gt; </code> 文档声明告诉浏览器我是一个 html 文件</li><li><code>&lt;html&gt;&lt;/html&gt; </code> 该标签是 HTML 根元素</li><li><code>&lt;head&gt;&lt;/head&gt;</code> HTML 头一般放入原数据，或者是搜索引擎的 <code>keyword</code> <code>title</code> <code>脚本</code> <code>css文件链接</code>   <code> meta</code>标签是一个辅助性的标签</li><li><code>&lt;body&gt;&lt;/body&gt;</code> HTML body 体内放入 HTML 元素，我们页面上的内容也就是 body 体内的内容了</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220512163849240.png" alt="html文件结构"></p><h2 id="HTML元素（Element）"><a href="#HTML元素（Element）" class="headerlink" title="HTML元素（Element）"></a>HTML元素（Element）</h2><ul><li>Element  元素的结构由  开始标签+内容+结束标签 组成，一个完整的元素都是由开始标签和结束标签成对出现，结束标签多了一个斜杠 </li><li>在 HTML5 中 没有内容时就可以使用自闭标签 比如 <code>&lt;tagname/&gt;</code> 或者 <code>&lt;tagname&gt;</code>（HTML5 中支持这种自闭合的写法）</li><li>默认的自闭合标签 <code>&lt;br&gt;  &lt;hr&gt;  &lt;input&gt; ...</code></li><li>HTML 标签还有属性，属性的规则为 <code>属性名="属性值"</code></li><li>HTML 元素分为<code>块状元素</code> 和 <code>行内元素</code> 块状元素的宽度是 100% 独占一行 行内元素不会独占一行（最简单的方法就是加个 &lt;br&gt; 标签换行）</li><li>更多元素和属性查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element">mozilla</a></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220512165150400.png" alt="Element元素"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li><code>H1</code> <code>H2</code> 是块状元素独占一行</li><li>行内元素最简单的方式通过 <code>br</code> 标签换行</li><li><code>img</code> 标签可以设置宽度和 alt 属性 img 标签也是行内元素 src 设置图片路径可以是本地文件(./ 表示当前路径)，也可以是 http 路径</li><li><code>a</code> 标签是超链接标签 也是一个行内元素 加上 target 属性 <code>view_window</code> 或者 <code>_blank</code> 在新窗口打开超链接</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--suppress HtmlUnknownTarget --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是一个 H1 标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>这是一个 H2 标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./00.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>当图片不存在时显示这里的内容<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./image-20220512165150400.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>当图片不存在时显示这里的内容<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.adalucky.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view_window<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>个人博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.adalucky.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>个人博客<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220512172545547.png" alt="基础演示"></p><h1 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h1><ul><li>title 属性，鼠标移动到标签上，会显示 title 的属性值，类似于 hover 做一些说明，title属性不占据页面内容，当鼠标滑动停留时显示</li><li>aling="center" 水平居中 ，比如标题标签居中显示</li><li>img 下的 alt 属性，图片加载失败或者破图可以作为一个提示让用户也知道这是一张表达什么作用内容的图片，alt 会占据内容，只有当图片加载不了才会显示</li></ul><h1 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h1><ul><li>a 标签下的 target 属性可决定超链接在当前窗口还是新窗口打开，不定义<code>默认是当前窗口 </code>  <strong>target="_self" 当前页面</strong> <strong>target="_blank" 新窗口</strong> </li><li>锚点又叫做命名标记，就像一个迅速定位器，比如手机通讯录或者微信右侧的字母，可以通过首字母快速定位到某一姓名首字母相同的人，可以实现在页面内进行跳转，目的地标签上加上 id 属性，然后再 a 标签的 href属性通过 #id的属性名进行绑定，例如 <code>&lt;a href="#P2"&gt;CSS&lt;/a&gt;</code></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514151200210.png" alt="锚点"></p><h1 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h1><ul><li>文本通过通过 <code>&lt;b&gt;需要加粗的文本&lt;/b&gt;</code> <code>&lt;strong&gt;需要加粗且重要的文本&lt;/strong&gt;</code> 这两者进行文本加粗，区别在于 b 标签只是加粗，strong 标签语义化更强，表示该文本比较重要，提醒阅读者注意，盲人朋友使用阅读设备时会加重该标签内的读音</li><li>文本倾斜通过 i（italic 斜体的） 或者 em (emphasize 强调) 标签来实现，<code>&lt;i&gt;待修饰倾斜的文本&lt;/i&gt;</code> <code>&lt;em&gt;待修饰倾斜的文本&lt;/em&gt;</code>,i标签仅仅为了让字体显示倾斜，没有强调的语义，em标签不仅能让字体显示倾斜，还可以加强语气，还可以让百度等搜素引擎爬取我们的页面时特别收录 em 中的文本,以便于别人从百度中搜索 em 中的关键字时，让我们的页面优先曝光 </li><li>删除线可用 s(strike 取消 删除) 或者 del(delete 删除 划掉) 如 <strong><del>删除线</del></strong> <code>&lt;s&gt;删除线文本&lt;/s&gt;</code> <code>&lt;del&gt;删除线文本&lt;/del&gt;</code> <strong>html5 已经不支持 s 标签了，所以用 del 吧</strong></li><li>文本添加下划线通过 u（underline 下划线）标签实现,例如 <strong><u>待修饰下划线的文本</u></strong> <code>&lt;u&gt;待修饰下划线的文本&lt;/u&gt;</code> </li><li>角标分为 sup(superscript 上角标) sub(subscript 下角标) 示例：<strong>41<sup>o</sup>C H<sub>2</sub>O<sub>15</sub></strong></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514160605735.png" alt="文本标签"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220514163444099.png" alt="嵌套示例"></p><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>列表分为三类：有序、无序、自定义</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514163923921.png" alt="列表"></p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ul><li>有序列表由两个元素组成 <strong>ol（order list 有序列表）</strong>和 <strong>li（list item 列表）</strong> 二者是父子关系</li><li>遵循 W3C 的规范,ol 标签下只能嵌套 li 标签,<strong>如果要嵌套其它标签，也只能放在 li 标签里面</strong> </li><li>列表前面的序号被称为项目符号,有序列表的序号默认从自然数 1 开始</li><li>W3C 为了兼顾多语种的需求,规定了项目符号是可以通过 <strong>type属性</strong> 设置,type 的取值范围【A,a,I,i,1】分别表示大小写字母顺序,大小写罗马数字顺序，阿拉伯数字顺序</li><li>有序列表不光能更换项目符号，还能更换起始序号可以通过 <strong>start属性</strong> 设置 </li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514172113277.png" alt="有序列表示例"></p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>无序列表：指列表中的内容是没有时间、空间或者逻辑等顺序要求的 </li><li>如下方图片所示，每个人对事情的处理先后顺序标准都不一样，对于这种无顺序的内容就可以用无序列表来展示了</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514172923060.png" alt="无序列表"></p><hr><ul><li>有序列表由两个元素组成 <strong>ul（unorder list 无序列表）</strong>和 <strong>li（list item 列表）</strong> 二者是父子关系</li><li>和有序列表一样 ul 标签下只能嵌套 li 标签,<strong>如果要嵌套其它标签，也只能放在 li 标签里面</strong></li><li>无序列表的默认项目符号是一个实心的圆点例如这样 –&gt; ● 但是我们也可以通过 <strong>type属性</strong> 设置,type 的取值范围【disc,circle,square,none】分别表示【实心圆,空心圆,隐藏项目符号,实心方块】</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514174337869.png" alt="无序列表的 type 属性"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220514174920455.png" alt="无序列表示例"></p><h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><ul><li>自定义列表一般在网页的底部用的比较多，比如下图中的【帮助中学、服务支持等】</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514220613559.png" alt="自定义列表案例"></p><hr><ul><li>自定义列表由三个标签组成 <strong>dl dt dd</strong> 分别表示定义列表、定义术语（列表标题）、定义描述（列表内容）</li><li>注意：<code>dt 和 dd 是 dl 的子标签</code> <code>dt 和 dd 是兄弟标签</code> <code>dd 和 dt 不能脱离 dl 单独使用</code></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514221011334.png" alt="自定义列表组成结构"></p><hr><ul><li>以下是一个简单的自定义列表的示例，如果要达到上面 little mi 的那种效果，后期可通过学习 css 进行完善</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220514222534608.png" alt="自定义列表示例"></p><h2 id="列表综合案例"><a href="#列表综合案例" class="headerlink" title="列表综合案例"></a>列表综合案例</h2><ul><li><code>&amp;emsp;</code> 表示中文位置大小的空格  <code>&amp;nbsp;</code> 表示一个空格大小</li><li>img 标签中直接添加 align="center" 属性并不能居中,因此 img 需要放在 p 标签中</li><li>自定义列表中的标题 dl 中不光是只用来放文本,也可以放图片,根据实际需求而定</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>综合案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>综合案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token entity named-entity" title=" ">&amp;emsp;</span><span class="token entity named-entity" title=" ">&amp;emsp;</span>万里长城，龙脉绵延，是中华民族的骄傲，无论是“望长城内外惟余莽莽”的诗句，还是“万里长城永不倒”的歌谣，或是“巨龙横卧轮廓巍峨”的诗歌，无不展现着长城在中国人心中的分量。其实长城也是画家笔下永久的绘画题材，中国画中的国画长城有着很深的内在含义和许多美好的寓意，所以中国人喜欢画长城景色而后挂于厅堂，不但求吉祈福，还承载着中华悠悠历史和美好希冀以及勇敢无畏的中华魂。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token entity named-entity" title=" ">&amp;emsp;</span><span class="token entity named-entity" title=" ">&amp;emsp;</span>那么长城景色真的好入画吗?的确，若不是有实力的画家，真的无法将长城的雄风恢弘绘就而出。而当代山水画家王宁恰恰就做到了这一点，他用拙朴的笔法，表现出长城的沧桑与中华民族屹立东方的精神气质。他的国画长城作品粗放又不失秀逸，长城的雄风、恢弘大气之感油然而出。        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./img.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>万里山河图片<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>费曼学习法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>将所学内容,迅速记录到一张纸上<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>练习教授别人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查漏补缺,找到不足之处<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>优化及完善<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>小段子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>square<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>北冥有鱼,其名为鲲<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>鲲之大,一锅炖不下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>化而为鸟,其名为鹏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>鹏之大,需要两个烧烤架<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>一个秘制,一个麻辣<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>来瓶雪花,带你勇闯天涯<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>图文混排<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>df</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./img_1.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>我和我的祖国海报<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>400px<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>电影名称: 《我和我的祖国》<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>主演: 黄渤,张译,葛优等<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>导演: 陈凯歌,张一白,徐峥等<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">&gt;</span></span>类型: 剧情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>df</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><ul><li>在实际的工作中表格被大量广泛的使用,作为列表数据的展示</li><li>表格中中的元素分为: 行,列,单元格</li><li>表格用 <code>table</code> 标签定义,<code>tr</code> 和 <code>td</code> 标签分别表示行和列</li><li>一个普通的表格每个 tr 中的 td 个数是一致的</li></ul><h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><ul><li>创建一个 4 行(tr) 5列(td)的表格,描述王者荣耀的英雄信息</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220515123901931.png" alt="table初体验"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>example for table<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>王者英雄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>王者性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>所属位置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>王昭君<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>中路<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击查看详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>亚瑟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>中抗路<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击查看详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>虞姬<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>发育路<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>点击查看详情<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="表头加粗"><a href="#表头加粗" class="headerlink" title="表头加粗"></a>表头加粗</h2><ul><li>在一般的使用中我们可能会希望给表头的文本进行一些加粗显示,上面的粗体验采用额通过 <strong>b标签</strong> 来实现,在 table 中有一个专门用来定义表头的 th 标签</li><li>th(table header cell 表头单元格),该标签下的文本会<code>加粗并且居中</code>显示</li><li>和上面相比我们把 <code>&lt;td&gt;&lt;b&gt;序号&lt;/b&gt;&lt;/td&gt;</code> 换成了 <code>&lt;th&gt;序号&lt;/th&gt;</code> 同样实现了<strong>加粗效果并且居中显示</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">&lt;tr&gt;    &lt;th&gt;序号&lt;/th&gt;    &lt;th&gt;王者英雄&lt;/th&gt;    &lt;th&gt;王者性别&lt;/th&gt;    &lt;th&gt;所属位置&lt;/th&gt;    &lt;th&gt;详情&lt;/th&gt;&lt;/tr&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220515124055811.png" alt="th表头加粗"></p><h2 id="表格边框"><a href="#表格边框" class="headerlink" title="表格边框"></a>表格边框</h2><ul><li>上面的图片并没有边框线给每个单元格进行划分开,可以再 <strong>table 上添加 border 属性</strong> 进行指定边框大小</li><li>示例: <code>&lt;table border="1"&gt;</code> (目前这种方式表格边框的线是双边框线.下方的单元格间距将会描述)</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220515124635739.png" alt="表格边框"></p><h2 id="表格宽高"><a href="#表格宽高" class="headerlink" title="表格宽高"></a>表格宽高</h2><ul><li>通过 width 和 height 控制表格总体的宽高</li><li>示例: <code>&lt;table width="500px" height="150px"&gt;&lt;/table&gt;</code></li><li>不难发现,它视乎会根据我们单元格内文本的宽度去分配列宽</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220515125406257.png" alt="表格宽高"></p><h2 id="单元格间距cellspacing"><a href="#单元格间距cellspacing" class="headerlink" title="单元格间距cellspacing"></a>单元格间距cellspacing</h2><ul><li>上面的表格边框章节我们可以看到单元格与单元格之间的线是两条线,究其缘由是因为单元格与单元格之间的间隙过大导致生成的</li><li>我们只需要通过 <code>cellspacing</code> 属性进行控制即可</li><li>示例: <code>&lt;table cellspacing="0"&gt;&lt;/table&gt;</code> 如果需要让单元格间距变大,<strong>增加 cellspacing 属性值即可</strong></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220515131508503.png" alt="cellspacing单元格间距"></p><h2 id="单元格文本间距cellpadding"><a href="#单元格文本间距cellpadding" class="headerlink" title="单元格文本间距cellpadding"></a>单元格文本间距cellpadding</h2><ul><li>cellpadding 可控制单元格与文本之间的距离,假设我们想要文本居左靠齐 我们只需要通过 <code>cellpadding</code> 属性进行控制即可</li><li>示例: <code>&lt;table cellpadding="0"&gt;&lt;/table&gt;</code></li><li>如果需要让文本与单元格间距变大,<strong>增加 cellpadding 属性值即可</strong></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220515131757600.png" alt="cellpadding单元格文本间距"></p><h2 id="表格页面布局"><a href="#表格页面布局" class="headerlink" title="表格页面布局"></a>表格页面布局</h2><ul><li>这里指的是表格再页面上整体的位置，并不是指的单元格里面文本的对其方式</li><li>可以通过 <code>align</code> 属性控制,取值范围有【left、center、right】</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220515132237213.png" alt="页面布局"></p><h2 id="表格和边框颜色"><a href="#表格和边框颜色" class="headerlink" title="表格和边框颜色"></a>表格和边框颜色</h2><ul><li>就像 Excel 中我们可以给单元格设置背景色填充，或者边框线的颜色</li><li>table 标签中通过 <strong>bgcolor bordercolor</strong> 两个属性实现单元格和框线的颜色填充</li><li>示例: <code>&lt;table bgcolor="yellow" bordercolor="red"&gt;&lt;/table&gt;</code> （表格黄色背景，红色边框）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220515133234274.png" alt="image-20220515133234274"></p><h2 id="单元行-tr-属性"><a href="#单元行-tr-属性" class="headerlink" title="单元行 tr 属性"></a>单元行 tr 属性</h2><ul><li>height(单元行高度)、bgcolor(单元行背景颜色)、align(水平对其方式)、valign(垂直对其方式)</li><li>设置单元行的高度: height 属性设置当前行的高度,如果 table 设置了高度,我们给其中一个单元行设置了固定高度后，剩下的单元行会平分剩余高度</li><li>例如: 当前一个 4 行高的表格总体高度 300px 给第一行设置高度 150px,那么剩余 3 行平均每行 50px</li><li>设置单元行背景颜色遵循就近原则</li><li>可以给单元行设置文本对其方式,默认为水平居左，垂直居中</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220515140926643.png" alt="align和valign属性"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220515141445422.png" alt="单元行 tr 示例"></p><h2 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h2><ul><li>设置某一单元格的列宽(width),会影响所在列的列宽</li><li>设置某一单元格的行高(height),会影响所在行的行高</li><li>设置某一单元格的背景色(bgcolor),不会影响其它单元格</li><li>和单元行一样也可通过 align(水平对其方式)、valign(垂直对其方式) 两个属性设置当前所在的单元格的文本对其方式，默认水平居左，垂直居中</li></ul><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><ul><li>单元格的合并，脑海中回想一下 Excel 的合并，单元格和其一样，分为水平合并(横向合并)、垂直合并(纵向合并)</li><li>水平合并产生跨列从哪一列合并到哪一列，垂直合并产生跨行从哪一行合并到哪一行</li><li>单元格的垂直合并，就是列合并,需要从起始列的下一列开始,减少列数一直到终止列，然后在起始类通过 rowspan 跨行指定合并的个数</li><li>跨列合并也是一样，删除需要合并的单元格，然后在起始的单元格通过 colspan(column span)  跨列指定合并的个数</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">&gt;</span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>head<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>title<span class="token operator">&gt;</span>example to cell merger<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>table border<span class="token operator">=</span><span class="token string">"1"</span> cellspacing<span class="token operator">=</span><span class="token string">"0"</span> width<span class="token operator">=</span><span class="token string">"500"</span> height<span class="token operator">=</span><span class="token string">"500"</span><span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr bgcolor<span class="token operator">=</span><span class="token string">"deepskyblue"</span> height<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>星期一<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>星期二<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>星期三<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>星期四<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>th<span class="token operator">&gt;</span>星期五<span class="token operator">&lt;</span><span class="token operator">/</span>th<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr bgcolor<span class="token operator">=</span><span class="token string">"skyblue"</span> height<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span>早自习<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td bgcolor<span class="token operator">=</span><span class="token string">"skyblue"</span> rowspan<span class="token operator">=</span><span class="token string">"4"</span><span class="token operator">&gt;</span>上午<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr bgcolor<span class="token operator">=</span><span class="token string">"skyblue"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr bgcolor<span class="token operator">=</span><span class="token string">"skyblue"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td bgcolor<span class="token operator">=</span><span class="token string">"skyblue"</span> rowspan<span class="token operator">=</span><span class="token string">"4"</span><span class="token operator">&gt;</span>下午<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr bgcolor<span class="token operator">=</span><span class="token string">"skyblue"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr bgcolor<span class="token operator">=</span><span class="token string">"skyblue"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>tr height<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td bgcolor<span class="token operator">=</span><span class="token string">"skyblue"</span><span class="token operator">&gt;</span>晚自习<span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>                <span class="token operator">&lt;</span>td colspan<span class="token operator">=</span><span class="token string">"5"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>td<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span><span class="token operator">/</span>tr<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>table<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220515180352027.png" alt="垂直合并"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220515180933653.png" alt="水平合并"></p><h2 id="表格分组"><a href="#表格分组" class="headerlink" title="表格分组"></a>表格分组</h2><ul><li>caption标题标签、thead表头(table head )、tbody表体(table body)、tfoot表尾(table foot)  这些都是属于行分组</li><li>colgroup 列分组标签,和 caption 同级语法示例: <code>&lt;colgroup span="1" bgcolor="skyblue"&gt;&lt;/colgroup&gt;</code> 一般用于设置某一列的颜色或者字体等样式,这里的 1 表示第一列,如果要进行第二列分组的话就再创建一个 colgroup 标签 span 的值还是 1,表示第二列分组也只有一列，如果第二列分组有 6 列 那么 span 的值就是 6</li><li>表格中如果没有使用分组标签,浏览器在渲染时默认会把 tr 放在 tbody,为了使语义化更强，我们可以根据实际情况手动进行分组添加对应的分组标签</li><li>W3C 的标准约定,一个 table 下只允许使用一个 thead 和一个 tfoot ,允许使用多个 tbody</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">bordercolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#ffffff<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span>阿里职级薪资<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>colgroup</span> <span class="token attr-name">span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>skyblue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>colgroup</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>colgroup</span> <span class="token attr-name">span</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>orange<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>colgroup</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>deepskyblue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">rowspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>序号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>技术岗与管理岗职级薪资<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>P序列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>P级名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>M序列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>M级名称<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>薪资<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>股票<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>P6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>资深工程师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>M1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>主管<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>20W-35W<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>几乎不授予<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>P7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>技术专家<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>M2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>经理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>30W-50W<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>2400股<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>P8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>高级专家<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>M3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>高级经理<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>45W-80W<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>6400股<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>P9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>资深专家<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>M4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>总监<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>80W-100W<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>16000股<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>P10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>研究员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>M5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>高级总监<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>150W<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">&gt;</span></span>+<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>20000股<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#D7E1C5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#B0CC7F<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>说明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">colspan</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>P-Profession M-Manage,马云在阿里的级别是M10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220515231943994.png" alt="表格分组"></p><h1 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><ul><li>Emmet 并不是什么 html 中的知识，而是一种提高开发效率的 <strong>语法</strong>,其语法简单，使用方便，能提高我们编写 html 代码的速度</li><li>VS Code 内置了 Emmet 的语法,开箱即用,（我用的 IDEA ）</li></ul><h2 id="快速创建一个空标签"><a href="#快速创建一个空标签" class="headerlink" title="快速创建一个空标签"></a>快速创建一个空标签</h2><ul><li>快速创建一个标签至需要输入标签名然后按 Tab 键即可 </li><li>语法: <code>h1 + Tab键</code>,即可生成 <code>&lt;h1&gt;&lt;/h1&gt;</code></li></ul><h2 id="创建一个带-Content-的标签"><a href="#创建一个带-Content-的标签" class="headerlink" title="创建一个带 Content 的标签"></a>创建一个带 Content 的标签</h2><ul><li>快速创建一个带有内容的标签,比如 h1创建时直接把内容带上</li><li>语法: <code>h1{这是一个 H1 标题} + Tab 键</code>,即可生成 <code>&lt;h1&gt;这是一个 H1 标题&lt;/h1&gt;</code></li></ul><h2 id="创建多个带-Content-的标签"><a href="#创建多个带-Content-的标签" class="headerlink" title="创建多个带 Content 的标签"></a>创建多个带 Content 的标签</h2><ul><li>如上所示我们已经能快速创建一个带内容的 h1 标签了,那如果我们要创建 5 个 10个内</li><li>语法: <code>h1{标签内容}*标签重复次数 + Tab 键</code> 例如 <code>h1{标签内容}*3 + Tab 键</code> 即可生成如下代码</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>标签内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>标签内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>标签内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建-h1到h6-标签"><a href="#创建-h1到h6-标签" class="headerlink" title="创建 h1到h6 标签"></a>创建 h1到h6 标签</h2><ul><li>需求: 快速创建一个 h1到h6 6个标签,每个标签中的文本带有当前序号</li><li>语法: <code>h${这是一个$级标签}*6 + Tab 键</code>,即可生成下方代码</li><li>说明: 这里的 <code>$</code> 符号实现一次递增的序号</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是一个1级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>这是一个2级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>这是一个3级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>这是一个4级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>这是一个5级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>这是一个6级标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="嵌套标签"><a href="#嵌套标签" class="headerlink" title="嵌套标签"></a>嵌套标签</h2><ul><li>需求: 快速创建一个 ul 其中有 5 个 li 标签</li><li>语法: <code>父标签名&gt;子标签名{子标签内容}*子标签重复次数 + Tab 键</code>,例如 <code>ul&gt;li{这是第$个无序列表}*5</code> 即可生成下方代码</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>这是第1个无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>这是第2个无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>这是第3个无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>这是第4个无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>这是第5个无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重复嵌套"><a href="#重复嵌套" class="headerlink" title="重复嵌套"></a>重复嵌套</h2><ul><li>上面是生成了一个 ul 标签,里面有 5 个 li 标签,如果想生成 2 个 ul 标签,每个 ul 中含有 3 个 li</li><li>语法: <code>父级标签*父级标签重复次数&gt;子级标签{子级标签内容}*子级标签重复次数 + Tab 键</code>,例如 <code>ul*2&gt;li{这是第$个无序列表}*2</code> 即可生成下方代码</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>这是第1个无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>这是第2个无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>这是第1个无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>这是第2个无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="带属性的标签"><a href="#带属性的标签" class="headerlink" title="带属性的标签"></a>带属性的标签</h2><ul><li>需求: 快速创建一个 h1 标签，通过属性让其居中</li><li>语法: <code>标签名[属性名="属性值"] + Tab 键</code>,例如 <code>h1[align="center"]{综合案例} + Tab 键</code> 即可生成下方代码</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>综合案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>生成兄弟元素:p+div  </li><li>生成多个兄弟元素: <code>(a[target="iframeExample"]+b)*3</code>  生成 3 组 a b 标签 </li><li>生成分组: <code>(a[target="iframeExample"]&gt;b)*3</code></li></ul><h1 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h1><ul><li>在网页中的颜色由三色光组成：红、绿、蓝</li><li>表示颜色的方式有三种<ul><li>颜色名称(Red、Green、Blue 等，共计 140 个标准的英文名称)</li><li>十六进制值,是指使用 #RRGGBB 的形式来定义颜色值，取值在 00-FF 之间  RR(红色强度)、GG(绿色强度)、BB(蓝色强度) <code>注意 # 号不要丢掉,字母采用小写规范</code></li><li>RGB值,使用 RGB(red,green,blue)，每个参数的取值范围都是 0-255 之间的整数,有时候可能还会看到四个参数的，第四个参数表示强度 0-1 之间的值 例如 <code>rgb(255, 255, 255, 0.1);</code></li></ul></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220517121052227.png" alt="颜色"></p><h1 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h1><ul><li>在网页中长度单位分为：绝对长度单位、相对长度单位，例如 PX  %</li><li>百分比是相对父元素的像素</li></ul><h1 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h1><ul><li>元素分为：块元素也叫块状元素(block-level 块)、行内元素也叫内联元素(inline 内联)</li><li>块级元素总是从新行开始，浏览器会自动在元素的前后添加一些上下边距，块元素独占一行</li><li>行内元素不会独占一行,而且只占据必要的宽度，注意<code>行内元素中是不能包含块元素的</code></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220517123853360.png" alt="块级元素"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220517124201146.png" alt="内联元素"></p><h1 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h1><h2 id="初识表单"><a href="#初识表单" class="headerlink" title="初识表单"></a>初识表单</h2><ul><li>页面中填写的信息就像大海里的小鱼小虾，然后用表单就像渔网一样收集起来，然后提交到服务器进行操作或存储</li><li>表单通过 form 来进行定义</li><li>表单 form 可通过 <strong>action 定义提交的接口</strong> <strong>method 定义请求方法默认是 get</strong>  示例：<code>method="POST" </code>  <code>method="GET"</code></li></ul><h2 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h2><ul><li><strong>文本输入框</strong> <code>&lt;input type="text"&gt;</code> </li><li><strong>密码输入框</strong> <code>&lt;input type="password"&gt;</code> 输入的密码会被屏蔽,用 <code>*</code> 号显示 </li><li>name 属性可以绑定输入框的参数名,例如 <code>用户名: &lt;input name="username" type="text"&gt;</code> ``</li><li>input 是个单标签，自带闭合</li><li>总结：input 输入框数据采集的方式由 type 属性决定的,如果没有定义 type 的属性值默认就是文本输入框 </li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    请输入用户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    请输入密码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h2><ul><li>多行文本框可以显示多行输入的文本 <code>&lt;textarea&gt;请输入详细地址&lt;/textarea &gt;</code></li><li>当输入的文本到达多行文本的右侧时,会自动换行</li><li>可通过属性 rows cols 设置文本框可见行、列（宽高）  </li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    居住地址:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请输入你的详情地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h2><ul><li>定义单选框: <code>&lt;input type="radio" name="gander" value="1"&gt;男 &lt;input type="radio" name="gander" value="0"&gt;女</code></li><li>单选框控件必须成组使用才有意义，每组至少需要两个单选框</li><li>组是通过 name 属性来建立的,凡是 name 值相同的就是一组,value 作为接口提交的参数值</li><li>同组的单选框只有一个会处在选中状态，其它的会自动呈现未选中状态</li><li>如果没有给单选框设置 name 属性,那么每个单选框自成一组</li><li>如果一旦选择了某一个单选框,那么就无法通过点击取消选择状态 </li><li>默认选中通过定义 checked 属性，可指定一个任意的值或者不指定</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    请选择性别:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多选框"><a href="#多选框" class="headerlink" title="多选框"></a>多选框</h2><ul><li>定义多选框: <code>&lt;input type="checkbox" checked&gt;HTML</code></li><li>默认选中通过定义 checked 属性，可指定一个任意的值或者不指定</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    请选择性别:    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>保密    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    前端基础包括    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">&gt;</span></span>HTML    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>CSS    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>JavaScript<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220517222324363.png" alt="单选多选示例"></p><h2 id="单选下拉菜单"><a href="#单选下拉菜单" class="headerlink" title="单选下拉菜单"></a>单选下拉菜单</h2><ul><li>当用户点击选择框的时候会出现一个下拉列表,用户可以从列表中选择一个选项我们称这个控件为下拉菜单</li><li>下来菜通过 <strong>select</strong> 标签定义下拉菜单, <strong>option</strong> 标签定义下拉菜单的列表</li><li>select 下只能定义 option 标签</li><li>下拉菜单中的默认展示为第一个 option 标签中的值,可以通过 selected 属性 标记为默认选中 </li></ul><h2 id="多选下拉菜单"><a href="#多选下拉菜单" class="headerlink" title="多选下拉菜单"></a>多选下拉菜单</h2><ul><li>和普通的单选下拉菜单一样通过 <code>select</code> 标签定义,设置属性 <code>multiple</code> 表示为一个多选菜单（一般需要按住 shift 进行）</li><li>额外可以设置 <code>size="number"</code> 来控制多选菜单的可视高度</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220517224647842.png" alt="下拉菜单单选多选示例"></p><h2 id="文件选择"><a href="#文件选择" class="headerlink" title="文件选择"></a>文件选择</h2><ul><li>文件选择也是通过 <strong>input</strong> 标签,只需要把 <strong>type 指定为 file 即可</strong></li><li>定于语句: <code>&lt;input type="file"&gt;</code></li><li>在不同浏览器渲染的效果不太一样,不过功能都是一样的</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220517225625665.png" alt="文件选择"></p><h2 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h2><ul><li>需求: 如上面的性别单选,我们需要点击对应的小圆点才能选中，如何实现点击文本【男、女、保密】文本也能进行选择对应的单选按钮内</li><li>在实际的工作中我们为了提升用户的体验度可能需要使用 label 标签来完成</li><li>label 标签对屏幕阅读器用户很有用，因为当用户关注输入元素时,屏幕阅读器会大声读出标签</li><li>label 标签要定义 for 属性指定元素的 id 进行关联(元素的 id 要确保唯一性)</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请输入用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>保密<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220518121808273.png" alt="label标签"></p><h2 id="默认值-amp-只读-amp-禁用"><a href="#默认值-amp-只读-amp-禁用" class="headerlink" title="默认值&amp;只读&amp;禁用"></a>默认值&amp;只读&amp;禁用</h2><ul><li>需求: 在某些情况下页面的一些输入我们需要让他作为只读，比如用户信息中的登录账号，注册后就不能去修改了，还有我们期望某些表单空间在发起请求时，忽略某个控件，可以进行禁用</li><li>只读 <code>readonly</code> 属性,一般用作文本输入框</li><li>禁用 <code>disabled</code> 属性,可作用于表单内的所有控件</li><li>input 输入框的默认值用 value 属性指定</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gender<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">&gt;</span></span>保密    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>手机号:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150****1369<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>地址:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span>请输入地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220518121858360.png" alt="默认值&amp;只读&amp;禁用"></p><h2 id="分组控件"><a href="#分组控件" class="headerlink" title="分组控件"></a>分组控件</h2><ul><li>需求: 期望表单进行分类，比如个人信息中分为 <strong>基本信息</strong> <strong>保密信息</strong> </li><li>在表单中可以用 <code>&lt;fieldset&gt;&lt;/fieldset&gt;</code> 进行定义一个带有边框和标题的分组表单控件 <strong>fieldset 字段集 –&gt; 表单控件分组</strong></li><li><strong>fieldset</strong> 中添加 <strong>legend</strong> 标签定义分组标签标题</li><li>可以直接在 body 体中定义</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>基本信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>        姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>保密信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>        电话:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220518124637225.png" alt="分组控件"></p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><ul><li>按钮的分类: <code>提交按钮</code> <code>重置按钮</code> <code>普通按钮</code> <code>图形按钮</code>  <code>双标签 button 按钮</code></li><li>提交按钮：具有点击确认提交信息同时发送表单数据给后台的功能</li><li>可通过 <code>value</code> 属性控制按钮显示的文本,例如一个登录按钮 <code>&lt;input type="submit" value="登录"&gt;</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view_window<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        用户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        密码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>普通按钮<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./img.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>300<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>150<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>button提交按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>button普通按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220518153702932.png" alt="按钮"></p><h3 id="submit"><a href="#submit" class="headerlink" title="submit"></a>submit</h3><ul><li>定义语法: <code>&lt;input type="submit"&gt;</code></li><li>观察变化: 当我们点击提交按钮后 ①页面刷新了 ②输入框的内容消失了 ③浏览器地址栏里多了一个问号</li><li>form 标签中的 action 属性定义请求的接口地址  target 属性用于在当前窗口还是新窗口打开(不定义 target 属性默认是在当前页面打开)</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>view_window<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      用户名: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      密码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h3><ul><li>重置按钮</li><li>重置 复位 擦除当前表单中的内容</li><li>定义语法 <code>&lt;input type="reset" value="重置"&gt;</code></li></ul><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><ul><li>button 是一个普通按钮，不带有任何功能，一般需要绑定事件结合使用</li><li>定义语法 <code>&lt;input type="button" value="普通按钮"&gt;</code></li></ul><h3 id="button标签"><a href="#button标签" class="headerlink" title="button标签"></a>button标签</h3><ul><li>和上面的 button，有所区别,上面是一个input输入框定义了 type 属性为 button 并且没有提交功能</li><li>button 标签 是单独的一个标签与 input 无关</li><li>定义语法: <code>&lt;button&gt;button提交&lt;/button&gt;</code> 和在 form表单中定义的 button标签默认和 sublime 按钮的功能是一致的,可以提交表单内容</li><li>如果想让 button 中的按钮只是一个普通按钮 需要定义属性 <strong>type=”button”</strong></li></ul><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><ul><li>图片按钮和 sublime 按钮的功能是一致的 展示上看起来就是用图片替换了按钮</li><li>定义语法: <code>&lt;input type="image" src="./img.png" width="300" height="150"&gt;</code></li></ul><h3 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">            <span class="token selector">body</span> <span class="token punctuation">{</span>                <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"PingFang SC"</span>            <span class="token punctuation">}</span>        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>社区疫情流调信息表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>            <span class="token entity named-entity" title=" ">&amp;emsp;</span><span class="token entity named-entity" title=" ">&amp;emsp;</span>请大家做好个人防护，如去过风险地区，请及时项社区和公司报备;如您的身体壮壮异常（出现新冠病毒典型症状，如发热，咳嗽等）请及时上报异常情况，并按照通知，前往指定医院进行核酸检测，在去的路上请戴好口罩，做好个人防护，等待检测结果，期间请勿前去人多汇集的地方<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>基本信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>1.您的姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>2.您的手机号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>137****2473<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>3.您的性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gander<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gander<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>woman<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Gander<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">&gt;</span></span>保密                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>4.家庭地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>===所属省/直辖市===<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>===市/区===<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>===县===<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>请输入详情地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>5.您现在的身体状况<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>健康 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>发热 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>干咳 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>乏力 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>呼吸困难 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>咽痛 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>胸痛 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>肌肉酸痛/关节痛 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>呕吐 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>腹泻 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>味觉异常 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>嗅觉异常 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>6.您的健康码颜色目前是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>codeColor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>绿色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>codeColor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yellow<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>黄色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>codeColor<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>红色<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>7.您是否在 14 天内有过中高风险地区旅居史，或与确诊人员有过较为密切的接触<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dangerous<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yes<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dangerous<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>否<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>8.疫苗接种情况<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>immunity<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>已接种第一针<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>immunity<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>second<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>已接种第二针<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>immunity<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>三针完成天下无敌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>保密信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>1.身份证信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>正面:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>反面:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>2.学历信息(最高)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>选择学历<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>硕士及以上<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>本科<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>大专<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>高中及一下<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>3.是否服兵役<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>soldier<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>join<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>join<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>是<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>soldier<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>notJoin<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>notJoin<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>否<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>4.个人意见<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>5<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>征集个人意见<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>上报社区<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>重置<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./img.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>89<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实用性标签"><a href="#实用性标签" class="headerlink" title="实用性标签"></a>实用性标签</h1><h2 id="hr"><a href="#hr" class="headerlink" title="hr"></a>hr</h2><ul><li>hr 标签是 horizontal rule 的简写,表示水平线,作用是在网页画一条水平分割线,可以在视觉上将文档分割成多个部分</li><li>width height 设置宽高 默认宽度横跨整个屏幕,默认高度 2px </li><li>noshade 用来去掉水平线阴影</li><li>color 用于定义水平线的颜色</li><li>align 用来调整水平线水平对齐方式(前提是要有宽度,默认是水平居中)</li><li>示例 <code>&lt;hr color="green" align="left"&gt;</code> 单标签</li></ul><h2 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h2><ul><li>pre  preformatted 预格式化的文本</li><li>pre 标签中的文本以固定宽度的字体显示,并且文本保留了空格和换行,文本将完全按照 HTML 中的源码进行显示</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>    床前明月光，    疑是地上霜。    举头望明月，    低头思故乡。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li>Map 标签用来定义图像映射(也就是给一个图片定义一个或多个热点区域,点击不同的区域实现链接的跳转)</li><li>Map 是一个双标签,有一个必须定义的属性 name <strong>Map 的 name 属性要和 img 标签的 usemap 属性相关联</strong> （就是把某一张图片当成热点地图，创建对应的关联关系）</li><li>Map 下通过子标签 area 定义热点区域的大小 位置 形状</li><li>area的属性: <code>herf</code> <strong>用来定义热点区域链接的目标地址,互联网和本地的网页图片地址都可以</strong>  <code>shape</code> <strong>用来定义区域的形状</strong> <strong>default 所有区域  rect 矩形  circle 圆形  poly 多边形</strong>  <code>coords</code> <strong>用来定义可点击区域的坐标,需要与 shape 属性配合使用</strong> </li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./img.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#celestial<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>celestial<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  shape="circle" 圆心坐标(472,100)  半径 R=50 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>472,100,50<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  shape="rect" 矩形左上角顶点 A(90,40)  矩形右下角顶点 C(137,90) --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90,40,137,90<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.adalucky.com<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--  shape="poly" 多边形 A(x1,y1 x2,y2 x3,y3 x4,y4 x5,y5)--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>poly<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>263,123,399,199,263,465<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.google.com<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220519163807498.png" alt="area的属性"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220519165315554.png" alt="定义圆形"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220519165220392.png" alt="定义矩形"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220519165644388.png" alt="多边形"></p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>锄禾日当午<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>汗滴禾下土<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>低头思故乡<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>                床前明月光，                疑是地上霜。                举头望明月，                低头思故乡。            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./img.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#celestial<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>celestial<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--  shape="circle" 圆心坐标(472,100)  半径 R=50 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>472,100,50<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--  shape="rect" 矩形左上角顶点 A(90,40)  矩形右下角顶点 C(137,90) --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>rect<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>90,40,137,90<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.adalucky.com<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--  shape="poly" 多边形 A(x1,y1 x2,y2 x3,y3 x4,y4 x5,y5)--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>poly<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>263,123,399,199,263,465<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.google.com<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220519165903874.png" alt="示例"></p><h1 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h1><ul><li>iframe 的作用：用来在一个网页中显示另外一个网页</li><li>iframe 是一个双标签 基本语法 <code>&lt;iframe&gt;&lt;/iframe&gt;</code></li><li>常用属性 <code>src</code> <strong>页面路径</strong>        <code>width</code> <code>height</code> <strong>宽高</strong>         <code>frameborder</code> <strong>框架边框 一般设置为 0</strong>        <code>scrolling</code> <strong>滚动条,取值范围【auto(在需要情况下显示滚动条，auto 也是默认值)、yes(始终显示)、no(从不显示)】</strong></li><li>iframe 也可以作为一个链接的目标框架(iframe 的 name 属性值和 a 标签的 target 属性值要一致)</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>iframe example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.bilibili.com<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>350<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://qfedu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframeExample<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>千峰<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.bilibili.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframeExample<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>哔哩哔哩<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.bilibili.com/video/BV1mm4y1X7Hc?p=15<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframeExample<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>Spring Security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.bilibili.com<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>350<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>iframeExample<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="页面布局常用标签"><a href="#页面布局常用标签" class="headerlink" title="页面布局常用标签"></a>页面布局常用标签</h1><ul><li>p 标签是段落标签用于一段文本的描述，该标签是块状元素，如果想要对段落中的某些文本加粗可以用 <code>&lt;strong&gt;&lt;/strong&gt;</code> 包裹起来，如果要用斜体可以用 <code>&lt;em&gt;&lt;/em&gt;</code> 包裹起来</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span> 无意义块状元素标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>无意义行内元素标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>无序列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>列表项<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>超链接标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">/&gt;</span></span>图片标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span>斜体标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span>粗体标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;HTML5是构建Web内容的一种语言描述方式。HTML5是互联网的下一代标准，是构建以及呈现互联网内容的一种语言方式．被认为是互联网的核心技术之一。HTML产生于1990年，1997年HTML4成为互联网标准，并广泛应用于互联网应用的开发。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="html" scheme="https://www.adalucky.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Spring Security 5.X</title>
    <link href="https://www.adalucky.com/auto/springsecurity/"/>
    <id>https://www.adalucky.com/auto/springsecurity/</id>
    <published>2022-04-20T13:42:15.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spring Security是一个功能强大且可高度自定义的身份验证和访问控制框架。它是保护基于Spring的应用程序的事实上的标准。</p><p>Spring Security是一个专注于为Java应用程序提供身份验证和授权的框架。与所有Spring项目一样，Spring Security的真正强大之处在于它可以轻松扩展以满足自定义要求。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=677478312&amp;bvid=BV1mm4y1X7Hc&amp;cid=464455500&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul><li>实现前后端分离，按钮级权限控制（接口权限控制）</li><li>围绕 RBAC 权限模型进行设计</li></ul><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul><li>IDEA 2022.1</li><li>JDK 17.0.2</li><li>Gradle 7.4.1</li><li>SpringBoot 2.6.4</li><li>Spring Security 5.6.2</li></ul><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li><strong>Spring Security</strong> 是一个功能强大且可高度自定义的身份验证和访问控制框架。它是保护基于Spring的应用程序的事实上的标准。</li><li><strong>Spring Security</strong> 是一个专注于为Java应用程序提供身份验证和授权的框架。与所有Spring项目一样，Spring Security的真正强大之处在于它可以轻松扩展以满足自定义要求。</li><li></li><li>一般来说中大型的项目都是使用<strong>SpringSecurity</strong> 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。</li><li>一般Web应用的需要进行<strong>认证</strong>和<strong>授权</strong>。<ul><li><strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></li><li><strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong> </li><li>而认证和授权也是SpringSecurity作为安全架的核心功能。</li></ul></li></ul><h2 id="对比-Shiro"><a href="#对比-Shiro" class="headerlink" title="对比 Shiro"></a>对比 Shiro</h2><ul><li><strong>Spring Security</strong> 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架<strong>Shiro</strong>，它提供了更丰富的功能，社区资源也比Shiro丰富。</li><li>Spring 以简单而闻名，但讽刺的是很多人发现安装Spring Security很难</li><li>Spring Security有更好的社区支持</li><li>Apache Shiro 在 Spring Security 处理密码学方面有一个额外的模块</li><li>Spring Security 对 Spring 结合较好，如果项目用的 SpringMVC，使用起来很方便。但是如果项目中没有用到Spring，那就不要考虑它了。</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li>在 SpringBoot 工程快速整合 Security</li><li>在 SpringBoot 项目中使用 SpringSecurity 我们只需要引入启动器的依赖后重启项目</li><li>访问 <strong><a href="http://localhost:port/login">http://localhost:port/login</a></strong> 进行登录</li><li>用户名默认为：<strong>user</strong> </li><li>密码在启动的控制台有打印</li><li>可以自行实现一下，访问一个接口，如果没有登录会自动重定向到 login 页面，也就是说没有登录就无法访问接口</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-security"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220421123331236.png" alt="登录"></p><h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><h2 id="登陆校验流程"><a href="#登陆校验流程" class="headerlink" title="登陆校验流程"></a>登陆校验流程</h2><p><img src="http://blog.adalucky.com/notes/ada/image-20211215094003288.png" alt="登录校验流程"></p><h2 id="原理初探"><a href="#原理初探" class="headerlink" title="原理初探"></a>原理初探</h2><ul><li>想要知道如何实现自己的登陆流程就必须要先知道入门案例中 Spring Security的流程。</li></ul><h3 id="SpringSecurity完整流程"><a href="#SpringSecurity完整流程" class="headerlink" title="SpringSecurity完整流程"></a>SpringSecurity完整流程</h3><ul><li>Spring Security 的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</li><li>过滤器链:  多个过滤器组成一个过滤器链</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220421182750565.png" alt="SpringSecurity流程"></p><p>图中只展示了快速入门中的核心过滤器，其它的非核心过滤器并没有在图中展示。</p><p><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p><p><strong>ExceptionTranslationFilter：</strong>处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException,也就是说在处理中捕获到了异常都可以可以用它处理</p><p><strong>FilterSecurityInterceptor：</strong>负责权限校验的过滤器。</p><h3 id="完整的过滤器"><a href="#完整的过滤器" class="headerlink" title="完整的过滤器"></a>完整的过滤器</h3><ul><li>通过Debug查看当前系统中 Spring Security 过滤器链中有哪些过滤器及它们的顺序</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">run<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DefaultSecurityFilterChain</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220421213753335.png" alt="过滤器链"></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><h3 id="登录认证流程详解"><a href="#登录认证流程详解" class="headerlink" title="登录认证流程详解"></a>登录认证流程详解</h3><ul><li>概念速查:<ul><li>Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</li><li>AuthenticationManager接口：定义了认证Authentication的方法 </li><li>UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</li><li>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</li></ul></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211214151515385.png" alt="认证流程"></p><h3 id="登录改造思路"><a href="#登录改造思路" class="headerlink" title="登录改造思路"></a>登录改造思路</h3><ul><li>上面的流程对我们前后端分离的项目有两个地方需要改造：<ul><li>① 5.1 步骤 我们需要去数据库中查询而不是在内存中查询，因此我们要实现接口重新一个实现类</li><li>② 步骤 1 步骤 10 我们应该让前端来掉我们自己的 controller 然后我们去掉对应的认证，最后这个 controller 返回的时候需要封装一个 token 回去</li></ul></li><li><strong>UsernamePasswordAuthenticationFilter</strong> 换成我们自己的登录接口</li><li><strong>InMemoryUserDetailManager</strong> 换成我们自己实现了 UserDetailsService 接口的实现了去数据查询用户 </li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211215095331510.png" alt="改造流程图"></p><h3 id="认证思路"><a href="#认证思路" class="headerlink" title="认证思路"></a>认证思路</h3><ul><li>上面只是改造了登录，登录后，请求接口时我们怎么去判断是否已经登录呢？是当前用户是谁呢？</li><li>其实我们在上面返回的 jwt 生成的 token 用了用户 id 去生成 所以解析一下 token 就知道是谁了</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220421225457468.png" alt="用户认证"></p><h3 id="用户详情获取"><a href="#用户详情获取" class="headerlink" title="用户详情获取"></a>用户详情获取</h3><ul><li>登录 –&gt; 返回 token –&gt; JWT 认证 –&gt; 如何获取用户的详情？比如权限？</li><li>简单粗暴：登录后每次都带有 token，token 一解析就知道用户 ID,然后根据用户 ID 去数据库查询对应的权限（这种方式就是每次请求都需要去查询用户的权限，对数据库来说并不友好）</li><li>现实实践：如果能在我们每次登录成功以后就把我们的用户信息写到缓存里面就好了,缓存的 key 就是用户 ID, value 就是用户详情 会不会刚好有那么一个东西叫做 Redis </li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220421235854789.png" alt="用户详情获取思路"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>登录<ul><li>①自定义登录接口<ul><li>调用ProviderManager的方法进行认证 如果认证通过生成jwt</li><li>把用户信息存入redis中</li></ul></li><li>②自定义UserDetailsService<ul><li>在这个实现类中去查询数据库</li></ul></li></ul></li></ul><hr><ul><li>校验<ul><li>①定义Jwt认证过滤器<ul><li>获取token</li><li>解析token获取其中的userid</li><li>从redis中获取用户信息</li><li>存入SecurityContextHolder</li></ul></li></ul></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="依赖准备"><a href="#依赖准备" class="headerlink" title="依赖准备"></a>依赖准备</h2><ul><li>再次集成完整的环境 <code>Redis</code> <code>fastjson</code> <code>jwt</code></li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-data-redis"</span><span class="token punctuation">)</span><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.alibaba:fastjson:1.2.80"</span><span class="token punctuation">)</span><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"io.jsonwebtoken:jjwt:0.9.1"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><ul><li>创建 Redis 配置类</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(Redis配置类)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">package</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>FastJsonRedisSerializer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>RedisConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>StringRedisSerializer<span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description Redis 配置类 * @since 2022/4/22 00:34 */</span>@Configuration<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    @Bean    @<span class="token function">SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">&gt;</span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token parameter">RedisConnectionFactory connectionFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">&gt;</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        FastJsonRedisSerializer serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Hash的key也采用StringRedisSerializer的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><ul><li>创建一些工具类 <code>JWT工具类</code> <code>FastJson序列化Redis</code> <code>RedisTemplate工具类</code> <code>respons工具类</code></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(JWT工具类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>jwt</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Claims</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">JwtBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">Jwts</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>jsonwebtoken<span class="token punctuation">.</span></span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">SecretKey</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>spec<span class="token punctuation">.</span></span><span class="token class-name">SecretKeySpec</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description JWT工具类 * @since 2022/4/22 00:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtUtil</span> <span class="token punctuation">{</span>    <span class="token comment">//有效期为</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> JWT_TTL <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span><span class="token comment">// 60 * 60 *1000  一个小时</span>    <span class="token comment">//设置秘钥明文</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JWT_KEY <span class="token operator">=</span> <span class="token string">"sangeng"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生成jtw     *     * @param subject token中要存放的数据（json格式）     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JwtBuilder</span> builder <span class="token operator">=</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置过期时间</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生成jtw     *     * @param subject   token中要存放的数据（json格式）     * @param ttlMillis token超时时间     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">Long</span> ttlMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JwtBuilder</span> builder <span class="token operator">=</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> ttlMillis<span class="token punctuation">,</span> <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置过期时间</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">JwtBuilder</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">Long</span> ttlMillis<span class="token punctuation">,</span> <span class="token class-name">String</span> uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SignatureAlgorithm</span> signatureAlgorithm <span class="token operator">=</span> <span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">;</span>        <span class="token class-name">SecretKey</span> secretKey <span class="token operator">=</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> nowMillis <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>nowMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ttlMillis <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ttlMillis <span class="token operator">=</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span>JWT_TTL<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> expMillis <span class="token operator">=</span> nowMillis <span class="token operator">+</span> ttlMillis<span class="token punctuation">;</span>        <span class="token class-name">Date</span> expDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>expMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span>              <span class="token comment">//唯一的ID</span>                <span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span>   <span class="token comment">// 主题  可以是JSON数据</span>                <span class="token punctuation">.</span><span class="token function">setIssuer</span><span class="token punctuation">(</span><span class="token string">"sg"</span><span class="token punctuation">)</span>     <span class="token comment">// 签发者</span>                <span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>      <span class="token comment">// 签发时间</span>                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span>signatureAlgorithm<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span> <span class="token comment">//使用HS256对称加密算法签名, 第二个参数为秘钥</span>                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span>expDate<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建token     *     * @param id     * @param subject     * @param ttlMillis     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">createJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">Long</span> ttlMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">JwtBuilder</span> builder <span class="token operator">=</span> <span class="token function">getJwtBuilder</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> ttlMillis<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置过期时间</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> token <span class="token operator">=</span> <span class="token string">"eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg"</span><span class="token punctuation">;</span>        <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token function">parseJWT</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生成加密后的秘钥 secretKey     *     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SecretKey</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encodedKey <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">JwtUtil</span><span class="token punctuation">.</span>JWT_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecretKey</span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>encodedKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> encodedKey<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 解析     *     * @param jwt     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Claims</span> <span class="token function">parseJWT</span><span class="token punctuation">(</span><span class="token class-name">String</span> jwt<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">SecretKey</span> secretKey <span class="token operator">=</span> <span class="token function">generalKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secretKey<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(FastJson序列化Redis)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>redis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>parser<span class="token punctuation">.</span></span><span class="token class-name">ParserConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializerFeature</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">JavaType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span><span class="token class-name">TypeFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">RedisSerializer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description FastJson序列化Redis    https://blog.51cto.com/binghe001/5211167 * @since 2022/4/22 00:21 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">RedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Charset</span> DEFAULT_CHARSET <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token class-name">ParserConfig</span><span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoTypeSupport</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">FastJsonRedisSerializer</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SerializationException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token class-name">SerializerFeature</span><span class="token punctuation">.</span><span class="token class-name">WriteClassName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SerializationException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> bytes<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">JavaType</span> <span class="token function">getJavaType</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">TypeFactory</span><span class="token punctuation">.</span><span class="token function">defaultInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constructType</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(RedisTemplate工具类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>redis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">BoundSetOperations</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">HashOperations</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">ValueOperations</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description RedisTemplate工具类，通过 @Autowired 注入 RedisCache 即可完成调用 * @since 2022/4/22 00:46 */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">,</span> <span class="token string">"rawtypes"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisCache</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">/**     * 缓存基本的对象，Integer、String、实体类等     *     * @param key   缓存的键值     * @param value 缓存的值     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 缓存基本的对象，Integer、String、实体类等     *     * @param key      缓存的键值     * @param value    缓存的值     * @param timeout  时间     * @param timeUnit 时间颗粒度     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">setCacheObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> timeout<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">TimeUnit</span> timeUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> timeUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置有效时间     *     * @param key     Redis键     * @param timeout 超时时间     * @return true=设置成功；false=设置失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置有效时间     *     * @param key     Redis键     * @param timeout 超时时间     * @param unit    时间单位     * @return true=设置成功；false=设置失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获得缓存的基本对象。     *     * @param key 缓存键值     * @return 缓存键值对应的数据     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getCacheObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> operation <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> operation<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 删除单个对象     *     * @param key     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">deleteObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 删除集合对象     *     * @param collection 多个对象     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">deleteObject</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Collection</span> collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 缓存List数据     *     * @param key      缓存的键值     * @param dataList 待缓存的List数据     * @return 缓存的对象     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">long</span> <span class="token function">setCacheList</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Long</span> count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获得缓存的list对象     *     * @param key 缓存的键值     * @return 缓存键值对应的数据     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCacheList</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 缓存Set     *     * @param key     缓存键值     * @param dataSet 缓存的数据     * @return 缓存数据的对象     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">BoundSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">setCacheSet</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> dataSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BoundSetOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> setOperation <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundSetOps</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> dataSet<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            setOperation<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> setOperation<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获得缓存的set     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCacheSet</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 缓存Map     *     * @param key     * @param dataMap     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">setCacheMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> dataMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dataMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获得缓存的Map     *     * @param key     * @return     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCacheMap</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 往Hash中存入数据     *     * @param key   Redis键     * @param hKey  Hash键     * @param value 值     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">setCacheMapValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> hKey<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取Hash中的数据     *     * @param key  Redis键     * @param hKey Hash键     * @return Hash中的对象     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getCacheMapValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> hKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> opsForHash <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> opsForHash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 删除Hash中的数据     *     * @param key     * @param hkey     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delCacheMapValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> hkey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashOperations</span> hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashOperations<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hkey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取多个Hash中的数据     *     * @param key   Redis键     * @param hKeys Hash键集合     * @return Hash对象集合     */</span>    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMultiCacheMapValue</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获得缓存的基本对象列表     *     * @param pattern 字符串前缀     * @return 对象列表     */</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(respons</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>web</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description respons 工具类 往响应中快速写内容 * @since 2022/4/22 00:52 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebUtils</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 将字符串渲染到客户端     *     * @param response 渲染对象     * @param string   待渲染的字符串     * @return null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">renderString</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"># spring 相关集成配置spring<span class="token operator">:</span>  # 数据源配置  datasource<span class="token operator">:</span>    driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">:</span> com<span class="token punctuation">.</span>p6spy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>spy<span class="token punctuation">.</span>P6SpyDriver    url<span class="token operator">:</span> jdbc<span class="token operator">:</span>p6spy<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.115</span><span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>data_auto_endpoint<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span>&amp;characterEncoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span>&amp;serverTimezone<span class="token operator">=</span>GMT<span class="token operator">%</span>2B8&amp;useSSL<span class="token operator">=</span><span class="token boolean">false</span>    username<span class="token operator">:</span> root    password<span class="token operator">:</span> <span class="token number">123456</span>  redis<span class="token operator">:</span>    # Redis本地服务器地址，注意要开启redis服务    host<span class="token operator">:</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.115</span>    # Redis服务器端口<span class="token punctuation">,</span>默认为<span class="token number">6379</span><span class="token punctuation">.</span>若有改动按改动后的来    port<span class="token operator">:</span> <span class="token number">6379</span>    #Redis服务器连接密码，默认为空，若有设置按设置的来    password<span class="token operator">:</span> <span class="token number">123456</span>    jedis<span class="token operator">:</span>      pool<span class="token operator">:</span>        # 连接池最大连接数，若为负数则表示没有任何限制        max<span class="token operator">-</span>active<span class="token operator">:</span> <span class="token number">8</span>        # 连接池最大阻塞等待时间，若为负数则表示没有任何限制        max<span class="token operator">-</span>wait<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>        # 连接池中的最大空闲连接        max<span class="token operator">-</span>idle<span class="token operator">:</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="核心代码实现"><a href="#核心代码实现" class="headerlink" title="核心代码实现"></a>核心代码实现</h1><h2 id="库表创建"><a href="#库表创建" class="headerlink" title="库表创建"></a>库表创建</h2><ul><li>建立 user 表（密码前先展示用 {noop} ）</li></ul><h2 id="重写接口的方法"><a href="#重写接口的方法" class="headerlink" title="重写接口的方法"></a>重写接口的方法</h2><ul><li>实现 UserDetails 接口，重写里面的方法</li><li>重写 UserDetailsService 接口下的 loadUserByUsername 方法，因为这个方法默认是从内存中查的用户信息，我们需要改为去数据库查询</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(实现UserDetails接口)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description LoginUser 将用户封装成 UserDetails 对象 * @since 2022/4/22 21:30 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUser</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SysUser</span> sysUser<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SysUser</span> <span class="token function">getSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sysUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSysUser</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> sysUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sysUser <span class="token operator">=</span> sysUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> sysUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sysUser <span class="token operator">=</span> sysUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取权限     *     * @return 返回权限资源     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取密码     *     * @return 返回密码     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sysUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取账号     *     * @return 返回登录账户     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sysUser<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 判断账户是否未过期     *     * @return 未过期返回 true,过期返回 false     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 方法用于判断账户是否未锁定     *     * @return 未锁定返回 true 锁定返回 false     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用于判断用户凭证是否没过期，即密码是否未过期     *     * @return 没过期返回 true 过期返回 false     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 方法用于判断用户是否可用     *     * @return 可用返回 true 不可用返回 false     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(重新loadUserByUsername方法)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">BusinessException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">SysUserMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">ResultCode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>str<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">LambdaQueryWrapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetailsService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 重新 loadUserByUsername 方法，实现去数据库查询 * @since 2022/4/22 20:29 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">SysUserMapper</span> mapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">UserDetails</span> <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UsernameNotFoundException</span> <span class="token punctuation">{</span>        <span class="token comment">//查询用户信息 如果参数无效抛出自定义异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEffective</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span>                    <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>PARAM_IS_BLANK<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>PARAM_IS_BLANK<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span><span class="token operator">::</span><span class="token function">getUserName</span><span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//TODO 查询用户权限</span>        <span class="token comment">//查询成功后 封装到 UserDetails 对象</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>重写了上面的方法后我们可以启动一下进行测试，这个时候就需要输入我们数据的用户名和密码了</li><li>如果数据库直接是明文存储的话这里就会抛出 <code>There is no PasswordEncoder mapped for the id "null"</code></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220422221248112.png" alt="测试"></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><ul><li>Spring Security 的用户认证流程<ul><li>① 把前端传过来的用户名去数据查询对应的用户 <code>也就是调用我们重写的loadUserByUsername(String userName) 方法</code> </li><li>② 查询到以后通过 <code>return new LoginUser(user)</code> 封装用户信息到 <code>UserDetails</code></li><li>③ 会自动调用 <code>UserDetails</code> 的实现类，也就是我们这里的 <code>LoginUser</code> 的 getPassword() 获取用户的密码</li><li>④ 按照 默认或者我们指定的加密方式去和 getPassword() 获取用户的密码 比对</li><li>⑤ 比对通过登录成功，默认返回用户名或密码错误提示</li></ul></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><ul><li>告诉 Spring Security 我就是要用明文存，你就用明文比对就行了其它的安全不安全，泄露不泄露，与你不相干</li><li>这种方式比较粗暴，直接直接再数据库的密码前面加上 <strong>{noop}</strong> 例如 <strong>123456 –&gt; {noop}123456</strong></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220422225512161.png" alt="方案一"></p><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><h5 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h5><ul><li>实际项目中我们不会把密码明文存储在数据库中，采用密码加密存储方式，也就是在我们注册用户的时候把明文密码以 Spring Security 的加密方式进行加密，存储在数据库里面，验证的时候就把前端的明文再按照之前的加密方式加密一般和数据库返回的用户密码比较一次，一样的话密码就是正确的，校验通过</li><li>默认使用的PasswordEncoder要求数据库中的密码格式为：{id}password 。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换PasswordEncoder。（也就是要像上面写成 {noop}password ）</li><li>我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder。</li><li>我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。</li><li>我们可以定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapte</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>auth</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>password<span class="token punctuation">.</span></span><span class="token class-name">PasswordEncoder</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description Spring Security 配置类 * @since 2022/3/7 21:37 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建 CryptPasswordEncoder 注入到容器中，让 Spring Sercurity 默认以该方式进行加密</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h5><ul><li>PasswordEncoder 加密<code>encode()</code>  </li><li>从下面图片可以看出来，同一个明文通过同一种方式最后加密的结果不一样，究其原因就是每次使用的 <code>盐值</code> 不一样</li><li>$2a$10$tSn8ALjHUOtWPUziO8xIM.Auer5/yLLWsZspo3tsWI5OyBDea5mRS<ul><li><code>$2a$10$</code> + <code>22位盐值</code> + <code>加密后的密文</code></li><li><code>$2a</code> 是 BCrypt 的版本</li><li><code>$10</code> 是 10 次哈希</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>auth</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>password<span class="token punctuation">.</span></span><span class="token class-name">PasswordEncoder</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">WebSecurityConfigTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">PasswordEncoder</span> passwordEncoder<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> encode <span class="token operator">=</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> encode1 <span class="token operator">=</span> passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encode1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220422235539413.png" alt="encode加密"></p><hr><ul><li>PasswordEncoder.matches(rawPassword,encodedPassword) 认证密码</li><li>密码认证结果返回布尔值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>auth</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>password<span class="token punctuation">.</span></span><span class="token class-name">PasswordEncoder</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">WebSecurityConfigTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">PasswordEncoder</span> passwordEncoder<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span> <span class="token string">"$2a$10$tSn8ALjHUOtWPUziO8xIM.Auer5/yLLWsZspo3tsWI5OyBDea5mRS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"123654"</span><span class="token punctuation">,</span> <span class="token string">"$2a$10$tSn8ALjHUOtWPUziO8xIM.Auer5/yLLWsZspo3tsWI5OyBDea5mRS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220423000827706.png" alt="matches 认证"></p><h5 id="启动验证"><a href="#启动验证" class="headerlink" title="启动验证"></a>启动验证</h5><ul><li>找一个刚才加密后密文替换数据库之前的 {noop}123456</li><li>重启项目用明文进行登录即可</li></ul><h5 id="注册时密码加密"><a href="#注册时密码加密" class="headerlink" title="注册时密码加密"></a>注册时密码加密</h5><ul><li>其实很简单，就是在实体类的构造方法中对 密码进行一次加密即可 </li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token class-name">UserDto</span> userDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userDto<span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> userDto<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nikename <span class="token operator">=</span> userDto<span class="token punctuation">.</span><span class="token function">nikename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> userDto<span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> userDto<span class="token punctuation">.</span><span class="token function">phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> userDto<span class="token punctuation">.</span><span class="token function">sex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>avatar <span class="token operator">=</span> userDto<span class="token punctuation">.</span><span class="token function">avatar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>userDto<span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="登录接口实现"><a href="#登录接口实现" class="headerlink" title="登录接口实现"></a>登录接口实现</h2><ul><li>注意：登录 登出的接口地址不要用默认的 <strong>/login</strong> <strong>/logout</strong> 会和 Spring Security 的重合防止出现一些意向不到的错误，可以命名为 <strong>/user/login</strong> 这种 </li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>再理一下思路，上面我们的 登录认证流程详解图中: 前端请求登录 –&gt; 默认用 <code>AbstractAuthenticationProcessingFilter</code> 的实现类 <code>UsernamePasswordAuthenticationFilter</code>  会去封装前端的账户和密码 –&gt; 调用 <code>ProviderManager</code> 的 <code>authentication</code> 方法认证  –&gt; xxx… –&gt; 调用重写的 UserDetailsService 接口下的 loadUserByUsername 去数据库查询用户 —&gt; 封装到 UserDetails 的实现类 LoginUser –&gt; 返回给 <code>authentication</code></li><li>在接口中我们通过 AuthenticationManager 的 authenticate 方法来进行用户认证,所以需要在 SecurityConfig 中配置 <code>把AuthenticationManager注入容器</code>。</li><li>登录接口实现类注入 AuthenticationManager <code>调用 authenticate 方法进行认证</code></li><li>调用认证时需要传入 Authentication 对象，所以我们用 new UsernamePasswordAuthenticationToken() 把前端传过来的数据封装成 Authentication 对象，<strong>调用 authenticate 方法进行认证</strong> 时候就传这个对象 </li><li>认证返回的结果不是空的 就表示有用户信息认证写进去了，这个写入 Redis 和返回 JWT 给前端即可即可</li><li>如果 认证通过 生成 jwt 写入 Redis</li><li>那么我们只要重写 实现类，在接口登录的时候调用即可</li><li>在登录接口需要放行，包括注册接口，主要涉及到一些不需要用户进行登录就能操作的接口 都需要进行放行</li><li>接下我们需要自定义登陆接口，然后让SpringSecurity对这个<code>接口放行</code>,让用户访问这个接口的时候不用登录也能访问。</li><li>认证成功的话要生成一个jwt，放入响应中返回。并且为了让用户下回请求时能通过jwt识别出具体的是哪个用户，我们需要把<code>用户信息存入redis</code>，可以把用户id作为key。</li></ul><h3 id="配置类-1"><a href="#配置类-1" class="headerlink" title="配置类"></a>配置类</h3><ul><li>重写这个认证方法 authenticationManagerBean() 注入到容器中</li><li>配置请求放行等操作</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>auth</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>password<span class="token punctuation">.</span></span><span class="token class-name">PasswordEncoder</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description SpringBoot Security自动配置类 * @since 2022/3/7 21:37 */</span><span class="token annotation punctuation">@Configuration</span><span class="token comment">/*@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled = true)*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建 CryptPasswordEncoder 注入到容器中，让 Spring Sercurity 默认以该方式进行加密</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//重写这个认证方法，返回父类的认证方法，也就是逻辑还是原来的逻辑，目的是为了注入到 bean 后我们可以在登录的时候去调用这个对象的认证方法</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http                <span class="token comment">//关闭csrf</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//不通过Session获取SecurityContext</span>                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 对于登录接口、注册接口 允许匿名访问</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">,</span> <span class="token string">"/user/register"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 除上面外的所有请求全部需要鉴权认证</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>登录接口实现：① new UsernamePasswordAuthenticationToken() 封装前端的传参 ② 调用注入容器中的 authenticate 认证 ③ 返回的结果不为空后写入 Redis 缓存和 生成 JWT 返回给前端</li><li>@Autowired <code>分别注入 AuthenticationManager  RedisCache</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 登录    *    * @param userDto 前端传入的账号和密码    * @return 封装的统一返回    */</span>   <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">UserDto</span> userDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">//把前端传过来的用户名和密码封装成 authenticate 认证时候需要的 Authentication 对象</span>       <span class="token comment">//UsernamePasswordAuthenticationToken  继承了 AbstractAuthenticationToken  AbstractAuthenticationToken又实现了 Authentication</span>       <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDto<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDto<span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//调用 authenticate 方法认证就会去调用后面的 ProviderManager 后面会走到我们自己重写的 loadUserByUsername 方法去数据库查询用户信息进行认证</span>       <span class="token comment">//loadUserByUsername方法 里面会把用户信息封装到 我们自己重写的 UserDetails 的实现类 LoginUser</span>       <span class="token comment">//authenticate 认证方法的返回对象就会包含这个 LoginUser 的信息</span>       <span class="token keyword">var</span> authenticate <span class="token operator">=</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>authenticate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"认证失败,用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> authenticate<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> userId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       redisCache<span class="token punctuation">.</span><span class="token function">setCacheObject</span><span class="token punctuation">(</span><span class="token string">"login"</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">createJWT</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220423152850585.png" alt="DEBUG 分析"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220423161233725.png" alt="Redis 写入情况"></p><h1 id="JWT认证过滤器"><a href="#JWT认证过滤器" class="headerlink" title="JWT认证过滤器"></a>JWT认证过滤器</h1><ul><li>上面的我们已经生成了 JWT 返回给前端了，那么前端请求未放行的接口我们就要去解析 token ①是否是正确有效的 ②请求的用户是谁 ③根据解析的用户 id 去 Redis中查询用户的信息存入 SecurityContextHolder</li><li>为什么叫 JWT 认证过滤器呢，因为 Spring Security 框架有自带的 过滤器链，然后我们在某个过滤器前面或者后面加入一个自己的过滤器，组成一个新的过滤器链</li></ul><h2 id="创建认证过滤器"><a href="#创建认证过滤器" class="headerlink" title="创建认证过滤器"></a>创建认证过滤器</h2><ul><li>这个过滤器的作用是为了拦截请求 校验用户的身份<ul><li>①如果 token 为空的话就放行，因为可能是登录接口，或者注册接口，这里放行了后面拦截器中发现不是 登录或者注册接口又没有用户信息传过来就认证失败 403</li><li>②如果 token 解析失败证明就是非法的请求，抛出异常用户未登录</li><li>③解析成功了的话就去根据用户 ID 在 Redis 中取数据</li></ul></li><li>注意事项：①登录成功那个接口写入的 key 和这里取时候的 key 要一致 ②登录成功写入的数据类型和这里取时候接收的数据类型要兼容最好一致</li><li>过滤器尽量<code>不要用 implements Filter</code> 实现,因为这种方式可能在不同得 Severlet 版本中，一个请求过来过滤器会被调用多次，用 <code>extends OncePerRequestFilter</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>filter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>redis<span class="token punctuation">.</span></span><span class="token class-name">RedisCache</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>str<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SecurityContextHolder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">OncePerRequestFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">FilterChain</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span><span class="token class-name">JwtUtil</span><span class="token punctuation">.</span>parseJWT<span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 自定义的 Jwt 认证过滤器，插入到 Spring Security 的过滤器链 * @since 2022/4/23 20:34 */</span><span class="token annotation punctuation">@Component</span>    <span class="token comment">//一般的过滤器可能会去 implements Filter 实现,但是这种方式可能在不同得 Severlet 版本中，一个请求过来过滤器会被调用多次</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">RedisCache</span> redisCache<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">//    获取 token,前端 Header 头必须要有这个 token 这个参数</span>        <span class="token keyword">var</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEffective</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//如果 token 为空就放行不去做 解析/读Redis/ 写入SecurityContextHolder，这里的放行只是当前拦截器放行，后面的拦截器还是会去走对应的逻辑</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//    解析 token</span>        <span class="token class-name">String</span> userid<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            userid <span class="token operator">=</span> <span class="token function">parseJWT</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"token非法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//    Redis 取数据</span>        <span class="token class-name">SysUser</span> user <span class="token operator">=</span> redisCache<span class="token punctuation">.</span><span class="token function">getCacheObject</span><span class="token punctuation">(</span><span class="token string">"login"</span> <span class="token operator">+</span> userid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户未登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//存入SecurityContextHolder</span>        <span class="token comment">//TODO 获取权限信息封装到Authentication，第三个参数就是权限</span>        <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//放行到下一个过滤器</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加JWT-认证过滤器"><a href="#添加JWT-认证过滤器" class="headerlink" title="添加JWT 认证过滤器"></a>添加JWT 认证过滤器</h2><ul><li>将我们写的过滤器添加到 Spring Security 的过滤器链里面</li><li>添加的位置根据具体的业务逻辑而定，我们这里就需要在最前面添加，<strong>UsernamePasswordAuthenticationFilter</strong> 之前</li><li>在 <strong>WebSecurityConfig</strong> 这个配置类中<code>.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http                <span class="token comment">//关闭csrf</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//不通过Session获取SecurityContext</span>                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 对于登录接口、注册接口 允许匿名访问</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">,</span> <span class="token string">"/user/register"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 除上面外的所有请求全部需要鉴权认证</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">// 在UsernamePasswordAuthenticationFilter 过滤器前添加我们的自己写的 JWT 认证过滤器</span>                <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationTokenFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul><li>到这里为止我们的期望是当前端传过token 有效后我们去解析 userId，然后去 Redis 中获取用户的信息，并把查询存到SecurityContextHolder 中</li><li>写入 SecurityContextHolder 的时候需要用 new UsernamePasswordAuthenticationToken 构造对应的对象 authentication 对象</li><li>这个 new 构造函数用两个参数和三个参数的，两个参数是用来构造账号+密码用于认证的，我们用的三个参数的</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220423231016910.png" alt="写入到SecurityContextHolder"></p><h1 id="登出操作"><a href="#登出操作" class="headerlink" title="登出操作"></a>登出操作</h1><ul><li>注意接口命名之前也提过了不要和自带的重名了</li><li>这一步当我们登出的时候需要做的事情: 删 Redis 里面的用户信息</li><li>注意： ① 调用这个接口不需要传参，只需要前端传 Token ② 前端调用这个接口时候最先会走我们的 JWT 认证过滤器，这个时候认证通过会把我们的用户信息存在 SecurityContextHolder 没认证通过的话接口根本访问不到这里直接就会抛出 403 或者其它异常 ③ 删除 Redis 缓存的时候也就是从 SecurityContextHolder 获取到用户 ID 然后拼接以后删除</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 登出    *    * @return 封装的 Result    */</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">//退出登录的接口不需要传参，因为会携带 token(没带的话过滤器会拦截) SecurityContextHolder 中获取到 authentication 里面有用户信息（来源就是 JWT 认证过滤器存进去的）</span>       <span class="token keyword">var</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SysUser</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//删除 Redis 中的缓存</span>       redisCache<span class="token punctuation">.</span><span class="token function">deleteObject</span><span class="token punctuation">(</span><span class="token string">"login"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"退出登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220424204016280.png" alt="DEBUG 说明"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220424204918891.png" alt="缓存删除成功"></p><h1 id="配置项简介"><a href="#配置项简介" class="headerlink" title="配置项简介"></a>配置项简介</h1><ul><li>我们之前重写了 SecurityConfig 配置类，这里做一个配置项，configure 的一些粗浅简介</li><li>重写这个不需要注入到 Bean 中，我估摸这这个配置类重写以后 Security 就会调用我们自己的配置类算是一种多态吧</li><li>上层调用会传入一个 HttpSecurity 对象，那么我们就可以对用对用的方法进行设置了，具体还有那些配置需要用的时候再 Baidu 一下</li><li>下列示例中的没一行表示一个配置项的结束 返回的还是一个 HttpSecurity 所以还是可以继续调用设置</li><li>and() 方法可以理解为一组设置结束，返回的还是一个 HttpSecurity 对象，可以继续设置 这是我们常见的链式编程</li><li>设置 <code>.antMatchers("/user/login", "/user/register").anonymous()</code> <strong>对于登录接口、注册接口 允许匿名访问</strong> 注意<code>不带 token 才能正常访问</code>，<code>带了反而会抛异常</code> ，这就匿名访问</li><li><code>.antMatchers("/user/login", "/user/register").permitAll()</code> 下面这种 <strong>permitAll()</strong> 带不带 token 都可以访问</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>       http               <span class="token comment">//关闭csrf</span>               <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">//不通过Session获取SecurityContext</span>               <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">//对于登录接口、注册接口 允许匿名访问</span>               <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">,</span> <span class="token string">"/user/register"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">//其它的请求，任意用户认证通过后都可访问</span>               <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">//在UsernamePasswordAuthenticationFilter 过滤器前添加我们的自己写的 JWT 认证过滤器</span>               <span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationTokenFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><h2 id="权限系统的作用"><a href="#权限系统的作用" class="headerlink" title="权限系统的作用"></a>权限系统的作用</h2><ul><li>例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</li><li>总结起来就是<strong>不同的用户可以使用不同的功能</strong>。这就是权限系统要去实现的效果。</li><li>我们<code>不能只依赖前端去判断用户的权限来选择显示哪些菜单哪些按钮</code>。因为如果只是这样，如果有人知道了对应功能的接口地址就可以不通过前端，直接去发送请求来实现相关功能操作。</li><li>所以我们还需要在后台进行用户权限的判断，判断当前用户是否有相应的权限，必须具有所需权限才能进行相应的操作。</li></ul><h2 id="授权基本流程"><a href="#授权基本流程" class="headerlink" title="授权基本流程"></a>授权基本流程</h2><ul><li>在SpringSecurity中，会使用默认的FilterSecurityInterceptor来进行权限校验。在FilterSecurityInterceptor中会从SecurityContextHolder获取其中的Authentication，然后获取其中的权限信息，然后确认当前用户是否拥有访问当前资源所需的权限，如果有权限的话 FilterSecurityInterceptor 才会放行</li><li>所以我们项目在登录的时候需要把用户的权限信息也存入 Authentication 对象，最后写入到 Redis 中。</li><li>其它接口进行请求时经过 JWT 认证锅炉器，去 Redis 取用户信息和和拥有的资源权限 并写入到 SecurityContextHolder</li></ul><h2 id="授权实现"><a href="#授权实现" class="headerlink" title="授权实现"></a>授权实现</h2><ul><li>这里记录一下授权的实现，采用自顶向下编写代码</li><li>这里先采用写死权限的方式快速体验下，后面用权限模型优化代码</li></ul><h3 id="接口限制访问权限"><a href="#接口限制访问权限" class="headerlink" title="接口限制访问权限"></a>接口限制访问权限</h3><ul><li>就是对我们的 API 接口做权限校验，当你需要有某个权限的时候我才让你访问我的接口，没有这个权限的话，不好意思，你谁啊，403 拜拜</li><li>这里所谓的权限我们就是采用一个字符串来标识，当你有这个标识的时候那我就给你放行，让你请求我的接口</li><li>一般实现的方式有两种：①基于配置的方案（这种一般是针对静态资源，也就是 springboot 项目下的静态资源）②基于注解的方案（现在前后端分离的项目都是用这种）</li><li>具体实现：①在 Spring Security 的配置类上添加一个注解 <code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code> 开启对应的功能   ②在接口上添加注解<code>@PreAuthorize("hasAuthority('你的权限关键字')")</code> Spring Security 在运行的时候会去读取这个注解里面的参数当做一个表达式，读取到了 <strong>hasAuthority()</strong> 后就会去调用这个方法，然后传入你自己的权限关键字去 SecurityContextHolder 的权限里面比对有没有一模一样的关键字，最后返回一个布尔值确定你是否能访问这个接口</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Spring Security 配置类中开启注解</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment">//接口上添加权限访问控制注解，写入表达式和关键字（这个关键字只要是一个字符串都行 ）</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('system:user:list')"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220424230730279.png" alt="接口限制访问权限"></p><h3 id="封装权限信息"><a href="#封装权限信息" class="headerlink" title="封装权限信息"></a>封装权限信息</h3><ul><li>思路：在登录的时候我们就需要去数据库查询出来一些封装给用户对象，然后写入 Redis，（这里先写死，不去数据查询）</li><li>注意事项：我们是用一个集合来接受，最好是用一个不能重复的集合，并且在数据查询的时候也需要去重双重保障吧（后面查数据库权限的时候会再记录）</li><li>涉及变动：之前我的代码往 Redis 中存的都是 SysUser 的对象，现在加了一个 权限对象 <code>Set&lt;String&gt; permissions</code> 所以存的时候只能把拥有这两个对象的 <code>LoginUser</code> 存进去了， <code>SysUser</code> 和 <code>Set&lt;String&gt; permissions</code> 都是这个对象的属性</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(loadUserByUsername)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">package</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>BusinessException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>SysUserMapper<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>SysUser<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>response<span class="token punctuation">.</span>ResultCode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>str<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span>LambdaQueryWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetailsService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UsernameNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Objects<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 重新 loadUserByUsername 方法，实现去数据库查询 * @since 2022/4/22 20:29 */</span>@Service<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDetailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetailsService</span> <span class="token punctuation">{</span>    @Autowired    SysUserMapper mapper<span class="token punctuation">;</span>    @Override    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> throws UsernameNotFoundException <span class="token punctuation">{</span>        <span class="token comment">//查询用户信息 如果参数无效抛出自定义异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEffective</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span>                    ResultCode<span class="token punctuation">.</span><span class="token constant">PARAM_IS_BLANK</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    ResultCode<span class="token punctuation">.</span><span class="token constant">PARAM_IS_BLANK</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//限制数据库只能有一条，因为手机号唯一，如果不止一条 getOne 就会抛异常，catch 捕获了就抛出自定义异常</span>        LambdaQueryWrapper<span class="token operator">&lt;</span>SysUser<span class="token operator">&gt;</span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>SysUser<span class="token operator">:</span><span class="token operator">:</span>getUsername<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        SysUser user<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            user <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span>                    ResultCode<span class="token punctuation">.</span><span class="token constant">USER_REPEAT</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    ResultCode<span class="token punctuation">.</span><span class="token constant">USER_REPEAT</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//查询数据不为空后 构造到 LoginUser 中(也就是封装到 UserDetails 的对象)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span>                    ResultCode<span class="token punctuation">.</span><span class="token constant">PARAM_IS_BLANK</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    ResultCode<span class="token punctuation">.</span><span class="token constant">PARAM_IS_BLANK</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">//List&lt;String&gt; menu = new ArrayList&lt;&gt;(Arrays.asList("system:user:list"));</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> permissions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"system:user:list"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(登录的实现方法)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 登录 * * @param userDto 前端传入的账号和密码 * @return 封装的统一返回 */</span><span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">UserDto</span> userDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//把前端传过来的用户名和密码封装成 authenticate 认证时候需要的 Authentication 对象</span>    <span class="token comment">//UsernamePasswordAuthenticationToken  继承了 AbstractAuthenticationToken  AbstractAuthenticationToken又实现了 Authentication</span>    <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDto<span class="token punctuation">.</span><span class="token function">username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userDto<span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用 authenticate 方法认证就会去调用后面的 ProviderManager 后面会走到我们自己重写的 loadUserByUsername 方法去数据库查询用户信息进行认证</span>    <span class="token comment">//loadUserByUsername方法 里面会把用户信息封装到 我们自己重写的 UserDetails 的实现类 LoginUser</span>    <span class="token comment">//authenticate 认证方法的返回对象就会包含这个 LoginUser 的信息</span>    <span class="token keyword">var</span> authenticate <span class="token operator">=</span> authenticationManager<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>authenticate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"认证失败,用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> authenticate<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> user <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> userId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入 loginUser 时， permissions 必须要有对应的 get set 方法</span>    redisCache<span class="token punctuation">.</span><span class="token function">setCacheObject</span><span class="token punctuation">(</span><span class="token string">"login"</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> loginUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> <span class="token class-name">JwtUtil</span><span class="token punctuation">.</span><span class="token function">createJWT</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(LoginUser对象)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">JSONField</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>authority<span class="token punctuation">.</span></span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span></span><span class="token class-name">UserDetails</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description LoginUser 将用户封装成 UserDetails 对象 * @since 2022/4/22 21:30 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginUser</span> <span class="token keyword">implements</span> <span class="token class-name">UserDetails</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">SysUser</span> sysUser<span class="token punctuation">;</span>    <span class="token comment">//存储权限集合</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissions<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SysUser</span> <span class="token function">getSysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sysUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSysUser</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> sysUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sysUser <span class="token operator">=</span> sysUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> permissions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPermissions</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>permissions <span class="token operator">=</span> permissions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAuthorities</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authorities <span class="token operator">=</span> authorities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 构造 UserDetails     *     * @param user        SysUser 对象     * @param permissions 用户的权限资源集合     */</span>    <span class="token keyword">public</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span><span class="token class-name">SysUser</span> user<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sysUser <span class="token operator">=</span> user<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>permissions <span class="token operator">=</span> permissions<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// fastjson 的注解，不进行序列化，因为这个是 Security 提供的序列化会报错 我们存在 Redis 中 存Set&lt;String&gt; permissions 对象</span>    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorities<span class="token punctuation">;</span>    <span class="token comment">/**     * 获取权限     *     * @return 返回权限资源集合 (将 permissions 集合中的 String 标识存入后返回，只有第一次为空的时候才会写，不为空直接返回权限集合)     * 如果修改了用户权限需要删除 Redis 重新登录一次或者重写写一次权限不然这里权限不为空就获取不到最新的权限了     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//这里优化一些代码加个 if 判断，当权限为空的时候先去把权限写入到 Set&lt;SimpleGrantedAuthority&gt; authorities 中，如果不为空直接返回这个权限，不然每次认证权限的时候调用一次 getAuthorities() 方法都会重复写同样的东西</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>authorities <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> authorities<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token comment">/*        Set&lt;GrantedAuthority&gt;  authorities = new HashSet&lt;&gt;();        permissions.forEach(permission-&gt;authorities.add(new SimpleGrantedAuthority(permission)));        return authorities;        */</span>        <span class="token comment">//函数式编程: 先把 permissions 转换成一个流，然后里面的值到一个 map 里，里面的每一个对象调用一次 SimpleGrantedAuthority 的构造方法，最后再调用 collect() 方法收集成一个 Set 集合</span>        <span class="token comment">//把permissions中String类型的权限信息封装成SimpleGrantedAuthority对象</span>        authorities <span class="token operator">=</span> permissions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> authorities<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取密码     *     * @return 返回密码     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sysUser<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取账号     *     * @return 返回登录账户     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sysUser<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 判断账户是否未过期     *     * @return 未过期返回 true,过期返回 false     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 方法用于判断账户是否未锁定     *     * @return 未锁定返回 true 锁定返回 false     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccountNonLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 用于判断用户凭证是否没过期，即密码是否未过期     *     * @return 没过期返回 true 过期返回 false     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCredentialsNonExpired</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 方法用于判断用户是否可用     *     * @return 可用返回 true 不可用返回 false     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="RBAC权限模型"><a href="#RBAC权限模型" class="headerlink" title="RBAC权限模型"></a>RBAC权限模型</h1><h2 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h2><ul><li>RBAC权限模型（Role-Based Access Control）即：基于角色的权限控制。这是目前最常被开发者使用也是相对易用、通用权限模型。</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220426164615643.png" alt="RBAC 权限模型"></p><h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><ul><li>按照简介所示图，一个我们需要 5 张表进行组成一个基本的 RBAC 的模型</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(建表)</div></div><div class="fold"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建用户表DROP TABLE IF EXISTS `sys_user`;CREATE TABLE `sys_user`(    `user_id`     int                                                    NOT NULL AUTO_INCREMENT COMMENT '用户ID',    `dept_id`     int                                                         DEFAULT NULL COMMENT '部门ID',    `username`    varchar(11) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '登录账号',    `nikename`    varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '用户昵称',    `type`        varchar(2) CHARACTER SET utf8 COLLATE utf8_general_ci       DEFAULT '00' COMMENT '用户类型（00系统用户）',    `email`       varchar(50)                                                 DEFAULT '' COMMENT '用户邮箱',    `phone`       varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci      DEFAULT '' COMMENT '手机号码',    `sex`         int                                                         DEFAULT '2' COMMENT '用户性别（0女 1男 2保密）',    `avatar`      varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci     DEFAULT 'https://www.adalucky.com/medias/16229390604952.png' COMMENT '头像路径',    `password`    varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci     DEFAULT '' COMMENT '密码',    `status`      int                                                         DEFAULT '0' COMMENT '帐号状态（0 启用  1 禁用）',    `deleted`     int                                                         DEFAULT '0' COMMENT '删除标志（0代表未删除 1代表已删除）',    `project_id`  int                                                         DEFAULT NULL COMMENT '默认项目ID',    `login_ip`    varchar(50)                                                 DEFAULT '' COMMENT '最后登陆IP',    `login_date`  datetime                                                    DEFAULT NULL COMMENT '最后登陆时间',    `create_by`   varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci      DEFAULT NULL COMMENT '创建者',    `create_time` timestamp                                              NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',    `update_by`   varchar(30) CHARACTER SET utf8 COLLATE utf8_general_ci      DEFAULT NULL COMMENT '更新者',    `update_time` timestamp                                              NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',    `version`     int                                                         DEFAULT '1' COMMENT 'Mybatis-Plus 乐观锁标记',    `remark`      varchar(500)                                                DEFAULT '' COMMENT '备注',    PRIMARY KEY (`user_id`)) ENGINE = InnoDB  DEFAULT CHARSET = utf8mb4 COMMENT ='用户信息表';-- 创建权限表DROP TABLE IF EXISTS `sys_menu`;CREATE TABLE `sys_menu`(    `id`          bigint(20)  NOT NULL AUTO_INCREMENT,    `menu_name`   varchar(64) NOT NULL DEFAULT 'NULL' COMMENT '菜单名',    `path`        varchar(200)         DEFAULT NULL COMMENT '路由地址',    `component`   varchar(255)         DEFAULT NULL COMMENT '组件路径',    `visible`     char(1)              DEFAULT '0' COMMENT '菜单状态（0显示 1隐藏）',    `status`      char(1)              DEFAULT '0' COMMENT '菜单状态（0正常 1停用）',    `perms`       varchar(100)         DEFAULT NULL COMMENT '权限标识',    `icon`        varchar(100)         DEFAULT '#' COMMENT '菜单图标',    `create_by`   bigint(20)           DEFAULT NULL,    `create_time` datetime             DEFAULT NULL,    `update_by`   bigint(20)           DEFAULT NULL,    `update_time` datetime             DEFAULT NULL,    `deleted`     int(11)              DEFAULT '0' COMMENT '删除标志（0代表未删除 1代表已删除）',    `remark`      varchar(500)         DEFAULT NULL COMMENT '备注',    PRIMARY KEY (`id`)) ENGINE = InnoDB  AUTO_INCREMENT = 2  DEFAULT CHARSET = utf8mb4 COMMENT ='菜单表';-- 创建角色表DROP TABLE IF EXISTS `sys_role`;CREATE TABLE `sys_role`(    `id`          bigint(20) NOT NULL AUTO_INCREMENT,    `name`        varchar(128) DEFAULT NULL,    `role_key`    varchar(100) DEFAULT NULL COMMENT '角色权限字符串',    `status`      char(1)      DEFAULT '0' COMMENT '角色状态（0正常 1停用）',    `del_flag`    int(1)       DEFAULT '0' COMMENT 'del_flag',    `create_by`   bigint(200)  DEFAULT NULL,    `create_time` datetime     DEFAULT NULL,    `update_by`   bigint(200)  DEFAULT NULL,    `update_time` datetime     DEFAULT NULL,    `remark`      varchar(500) DEFAULT NULL COMMENT '备注',    PRIMARY KEY (`id`)) ENGINE = InnoDB  AUTO_INCREMENT = 3  DEFAULT CHARSET = utf8mb4 COMMENT ='角色表';-- 创建角色权限中间表DROP TABLE IF EXISTS `sys_role_menu`;CREATE TABLE `sys_role_menu`(    `role_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT '角色ID',    `menu_id` bigint(200) NOT NULL DEFAULT '0' COMMENT '菜单id',    PRIMARY KEY (`role_id`, `menu_id`)) ENGINE = InnoDB  AUTO_INCREMENT = 2  DEFAULT CHARSET = utf8mb4 COMMENT ='角色权限中间表';-- 创建用户角色中间表DROP TABLE IF EXISTS `sys_user_role`;CREATE TABLE `sys_user_role`(    `user_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT '用户id',    `role_id` bigint(200) NOT NULL DEFAULT '0' COMMENT '角色id',    PRIMARY KEY (`user_id`, `role_id`)) ENGINE = InnoDB  DEFAULT CHARSET = utf8mb4 COMMENT ='用户角色中间表';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><ul><li>实现思路：新建一个 sys_menu 的实体类、Mapper 接口、xml</li><li>编写查询用户权限的 SQL 放在 xml 中，Mapper 中声明对应的方法</li><li>Mapper 传入的参数类型需要和 实体类中的 userId 兼容</li><li>生成 xml 文件和自定义 SQL 可在类上合方法上进行提示填充（MybatisX 插件）</li><li>最后把我们写死的权限换成查询的（Mapper 的 bean 要注入）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Set&lt;String&gt; permissions = new HashSet&lt;String&gt;(Arrays.asList("system:user:list"));</span><span class="token keyword">var</span> permissions <span class="token operator">=</span> sysMenuMapper<span class="token punctuation">.</span><span class="token function">selectPermsByUserId</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoginUser</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> permissions<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(实体类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">FieldFill</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IdType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableField</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableName</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModelProperty</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 菜单表 实体类 * @since 2022-04-26 00:06:11 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"sys_menu"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"SysMenu对象"</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">"菜单表"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysMenu</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"菜单名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> menuName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"路由地址"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> path<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"组件路径"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> component<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"菜单状态（0显示 1隐藏）"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> visible<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"菜单状态（0正常 1停用）"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> status<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"权限标识"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> perms<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"菜单图标"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> icon<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> createBy<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> updateBy<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT_UPDATE<span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"删除标志（0代表未删除 1代表已删除）"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> deleted<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"备注"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> remark<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(Mapper接口)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>model<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">SysMenu</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 菜单表 Mapper 接口 * @since 2022-04-26 00:06:11 */</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SysMenuMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysMenu</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectPermsByUserId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(xml)</div></div><div class="fold"><pre class="line-numbers language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;mapper namespace="com.adalucky.modules.system.mapper.SysMenuMapper"&gt;    &lt;select id="selectPermsByUserId" resultType="java.lang.String"&gt;        SELECT DISTINCT M.perms        FROM `sys_user_role` UR                 LEFT JOIN `sys_role` R ON UR.role_id = R.id                 LEFT JOIN `sys_role_menu` RM ON UR.role_id = RM.role_id                 LEFT JOIN `sys_menu` M ON RM.menu_id = M.id        WHERE UR.user_id = #{id}          AND M.`status` = '0'          AND R.`status` = '0'    &lt;/select&gt;&lt;/mapper&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h2><ul><li>我们还希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道SpringSecurity的异常处理机制。</li><li>在SpringSecurity中，如果我们在认证或者授权的过程中<code>出现了异常会被ExceptionTranslationFilter捕获到</code>。在<code>ExceptionTranslationFilter中会去判断</code>是认证失败还是授权失败出现的异常。</li><li>如果是<code>认证过程中出现的异常</code>会被封装成AuthenticationException然后<code>调用AuthenticationEntryPoint</code>对象的方法去进行异常处理。</li><li>如果是<code>授权过程中出现的异常</code>会被封装成AccessDeniedException然后调用<code>AccessDeniedHandle</code>对象的方法去进行异常处理。</li><li>所以如果我们需要自定义异常处理，我们只需要自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity即可。</li></ul><h2 id="自定义实现"><a href="#自定义实现" class="headerlink" title="自定义实现"></a>自定义实现</h2><ul><li>需要重写两个实现类</li><li>注意如果有全局异常处理，并且捕获的异常类型为 <code>Exception</code> 或者包含了下面实现类抛出的异常，全局的异常捕获会覆盖掉当前的自定义，给你的感觉就像是没有生效</li><li>记得要注入到容器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">WebUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationEntryPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 自定义用户认证失败异常 * @since 2022/4/27 21:37 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthenticationEntryPointImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"用户认证失败,请重新登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理异常</span>        <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">renderString</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>handler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">WebUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>JSON<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpStatus</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 自定义权限认证失败异常 * @since 2022/4/27 21:40 */</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessDeniedHandlerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> accessDeniedException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>FORBIDDEN<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"您的权限不足,请联系管理员开通权限"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//处理异常</span>        <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">renderString</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置类-2"><a href="#配置类-2" class="headerlink" title="配置类"></a>配置类</h2><ul><li>在之前的配置类中加入配置容器中要注入接口 <code>AuthenticationEntryPoint</code> <code>AccessDeniedHandler</code> 然后调用 <code>http.exceptionHandling()</code> 下对应的配置项</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>auth</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">JwtAuthenticationTokenFilter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationManager</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>method<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">EnableGlobalMethodSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>builders<span class="token punctuation">.</span></span><span class="token class-name">HttpSecurity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>web<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">WebSecurityConfigurerAdapter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>config<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>bcrypt<span class="token punctuation">.</span></span><span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>password<span class="token punctuation">.</span></span><span class="token class-name">PasswordEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span></span><span class="token class-name">AuthenticationEntryPoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>access<span class="token punctuation">.</span></span><span class="token class-name">AccessDeniedHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authentication<span class="token punctuation">.</span></span><span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description SpringBoot Security自动配置类 * @since 2022/3/7 21:37 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> jwtAuthenticationTokenFilter<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AuthenticationEntryPoint</span> authenticationEntryPoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AccessDeniedHandler</span> accessDeniedHandler<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">WebSecurityConfig</span><span class="token punctuation">(</span><span class="token class-name">JwtAuthenticationTokenFilter</span> jwtAuthenticationTokenFilter<span class="token punctuation">,</span> <span class="token class-name">AuthenticationEntryPoint</span> authenticationEntryPoint<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedHandler</span> accessDeniedHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jwtAuthenticationTokenFilter <span class="token operator">=</span> jwtAuthenticationTokenFilter<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>authenticationEntryPoint <span class="token operator">=</span> authenticationEntryPoint<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accessDeniedHandler <span class="token operator">=</span> accessDeniedHandler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">PasswordEncoder</span> <span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//创建 CryptPasswordEncoder 注入到容器中，让 Spring Sercurity 默认以该方式进行加密</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">AuthenticationManager</span> <span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//重写这个认证方法，返回父类的认证方法，也就是逻辑还是原来的逻辑，目的是为了注入到 bean 后我们可以在登录的时候去调用这个对象的认证方法</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">authenticationManagerBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http                <span class="token comment">//关闭csrf</span>                <span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//不通过Session获取SecurityContext</span>                <span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//开始设置请求认证规则</span>                <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//对于登录接口、注册接口 允许匿名访问</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">,</span> <span class="token string">"/user/register"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//其它的请求，任意用户认证通过后都可访问</span>                <span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在UsernamePasswordAuthenticationFilter 过滤器前添加我们的自己写的 JWT 认证过滤器</span>        http<span class="token punctuation">.</span><span class="token function">addFilterBefore</span><span class="token punctuation">(</span>jwtAuthenticationTokenFilter<span class="token punctuation">,</span> <span class="token class-name">UsernamePasswordAuthenticationFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//配置异常处理器</span>        http<span class="token punctuation">.</span><span class="token function">exceptionHandling</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//配置认证失败、授权失败处理器 </span>                <span class="token punctuation">.</span><span class="token function">authenticationEntryPoint</span><span class="token punctuation">(</span>authenticationEntryPoint<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">accessDeniedHandler</span><span class="token punctuation">(</span>accessDeniedHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><ul><li>浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。 </li><li>前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。</li><li>所以我们就要处理一下，让前端能进行跨域请求。</li><li>总体分两步：①配置 SpringBoot 的跨域策略  ②Security 配置开启允许跨域(由于我们的资源都会收到Spring Security的保护，所以想要跨域访问还要让Spring Security允许跨域访问。)</li></ul><h2 id="SpringBoot跨域配置"><a href="#SpringBoot跨域配置" class="headerlink" title="SpringBoot跨域配置"></a>SpringBoot跨域配置</h2><ul><li>当前我的版本为 SpringBoot 2.6.4</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">CorsConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">CorsFilter</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 新跨域配置方案不然 SpringBoot2.6.x 访问会有一些报错 * @since 2022/3/19 19:34 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrosConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CorsConfiguration</span> <span class="token function">corsConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOriginPattern</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">3600L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> corsConfiguration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> <span class="token function">corsConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Spring-Security跨域开启"><a href="#Spring-Security跨域开启" class="headerlink" title="Spring Security跨域开启"></a>Spring Security跨域开启</h2><ul><li>实际发现我上面的配置以后这里不开启也是能跨域的，估计和版本以及我上面注入了那个 Bean</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//允许跨域</span>http<span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="其它权限认证方式"><a href="#其它权限认证方式" class="headerlink" title="其它权限认证方式"></a>其它权限认证方式</h1><h2 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h2><ul><li>在上面我们想认证一个用户是否有接口的访问权限，我们的方式是在入Spring Security 的配置类上添加一个注解 <code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code> 然后在接口上添加注解<code>@PreAuthorize("hasAuthority('你的权限关键字')")</code> 来进行实现的，这里的本质是一种 <code>SPEL</code> 的表达式</li><li>我们前面都是使用@PreAuthorize注解，然后在在其中使用的是hasAuthority方法进行校验。SpringSecurity还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole等。</li><li>可以通过 DEBUG 去理解hasAuthority的原理，hasAuthority方法实际是执行到了SecurityExpressionRoot的hasAuthority，大家只要断点调试既可知道它内部的校验原理。</li><li>它内部其实是调用authentication的getAuthorities方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</li><li>hasAuthority 还是最好用的</li></ul><h2 id="hasAnyAuthority"><a href="#hasAnyAuthority" class="headerlink" title="hasAnyAuthority"></a>hasAnyAuthority</h2><ul><li>hasAnyAuthority方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAnyAuthority('admin','test','system:dept:list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hasRole"><a href="#hasRole" class="headerlink" title="hasRole"></a>hasRole</h2><ul><li>hasRole 要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</li><li>也就是说如果使用这个方法做权限校验，那么在我们数据库存储的权限标识符 <code>system:dept:list</code> –&gt; <code>ROLE_system:dept:list</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasRole('system:dept:list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hasAnyRole"><a href="#hasAnyRole" class="headerlink" title="hasAnyRole"></a>hasAnyRole</h2><ul><li>hasAnyRole 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAnyRole('admin','system:dept:list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义认证方法"><a href="#自定义认证方法" class="headerlink" title="自定义认证方法"></a>自定义认证方法</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>上面的原理就是在@PreAuthorize注解中加入 Spring Security自带的认证方法，然后传入一个或者多个参数</li><li>那么我们也可以定义自己的权限校验方法，在@PreAuthorize注解中使用我们的方法</li></ul><h3 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h3><ul><li>Component 需要起一个别名，到时候获取这个 Bean 的时候就通过这个别名来引用</li><li>这个里面只是一个简单的示例，可以以把 集合是否包含换成模糊匹配最终返回一个布尔值，比如接口中定义调用的时候传入的是  system:* 那么就表示 这个用户有 sytem 下的所有权限（大概就是这种，有可能会用到，我这里暂时不涉及就不实现了）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"automation"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionRoot</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token class-name">String</span> authority<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//获取当前用户的权限</span>        <span class="token class-name">Authentication</span> authentication <span class="token operator">=</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LoginUser</span><span class="token punctuation">)</span> authentication<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissions <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断用户权限集合中是否存在authority</span>        <span class="token keyword">return</span> permissions<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>authority<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><ul><li>在SPEL表达式中使用 @automation 相当于获取容器中bean的名字为 automation 的对象。然后再调用这个对象的hasAuthority方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"@automation.hasAuthority('system:dept:list')"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置文件认证"><a href="#配置文件认证" class="headerlink" title="配置文件认证"></a>配置文件认证</h3><ul><li>上面我们都是通过注解来实现，之前也提到过认证一般有两种，一种是注解，一种是配置，配置一般用于对静态文件，但是也可以对接口进行这样的权限认证</li><li>示例如下，这里可以把所有需要权限校验的接口都配上，看个人喜好，可以在这里全配上或者在接口加注解</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/user/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasAuthority</span><span class="token punctuation">(</span><span class="token string">"system:user:list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><ul><li>CSRF是指跨站请求伪造（Cross-site request forgery），是web常见的攻击之一</li><li>SpringSecurity去防止CSRF攻击的方式就是通过csrf_token。后端会生成一个csrf_token，前端发起请求的时候需要携带这个csrf_token,后端会有过滤器进行校验，如果没有携带或者是伪造的就不允许访问。</li><li>我们可以发现CSRF攻击依靠的是cookie中所携带的认证信息。但是在前后端分离的项目中我们的认证信息其实是token，而token并不是存储中cookie中，并且需要前端代码去把token设置到请求头中才可以，所以CSRF攻击也就不用担心了。所以我们就关掉了，因为我们请求的时候也没带 csrf_token 不关闭反而认证不通过</li></ul><h2 id="自定义处理器"><a href="#自定义处理器" class="headerlink" title="自定义处理器"></a>自定义处理器</h2><ul><li>以下的这些方案的前是不采用我们上面哪一套设计方案，因为我们上面那一套方案重新了很多过滤器的方法，调用的和默认的不一样，所以在这里可能就无效了，没有去执行父类的 super 默认配置项</li></ul><h3 id="认证成功处理器"><a href="#认证成功处理器" class="headerlink" title="认证成功处理器"></a>认证成功处理器</h3><ul><li>实际上在UsernamePasswordAuthenticationFilter进行登录认证的时候，如果登录成功了是会调用AuthenticationSuccessHandler的方法进行认证成功后的处理的。AuthenticationSuccessHandler就是登录成功处理器。</li><li>我们也可以自己去自定义成功处理器进行成功后的相应处理。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SGSuccessHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationSuccessHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证成功了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationSuccessHandler</span> successHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>successHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="认证失败处理器"><a href="#认证失败处理器" class="headerlink" title="认证失败处理器"></a>认证失败处理器</h3><ul><li>实际上在UsernamePasswordAuthenticationFilter进行登录认证的时候，如果认证失败了是会调用AuthenticationFailureHandler的方法进行认证失败后的处理的。AuthenticationFailureHandler就是登录失败处理器。</li><li>我们也可以自己去自定义失败处理器进行失败后的相应处理。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SGFailureHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationFailureHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAuthenticationFailure</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证失败了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationSuccessHandler</span> successHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationFailureHandler</span> failureHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//                配置认证成功处理器</span>                <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>successHandler<span class="token punctuation">)</span><span class="token comment">//                配置认证失败处理器</span>                <span class="token punctuation">.</span><span class="token function">failureHandler</span><span class="token punctuation">(</span>failureHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登出成功处理器"><a href="#登出成功处理器" class="headerlink" title="登出成功处理器"></a>登出成功处理器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SGLogoutSuccessHandler</span> <span class="token keyword">implements</span> <span class="token class-name">LogoutSuccessHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onLogoutSuccess</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Authentication</span> authentication<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"注销成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationSuccessHandler</span> successHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">AuthenticationFailureHandler</span> failureHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LogoutSuccessHandler</span> logoutSuccessHandler<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//                配置认证成功处理器</span>                <span class="token punctuation">.</span><span class="token function">successHandler</span><span class="token punctuation">(</span>successHandler<span class="token punctuation">)</span><span class="token comment">//                配置认证失败处理器</span>                <span class="token punctuation">.</span><span class="token function">failureHandler</span><span class="token punctuation">(</span>failureHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment">//配置注销成功处理器</span>                <span class="token punctuation">.</span><span class="token function">logoutSuccessHandler</span><span class="token punctuation">(</span>logoutSuccessHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;Spring Security是一个功能强大且可高度自定义的身份验证和访问控制框架。它是保护基于Spring的应用程序的事实上的标准。&lt;/p&gt;
&lt;p&gt;Spring Security是一个专注于为Java应用程序提供身份验证和授权的框架。与所有Spring项目一样，Spring Security的真正强大之处在于它可以轻松扩展以满足自定义要求。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="RBAC" scheme="https://www.adalucky.com/tags/RBAC/"/>
    
    <category term="Spring Security" scheme="https://www.adalucky.com/tags/Spring-Security/"/>
    
    <category term="JWT" scheme="https://www.adalucky.com/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>aliOss</title>
    <link href="https://www.adalucky.com/auto/oss/"/>
    <id>https://www.adalucky.com/auto/oss/</id>
    <published>2022-03-29T04:36:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>阿里云对象存储OSS（Object Storage Service）是一款海量、安全、低成本、高可靠的云存储服务，可提供99.9999999999%（12个9）的数据持久性，99.995%的数据可用性。多种存储类型供选择，全面优化存储成本。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=969314282&amp;bvid=BV1dp4y1v7K2&amp;cid=244637851&amp;page=24" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="阿里-OSS"><a href="#阿里-OSS" class="headerlink" title="阿里 OSS"></a>阿里 OSS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>阿里云对象存储OSS（Object Storage Service）为您提供基于网络的数据存取服务。使用OSS，您可以通过网络随时存储和调用包括文本、图片、音视频在内的各类数据文件</li><li>创建Bucket，并将文件上传至Bucket。上传完成后，将文件（Object）下载至本地或者通过生成签名URL的方式将文件分享给第三方，供其下载或预览</li></ul><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><ul><li>登录阿里云控制台 【产品】-【存储】-【对象存储 OSS】</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220329124922164.png" alt="OSS 入口"></p><h2 id="开通-OSS"><a href="#开通-OSS" class="headerlink" title="开通 OSS"></a>开通 OSS</h2><p><img src="http://blog.adalucky.com/notes/ada/image-20220329130039486.png" alt="开通 OSS"></p><h2 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h2><ul><li>当前截图时价格，我主要是做一些头像照片的存储，可以选低频的，一个月估计不会到 1 个 G，8 分钱就能解决</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220329130645570.png" alt="产品定价"></p><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><h2 id="创建-Bucket"><a href="#创建-Bucket" class="headerlink" title="创建 Bucket"></a>创建 Bucket</h2><ul><li>地域：这里建议选择和自己服务器节点近的地域</li><li>存储类型：选择低频访问（便宜点，这个根据实际情况，如果访问量比较大的话还是选标准）</li><li>同城冗余存储：不开通要收钱,OSS 将您的数据以冗余的方式存储在同一区域（Region）的 3 个可用区（Zone）中。提供机房级容灾能力，能提高您的数据可用性</li><li>版本控制：选择不开通，这个是针对需要回滚的才选择开通，需要额外收费（我们这里涉及不到）</li><li>读写权限尽量选择公共读写</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220408225245229.png" alt="创建Bucket"></p><h2 id="上传体验"><a href="#上传体验" class="headerlink" title="上传体验"></a>上传体验</h2><ul><li>在刚才的Bucket 下新建一个目录用于存放图片（为资源归类）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220408230239651.png" alt="上传体验"></p><h2 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h2><ul><li>Access Key:阿里系下有非常多的产品,所有产品的控制权限通过主账户<code>Access Key</code>进行控制,该账户可以访问所有的产品</li><li>RAM:<code>RAM</code>可以有多个，可单独为<code>RAM</code>配置拥有的产品控制权限,基于安全考虑我们用 RAM </li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220409120025448.png" alt="权限控制"></p><h3 id="创建用户组"><a href="#创建用户组" class="headerlink" title="创建用户组"></a>创建用户组</h3><ul><li>通过 RAM 入口进入，创建用户组，然后给用户组分配权限，最后再创建用户给用户分配用户组</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220409115836093.png" alt="创建用户组"></p><h3 id="用户组分配权限"><a href="#用户组分配权限" class="headerlink" title="用户组分配权限"></a>用户组分配权限</h3><ul><li>给刚才创建的用户组指定可以对阿里云的那些产品进行权限控制，这里就用我们的 OSS 相关内容</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220409120633910.png" alt="用户组分配权限"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><ul><li>刚才已经准备好了用户组，现在需要准备用一个用户，然后把用户的权限指定为刚才的用户组，这样该用户就拥有了 OSS 相关的权限了</li><li>创建后记得下载 CSV 文件保存好账户信息</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220409121734148.png" alt="创建用户"></p><h3 id="分配用户组"><a href="#分配用户组" class="headerlink" title="分配用户组"></a>分配用户组</h3><ul><li>这一步的目的是将用户绑定到之前的用户组里面，这样用户就能使用用户组的权限了（也可直接单独给用户分配权限，这里不做记录了，我个人还是推荐以用户组进行维护）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220409122504700.png" alt="分配用户组"></p><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><ul><li>导入的版本根据官方给的文档进行导入，最好不要私自修改任意版本号 我尝试的把 sdk 升级到最新的后面 做 Bucket 空间判断的时候有返回错误（可能是版本于其它地方有不匹配的）</li><li>Gradle导入：<code>implementation("com.aliyun.oss:aliyun-sdk-oss:3.10.2")</code></li><li>如果使用的是Java 9及以上的版本，则需要添加jaxb相关依赖</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"javax.xml.bind:jaxb-api:2.3.1"</span><span class="token punctuation">)</span><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"javax.activation:activation:1.1.1"</span><span class="token punctuation">)</span><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.glassfish.jaxb:jaxb-runtime:2.3.3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="配置-yml"><a href="#配置-yml" class="headerlink" title="配置 yml"></a>配置 yml</h2><ul><li>将我们刚才创建用户的 key 配置进来</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 阿里 OSS 配置</span><span class="token comment"># 阿里 OSS 配置</span><span class="token key atrule">alioss</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> yourEndpoint  <span class="token key atrule">accessKeyId</span><span class="token punctuation">:</span> yourAccessKeyId  <span class="token key atrule">accessKeySecret</span><span class="token punctuation">:</span> yourAccessKeySecret  <span class="token key atrule">bucketName</span><span class="token punctuation">:</span> yourBucketName  <span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>alioss.bucketName<span class="token punctuation">}</span>.$<span class="token punctuation">{</span>alioss.endpoint<span class="token punctuation">}</span>/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h2><ul><li>将配置文件中的内容读取到实体中</li><li>ConfigurationProperties 用于读取 yml 配置文件 prefix = “alioss” 用于指定前置</li><li>实体中的属性名需要和 yml 中保持一致</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 读取 阿里 OSS 的配置到实体中 * @since 2022/4/9 13:13 */</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"alioss"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssEntity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> endpoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeyId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeySecret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul><li>创建一个单元测试类，验证一下实体对象有没有把 yml 中的值赋值到属性上</li><li>有可能单元测试读取不到 yml 配置文件，我是直接再单元测试中新建了一个 application.yml 和 main 下面的内容一致</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">OssEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">OssEntityTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">OssEntity</span> ossEntity<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">ossEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ossEntity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220409145717615.png" alt="单元测试验证"></p><h1 id="AIP-控制"><a href="#AIP-控制" class="headerlink" title="AIP 控制"></a>AIP 控制</h1><ul><li>参考阿里官方的 OSS 开发手册,里面有非常详细的示例和说明</li><li>接口中定义方法，实现类具体实现</li><li>实现类需要加上 @Service 注解</li><li>实现类也实现了 InitializingBean，实现 afterPropertiesSet 方法，创建这个 Bean 后对参数进行赋值方便后面统一使用</li></ul><h2 id="创建-Bucket-1"><a href="#创建-Bucket-1" class="headerlink" title="创建 Bucket"></a>创建 Bucket</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">BusinessException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">ResultCode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">OssEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OssService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>logger<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSClientBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">CreateBucketRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">StorageClass</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description * @since 2022/4/9 15:11 */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"OssServiceImpl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OssService</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">OssEntity</span> ossEntity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> endpoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeyId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeySecret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">;</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token comment">/**     * 实现 InitializingBean 的方法，在创建初始化 Ali0ssServiceImpl 对象后需要做的事     *     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        endpoint <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accessKeyId <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accessKeySecret <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bucketName <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        url <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 创建 Bucket 存储空间     *     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">createBucket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建OSSClient实例。</span>        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断存储空间bucket是否存在。如果返回值为true，则存储空间存在，如果返回值为false，则存储空间不存在。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient<span class="token punctuation">.</span><span class="token function">doesBucketExist</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Slf4j</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Bucket【"</span> <span class="token operator">+</span> bucketName <span class="token operator">+</span> <span class="token string">"】已存在,无法重复创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span>                    <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>BUCKET_ALREADY_EXIST<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>BUCKET_ALREADY_EXIST<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">//设置为低频后-&gt;创建-&gt;关闭-&gt;返回 ok</span>            <span class="token class-name">CreateBucketRequest</span> createBucketRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateBucketRequest</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span>            createBucketRequest<span class="token punctuation">.</span><span class="token function">setStorageClass</span><span class="token punctuation">(</span><span class="token class-name">StorageClass</span><span class="token punctuation">.</span>IA<span class="token punctuation">)</span><span class="token punctuation">;</span>            ossClient<span class="token punctuation">.</span><span class="token function">createBucket</span><span class="token punctuation">(</span>createBucketRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"bucketName"</span><span class="token punctuation">,</span> bucketName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"StorageClass"</span><span class="token punctuation">,</span><span class="token class-name">StorageClass</span><span class="token punctuation">.</span>IA<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul><li>上传文件的时候有大小限制需要调整一下，不然SpringBoot默认的是单个文件 1MB，整体是 10MB</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 上传文件大小限制：单个 50MB 整体 100MB </span><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">servlet</span><span class="token punctuation">:</span>    <span class="token key atrule">multipart</span><span class="token punctuation">:</span>      <span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 50MB      <span class="token key atrule">max-request-size</span><span class="token punctuation">:</span> 100MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><ul><li>OssService 接口中先定义方法</li><li>实现类 url 用于返回给前端</li><li>url 是在 yml 中变量组合起来的 <code>url: https://${alioss.bucketName}.${alioss.endpoint}/</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">BusinessException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">ResultCode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">OssEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OssService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>logger<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span>OSS<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span></span><span class="token class-name">OSSClientBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">CreateBucketRequest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">StorageClass</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description * @since 2022/4/9 15:11 */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"OssServiceImpl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OssService</span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">OssEntity</span> ossEntity<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> endpoint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeyId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKeySecret<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token comment">/**     * 实现 InitializingBean 的方法，在创建初始化 Ali0ssServiceImpl 对象后需要做的事     *     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        endpoint <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accessKeyId <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getAccessKeyId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accessKeySecret <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getAccessKeySecret</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bucketName <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getBucketName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        url <span class="token operator">=</span> ossEntity<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 上传文件     *     * @param file 上传的文件对象     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> objectName <span class="token operator">=</span> <span class="token function">setObjectName</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建OSSClient实例。</span>        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">//上传文件</span>            ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Slf4j</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"上传的文件流获取异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ossClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> url<span class="token operator">+</span>objectName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token class-name">String</span> <span class="token function">setObjectName</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> directory <span class="token operator">=</span> split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> directory <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><ul><li>前端控制器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>response<span class="token punctuation">.</span></span><span class="token class-name">Result</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>alioss<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OssService</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Api</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiOperation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description OSS 前端控制器 * @since 2022/4/9 20:46 */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/oss"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"OSS"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OssController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">OssService</span> ossService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"上传文件"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"上传文件到阿里云 OSS 上"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token class-name">Result</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ossService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图片无法预览"><a href="#图片无法预览" class="headerlink" title="图片无法预览"></a>图片无法预览</h3><ul><li>针对上面上传的图片无法进行预览，每次访问连接都是下载图片，主要有两种方式进行解决：①绑定一个自己的域名 ②上传的时候指定文件的类型 Content-Type</li><li>这里为了方便直接绑定了自己的域名（如果没有域名的只能用第二种方式了）</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(方式二核心示例)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如果想要实现图片预览的效果,一定要设置以下几点  1.设置文件的ACL(权限)  要么是公共读,要么是公共读写  2.一定要设置文本类型(image/jpg)</span>ObjectMetadata objectMetadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置公共读权限</span>objectMetadata<span class="token punctuation">.</span><span class="token function">setObjectAcl</span><span class="token punctuation">(</span>CannedAccessControlList<span class="token punctuation">.</span>PublicRead<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置文件类型</span>objectMetadata<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token function">getcontentType</span><span class="token punctuation">(</span>fileType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//put到 Bucket</span>  ossClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> fileName<span class="token punctuation">,</span> inputStream<span class="token punctuation">,</span> objectMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/**     * Description: 判断OSS服务文件上传时文件的contentType     *     * @param FilenameExtension 文件后缀     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getcontentType</span><span class="token punctuation">(</span><span class="token parameter">String FilenameExtension</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".bmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"image/bmp"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".gif"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"image/gif"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".jpeg"</span><span class="token punctuation">)</span> <span class="token operator">||</span>                FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">)</span> <span class="token operator">||</span>                FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"image/jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"text/html"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"text/plain"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".vsd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"application/vnd.visio"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".pptx"</span><span class="token punctuation">)</span> <span class="token operator">||</span>                FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".ppt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"application/vnd.ms-powerpoint"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".docx"</span><span class="token punctuation">)</span> <span class="token operator">||</span>                FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".doc"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"application/msword"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>FilenameExtension<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">".xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"text/xml"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"image/jpg"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h4 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h4><ul><li>新增域名并自动添加到 CNAME 映射</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220410160649987.png" alt="新增域名"></p><hr><ul><li>Bucket 开启自定义域名(只需要对其中一个文件开启后全局生效)</li><li>开启自定义域名后可以看到就会多了类型 image 这样就可以通过 url 进行预览了，而不是下载</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220410164358571.png" alt="开启自定义域名"></p><h4 id="SSL-证书"><a href="#SSL-证书" class="headerlink" title="SSL 证书"></a>SSL 证书</h4><ul><li>阿里云有免费的证书一年 20 个</li><li>先免费购买 -&gt; 创建 -&gt; 申请 -&gt; 域名解析 -&gt; 证书托管</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220410163913112.png" alt="效果"></p><hr><ul><li>免费购买</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220410161044007.png" alt="购买证书"></p><hr><ul><li>创建+申请</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220410162120264.png" alt="创建并申请证书"></p><hr><ul><li>证书域名解析</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220410162931978.png" alt="证书域名解析"></p><hr><ul><li>证书托管</li></ul><p><img src="https://blog.adalucky.com/notes/ada/image-20220410163632654.png" alt="证书托管"></p><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ul><li>我自己其实并没事去实现，因为当前我的项目还没涉及到 OSS 对象需要下载，先做个示例记录下</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 下载文件     *     * @param fileName     * @throws IOException     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// &lt;yourObjectName&gt;从OSS下载文件时需要指定包含文件后缀在内的完整路径，例如abc/efg/123.jpg。</span>        <span class="token class-name">String</span> objectName <span class="token operator">=</span> fileName<span class="token punctuation">;</span>        <span class="token comment">// 创建OSSClient实例。</span>        <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用ossClient.getObject返回一个OSSObject实例，该实例包含文件内容及文件元信息。</span>        <span class="token class-name">OSSObject</span> ossObject <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> objectName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用ossObject.getObjectContent获取文件输入流，可读取此输入流获取其内容。</span>        <span class="token class-name">InputStream</span> content <span class="token operator">=</span> ossObject<span class="token punctuation">.</span><span class="token function">getObjectContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>content <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>line <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 数据读取完成后，获取的流必须关闭，否则会造成连接泄漏，导致请求无连接可用，程序无法正常工作。</span>            content<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 关闭OSSClient。</span>        ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="列举文件"><a href="#列举文件" class="headerlink" title="列举文件"></a>列举文件</h2><ul><li>我自己其实并没事去实现，因为当前我的项目还没涉及到 OSS 对象需要列举展示，先做个示例记录下</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 列举文件    */</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">// 创建OSSClient实例。</span>       <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// ossClient.listObjects返回ObjectListing实例，包含此次listObject请求的返回结果。</span>       <span class="token class-name">ObjectListing</span> objectListing <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">listObjects</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// objectListing.getObjectSummaries获取所有文件的描述信息。</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">OSSObjectSummary</span> objectSummary <span class="token operator">:</span> objectListing<span class="token punctuation">.</span><span class="token function">getObjectSummaries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" - "</span> <span class="token operator">+</span> objectSummary<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span>                   <span class="token string">"(size = "</span> <span class="token operator">+</span> objectSummary<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token comment">// 关闭OSSClient。</span>       ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><ul><li>前端控制器</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"删除文件"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"根据文件名删除 Bucket 内的文件"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete"</span><span class="token punctuation">)</span><span class="token class-name">Result</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> ossService<span class="token punctuation">.</span><span class="token function">deleteFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实现类</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 删除文件    *    * @param fileName 需要删除的文件    * @return 封装的 Result    */</span>   <span class="token annotation punctuation">@Override</span>   <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">deleteFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment">//文件名为空的话抛出自定义异常</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span>                   <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>PARAM_IS_BLANK<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                   <span class="token class-name">ResultCode</span><span class="token punctuation">.</span>PARAM_IS_BLANK<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>           <span class="token comment">// 创建OSSClient实例。</span>           <span class="token class-name">OSS</span> ossClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OSSClientBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">,</span> accessKeyId<span class="token punctuation">,</span> accessKeySecret<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment">// 删除文件。</span>               ossClient<span class="token punctuation">.</span><span class="token function">deleteObject</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">OSSException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token class-name">Slf4j</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"确认文件名是否存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>               ossClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"删除文件成功"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;阿里云对象存储OSS（Object Storage Service）是一款海量、安全、低成本、高可靠的云存储服务，可提供99.9999999999%（12个9）的数据持久性，99.995%的数据可用性。多种存储类型供选择，全面优化存储成本。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="VUE" scheme="https://www.adalucky.com/tags/VUE/"/>
    
  </entry>
  
  <entry>
    <title>restructure</title>
    <link href="https://www.adalucky.com/auto/restructure/"/>
    <id>https://www.adalucky.com/auto/restructure/</id>
    <published>2022-03-18T14:51:00.000Z</published>
    <updated>2022-06-13T14:43:37.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化构建开源工具。它使用一种基于Groovy的特定领域<a href="https://baike.baidu.com/item/%E8%AF%AD%E8%A8%80/72744">语言</a>(DSL)来声明项目设置，也增加了基于Kotlin语言的kotlin-based DSL，抛弃了基于XML的各种繁琐配置。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>环境简介：</p><ul><li>之前用的 SpringBoot 2.3.12 + JDK11 + Maven 来构建的，这里做了一次升级，主要记录升级中遇到的问题和解决方法后期好参考</li><li>JDK 17.02</li><li>Gradle 7.4.1</li><li>SpingBoot 2.6.4</li><li>IDEA 2021.3</li></ul><p><a href="https://blog.csdn.net/weixin_40910372/article/details/107721937" target="_blank" class="LinkCard" style="text-decoration: none;">flyway配置参考</a></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=679429504&amp;bvid=BV11m4y1R7wU&amp;cid=518606402&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>注意注意如果你的磁盘是<code>ExFAT 格式</code>是无法创建 gradle 工程的,这是一个官方一致存在的问题也是之前困扰了我很久，因此你需要在其它磁盘上新建</li><li>Gradle 是一个比 maven 更加先进的构建工具，经过体验觉得配置方面比 maven 的 pom.xml 要简洁很多，构建速度也有明显的提升</li><li>本次笔记主要用于记录将我刚写的测试平台由原来的 maven 换成 gradle 的一些流程</li><li>本次还将原来的 jdk11 换成了 jdk17</li><li>前提需要在本地安装 jdk17 和 gradle，本次使用的都是当时最新版本 jdk17.0.2  gradle7.4.1</li></ul><h2 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h2><ul><li>这里都是用命令操作，因为 IDEA 如果新建一个 gradle 工程默认会使用它当前的版本，我觉得不是最新的，我想用自己的（当然也可以通过配置指定自己的，但是这样如果拉取了别人的项目，别使用的版本和我们指定的版本不一致所以就可能会有一些冲突）</li><li>本地新建一个文件夹如 automation，然后用 IDEA 打开</li><li>在当前 automation 下新建一个 common 文件夹 <code>mkdir common</code></li><li>新建文件 <code> touch settings.gradle.kts</code> （gradle 有两种DSL，领域特定语言去定义它的脚本，一种是早期的 Groovy，在后期新增了对Kotlin 语言的支持定义脚本，也就是这里的<code>kts</code>）</li><li>执行初始化 <code>gradle wrapper</code>  gradle wrapper 命令会帮我们把 geadle 重新包一层，用 gradlew 命令去替代 gradle 命令，如果我们后期需要更新我们项目的 gradle 版本只需要更新 wrapper 里面的gradle-wrapper.properties，这样我们就可以在不同的版本里面随意切换，并且我们的 wrapper 被提交到代码仓库以后别人也会只用这个 wrapper 可以防止版本不同造成的一些问题 </li><li>注意事项：导入的时候应该选第二个从外部模型导入 <code>Import module from external model</code> 如果选第一个会导致你用 Gradle 管理 module 的方式和 IDEA管理 module 方式之间的一些冲突 </li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220314183002863.png" alt="快速搭建"></p><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><ul><li>settings.gradle.kts</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">rootProject<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"common"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>build.gradle.kts (先创建这个文件，该文件主要构建的配置相关内容)</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">plugins<span class="token punctuation">{</span>    java<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="模块依赖"><a href="#模块依赖" class="headerlink" title="模块依赖"></a>模块依赖</h2><ul><li>参考：<a href="https://www.cnblogs.com/6b7b5fc3/p/14471256.html">多模块依赖</a></li><li>描述：我当前有个项目叫做 <code>automation</code> 项目下目前有两个模块，<code>common</code> <code>manage</code> 后期还会有其它的模块</li><li>需求：将 <code>automation</code> 当做一个顶层项目管理公共的依赖配置项，common 做为子模块的基础服务提供基础的项目配置和一些工具类，manage 需要依赖于 common</li><li>实现重点：<code>包名前缀和 group 保持一致</code>  <code>automation 中用 include 包含</code> <code>common 需要用添加tasks.bootJar 和 tasks.jar</code> <code>manage中 implementation(project(":common"))</code></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220319150335227.png" alt="模块依赖"></p><h2 id="配置参考项"><a href="#配置参考项" class="headerlink" title="配置参考项"></a>配置参考项</h2><h3 id="automation"><a href="#automation" class="headerlink" title="automation"></a>automation</h3><ul><li>父项目的配置</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(settings.gradle.kts)</div></div><div class="fold"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">rootProject<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"automation"</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">"common"</span><span class="token punctuation">)</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token string">"manage"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(build.gradle.kts)</div></div><div class="fold"><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>KotlinCompileplugins <span class="token punctuation">{</span>    java    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot"</span><span class="token punctuation">)</span> version <span class="token string">"2.6.4"</span>    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"io.spring.dependency-management"</span><span class="token punctuation">)</span> version <span class="token string">"1.0.11.RELEASE"</span>    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">"jvm"</span><span class="token punctuation">)</span> version <span class="token string">"1.6.10"</span>    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">"plugin.spring"</span><span class="token punctuation">)</span> version <span class="token string">"1.6.10"</span><span class="token punctuation">}</span>group <span class="token operator">=</span> <span class="token string">"com.adalucky"</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span>java<span class="token punctuation">.</span>sourceCompatibility <span class="token operator">=</span> JavaVersion<span class="token punctuation">.</span>VERSION_17configurations <span class="token punctuation">{</span>    compileOnly <span class="token punctuation">{</span>        <span class="token function">extendsFrom</span><span class="token punctuation">(</span>configurations<span class="token punctuation">.</span>annotationProcessor<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span>        <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"https://maven.aliyun.com/repository/public"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//公共依赖的配置，apply 需要在 dependencies 前面</span>subprojects <span class="token punctuation">{</span>    apply <span class="token punctuation">{</span>        <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot"</span><span class="token punctuation">)</span>        <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"io.spring.dependency-management"</span><span class="token punctuation">)</span>        <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"org.jetbrains.kotlin.jvm"</span><span class="token punctuation">)</span>        <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"org.jetbrains.kotlin.plugin.spring"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-web"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-security"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.fasterxml.jackson.module:jackson-module-kotlin"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.jetbrains.kotlin:kotlin-reflect"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.jetbrains.kotlin:kotlin-stdlib-jdk8"</span><span class="token punctuation">)</span>        <span class="token function">runtimeOnly</span><span class="token punctuation">(</span><span class="token string">"mysql:mysql-connector-java"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.baomidou:mybatis-plus-boot-starter:3.5.1"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.github.xiaoymin:knife4j-spring-boot-starter:3.0.3"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"p6spy:p6spy:3.9.1"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.alibaba:easyexcel:2.2.6"</span><span class="token punctuation">)</span>        <span class="token comment">//easyExcel jdk17 报错   https://blog.csdn.net/weixin_42792301/article/details/121456156</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.burningwave:core:12.47.0"</span><span class="token punctuation">)</span>        <span class="token function">compileOnly</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok"</span><span class="token punctuation">)</span>        <span class="token function">developmentOnly</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-devtools"</span><span class="token punctuation">)</span>        <span class="token function">runtimeOnly</span><span class="token punctuation">(</span><span class="token string">"mysql:mysql-connector-java"</span><span class="token punctuation">)</span>        <span class="token function">annotationProcessor</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok"</span><span class="token punctuation">)</span>        <span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-test"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    tasks<span class="token punctuation">.</span>withType<span class="token operator">&lt;</span>KotlinCompile<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        kotlinOptions <span class="token punctuation">{</span>            freeCompilerArgs <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"-Xjsr305=strict"</span><span class="token punctuation">)</span>            jvmTarget <span class="token operator">=</span> <span class="token string">"17"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    tasks<span class="token punctuation">.</span>withType<span class="token operator">&lt;</span>Test<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h3 id="common"><a href="#common" class="headerlink" title="common"></a>common</h3><ul><li>基础模块，这里主要是 mybatis-plus 的代码生成需要的</li><li>需要加入 tasks.bootJar  tasks.jar</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(build.gradle.kts)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js">repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span>        <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"https://maven.aliyun.com/repository/public"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    <span class="token function">annotationProcessor</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok"</span><span class="token punctuation">)</span>    <span class="token function">compileOnly</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok"</span><span class="token punctuation">)</span>    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.baomidou:mybatis-plus-generator:3.5.1"</span><span class="token punctuation">)</span>    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.apache.velocity:velocity-engine-core:2.3"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>tasks<span class="token punctuation">.</span>bootJar <span class="token punctuation">{</span>    enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span>tasks<span class="token punctuation">.</span>jar <span class="token punctuation">{</span>    enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h3 id="manage"><a href="#manage" class="headerlink" title="manage"></a>manage</h3><ul><li>后台管理模块，主要是需要用 implementation 关联依赖的项目</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(build.gradle.kts)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js">repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span>        <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"https://maven.aliyun.com/repository/public"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies<span class="token punctuation">{</span>    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">":common"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">annotationProcessor</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok"</span><span class="token punctuation">)</span>    <span class="token function">compileOnly</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="优雅编程"><a href="#优雅编程" class="headerlink" title="优雅编程"></a>优雅编程</h1><h2 id="自定义-git-命令"><a href="#自定义-git-命令" class="headerlink" title="自定义 git 命令"></a>自定义 git 命令</h2><ul><li>当前环境为 Mac，在全局配置新增一个方法示例如下（配置后需要执行 source /etc/profile 最好是在 ~/.zshrc 中添加 source /etc/profile 大致就是这个意思，不过每个人的电脑用的 zsh 不一样）</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token keyword">function</span> <span class="token function-name function">gacp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token assign-left variable">log</span><span class="token operator">=</span><span class="token variable">$1</span> <span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token variable">$2</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -n <span class="token string">"<span class="token variable">$log</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"必须输入提交说明"</span>        <span class="token builtin class-name">return</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -n <span class="token string">"<span class="token variable">$files</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token string">"."</span>    <span class="token keyword">fi</span>    <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>    <span class="token function">git</span> commit -a -m <span class="token string">"<span class="token variable">$1</span>"</span>    <span class="token function">git</span> push  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ul><li>流程：在 TDD 的模式下是测试驱动开发，先写单元测试，再写业务逻辑代码，</li><li>添加注解 @SpringBootTest @AutoConfigureMockMvc</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(示例代码)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">package</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>AutoConfigureMockMvc<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>MockMvc<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span>MockMvcRequestBuilders<span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>jsonPath<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span>MockMvcResultMatchers<span class="token punctuation">.</span>status<span class="token punctuation">;</span>@SpringBootTest@AutoConfigureMockMvc<span class="token keyword">class</span> <span class="token class-name">SysUserControllerTest</span> <span class="token punctuation">{</span>    @Autowired    MockMvc mockMvc<span class="token punctuation">;</span>    @Test    <span class="token keyword">void</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        mockMvc                <span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/user/list"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.code"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.success"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220319155016447.png" alt="MockMvc单元测试"></p><h2 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h2><ul><li>我们需要对 SpringBoot 做一个心跳检查，开放一个 get 请求，保证服务是正常启动的</li><li>引入依赖 <code>implementation("org.springframework.boot:spring-boot-starter-actuator")</code></li><li>get请求 ip:port/actuator/health 如果正常的话会返回 {“status”:”UP”}</li><li>代码示例如下：其实和上面的单元测试是一样的</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureMockMvc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span>get<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>jsonPath<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span>status<span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 心跳检查 * @since 2022/3/19 15:57 */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmokeTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">checkHeartbeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        mockMvc                <span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/actuator/health"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.status"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">"UP"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="githooks"><a href="#githooks" class="headerlink" title="githooks"></a>githooks</h2><ul><li>需求：为了保证我们每次提交的代码都是无误的，那么可以配置当我们代码通过单元测试才能提交到远程仓库，这样是一个比较好的规范</li><li>实现：①项目根目录创建 githooks 文件夹 ②该文件夹下新建 pre-commit 文件，并编写脚本 ③给该脚本赋予执行权限 ④git config 中指定文件路径（建议通过指定路径的方式，有些人是 直接用自己编写的 pre-commit 替换 .git 下的文件，这里不太推荐，因为我们的脚本可能后面还要修改，这样提交到远程后协同工作下大家都能享用最新的脚本）</li><li>pre-commit 脚本示例</li></ul><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">#!/usr/bin/env sh# 根目录下新建 githooks 文件夹，下面再新建一个 pre-commit 文件# q 静默执行不输出内容;  k keep index; u 没有被跟踪的代码会被 stash 掉git stash -qku# 执行检查，这里是用的当前项目根目录下的通过快速搭建中说的 gradle wrapper 帮我们把 geadle 重新包一层，用 gradlew 命令去替代 gradle 命令./gradlew clean check# 存储上一条命令执行的结果RESULT=$?git stash pop -qexit $RESULT# 文件需要赋予 755 可执行权限  chmod 755 githooks/pre-commit# 配置 githooks path 命令--&gt;     git config core.hooksPath githhooks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220319231531411.png" alt="githooks"></p><h2 id="flyway"><a href="#flyway" class="headerlink" title="flyway"></a>flyway</h2><ul><li><p>flyway 通过版本管理的方式，我们可以比较方便的去定义每一次数据 schema 的变更</p></li><li><p>依赖：<code>runtimeOnly("org.flywaydb:flyway-core")</code> 我这里没有指定版本，因为在 SpringBoot 的 BOM 中已经被定义过了</p></li><li><p>创建目录： src/main/resources/db/migration (这是 flyway 的默认路径)</p></li><li><p>创建 sql 文件：  项目版本号_sql号+内容.sql，例 <code>V1.0.0_1__ceract_sysuser_table.sql</code>  当前的 tag 为 1.0.0 为他执行的第一个 sql，内容是创建用户表</p></li><li><p>application.yml配置（如果没配的话可能会报 flywayInitializer 相关的错误）： </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">flyway</span><span class="token punctuation">:</span>    <span class="token key atrule">baseline-on-migrate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注意事项：①1 和 creact 之间是两个下划线，这是官方的命名规范要求，如果按照这个规范可能只会生成 flyway_schema_history表，而没有执行 sql 的内容 ②每一个迁移脚本被执行后是不可以去修改的，因为 flyway 会对整个文件做一个 MD5 然后去进行检查，第二次就不会执行了，因此有变更的话需要定义第二个版本 </p></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220320175623249.png" alt="flyway"></p><h2 id="test-containers"><a href="#test-containers" class="headerlink" title="test-containers"></a>test-containers</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li>本地需要提前安装好 docker ，确保守护进程已经启动，并已启动</li><li>我尝试过通过 <code>brew install docker</code> 但是并没发启动它的守护进程，只好安装桌面应用</li></ul><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><ul><li>需求：在单元测试中我们需要连接到测试的数据库，当然可以再 application.yml 中指定另外的 dev.yml 但是不能解决测试库也有历史数据的问题，我更加希望是每次启动单元测试的时候就会启动一个新的数据库，并且表内是没有任何数据的</li><li>实现：test-containers 能够帮助我们在启动单元测试的时候通过 java-docker 这样一个库来连接我们本地 docker socks 上，并且通过 docker 去启动对应的容器，在测试期间我们去连接这个容器，测试完毕后自动销毁</li><li>依赖：<code> testImplementation("org.testcontainers:testcontainers:1.16.3")</code> <code>testImplementation("org.testcontainers:mysql:1.16.3")</code></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="创建配置"><a href="#创建配置" class="headerlink" title="创建配置"></a>创建配置</h4><ul><li>在 test 下新建一个配置类例如 DatabaseTestConfiguration</li><li>注意添加 Wait.forListeningPort() 这样确保启动成功后再配置 DataSource</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>core</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span><span class="token class-name">HikariConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span><span class="token class-name">HikariDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>flyway<span class="token punctuation">.</span></span><span class="token class-name">FlywayDataSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>testcontainers<span class="token punctuation">.</span>containers<span class="token punctuation">.</span></span><span class="token class-name">MySQLContainer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>testcontainers<span class="token punctuation">.</span>containers<span class="token punctuation">.</span>wait<span class="token punctuation">.</span>strategy<span class="token punctuation">.</span></span><span class="token class-name">Wait</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description testcontainers 测试环境本地启动数据库 * @since 2022/3/20 19:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatabaseTestConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 创建 docker 容器对象     * initMethod = "start",destroyMethod = "stop"  初始这个 bean 时候开启，停止时销毁容器     * 根据镜像设置不同的类型，如果是 PostgreSQL 就用 PostgreSQLContainer&lt;?&gt;     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"stop"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MySQLContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">mysqlContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//   通过 docker hub 找到对应的镜像和版本号，并等待端口完全初始化完毕，不然下面配置数据源 new HikariDataSource 时容器还没完全初始化完毕会有报错</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MySQLContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">"mysql:8.0.27"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">waitingFor</span><span class="token punctuation">(</span><span class="token class-name">Wait</span><span class="token punctuation">.</span><span class="token function">forListeningPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 配置数据源信息     * FlywayDataSource flyway 也会使用这个 DataSource 进行初始化     * mysqlContainer 上面创建的容器对象     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@FlywayDataSource</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">MySQLContainer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> mysqlContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> hikariConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hikariConfig<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span>mysqlContainer<span class="token punctuation">.</span><span class="token function">getJdbcUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hikariConfig<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>mysqlContainer<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hikariConfig<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>mysqlContainer<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span>hikariConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="编写用例"><a href="#编写用例" class="headerlink" title="编写用例"></a>编写用例</h4><ul><li>编写单元测试用例，每次执行完后数据是自动销毁的，所以每次都会重新执行 flyway</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">DatabaseTestConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span></span><span class="token class-name">SexEnums</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span></span><span class="token class-name">StatusEnums</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">SysUser</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>modules<span class="token punctuation">.</span>system<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">SysUserMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureTestDatabase</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Import</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureTestDatabase</span><span class="token punctuation">.</span><span class="token class-name">Replace</span><span class="token punctuation">.</span>NONE<span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description TODO * @since 2022/3/20 19:44 */</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token comment">// 关闭 SpringBoot 默认的 H2 数据源</span><span class="token annotation punctuation">@AutoConfigureTestDatabase</span><span class="token punctuation">(</span>replace <span class="token operator">=</span> NONE<span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DatabaseTestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">SysUserMapper</span> mapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setLoginName</span><span class="token punctuation">(</span><span class="token string">"13599998888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setNikeName</span><span class="token punctuation">(</span><span class="token string">"测试save456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">SexEnums</span><span class="token punctuation">.</span>男<span class="token punctuation">)</span><span class="token punctuation">;</span>        sysUser<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">StatusEnums</span><span class="token punctuation">.</span>启用<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组合注解"><a href="#组合注解" class="headerlink" title="组合注解"></a>组合注解</h2><ul><li>需求：在上面的 test-containers 中，我们每次都需要定义三个注解来完成，可以通过自定义注解实现包含上面三个注解后，来完成一个注解替代</li><li>实现示例：每次使用的使用就是 @类名注入  <code>@Target(ElementType.TYPE)</code> <code>@Retention(RetentionPolicy.RUNTIME)</code> <code>@Documented</code> <code>@Inherited</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>core</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureTestDatabase</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Import</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureTestDatabase</span><span class="token punctuation">.</span><span class="token class-name">Replace</span><span class="token punctuation">.</span>NONE<span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 自定义的组合注解 通过 @MysqlContainerTest 完成注入（类名） * @since 2022/3/20 23:15 */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token comment">// 关闭 SpringBoot 默认的 H2 数据源</span><span class="token annotation punctuation">@AutoConfigureTestDatabase</span><span class="token punctuation">(</span>replace <span class="token operator">=</span> NONE<span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DatabaseTestConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MysqlContainerTest</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>在我们编写一个项目的时候，我们的代码其实是和我们的环境是无关的，也就是我们提交到远程仓库的时候是不应该提交我们配置文件application.yml</li><li>方案：①创建一个 application-local.yml 配置我们本地运行的环境，并把该文件添加到 .gitignore ②创建一个 application-tmeplate.yml 给出配置示例，该文件提交到远程仓库 ③创建一个 application.yml 文件用于拉取代码后参照 application-env.tmeplate.yml 进行配置 ④本地idea 指定运行环境为 local</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 指定端口</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span><span class="token comment"># spring 相关集成配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment"># flyway 配置</span>  <span class="token key atrule">flyway</span><span class="token punctuation">:</span>    <span class="token key atrule">baseline-on-migrate</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># swagger 报错配置</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">pathmatch</span><span class="token punctuation">:</span>    <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ant_path_matcher  <span class="token comment"># 数据源配置</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.p6spy.engine.spy.P6SpyDriver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>p6spy<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//192.168.1.115<span class="token punctuation">:</span>3306/data_auto_endpoint<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token comment"># Mybatis-Plus 配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> com.adalucky.enums.mysql  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>    <span class="token comment">#全局配置，主键自动增长，就不需要在每个实体类上声明了 @TableId(type = IdType.AUTO)</span>    <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto    <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> deleted  <span class="token comment"># 全局逻辑删除的实体字段名(since 3.3.0版本以上就不需要在实体中对该字段添加@TableLogic注解)</span>    <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 逻辑已删除值(默认为 1.我们改为 0)</span>    <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 逻辑未删除值(默认为 0，我们改为 1)</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token important">*:/mapper/*.xml</span>  <span class="token comment">#不定义的话 springboot 不知道你的 xml 放在哪里的</span><span class="token comment"># 日志输出配置</span><span class="token key atrule">logging</span><span class="token punctuation">:</span>  <span class="token key atrule">level</span><span class="token punctuation">:</span>    <span class="token key atrule">root</span><span class="token punctuation">:</span> info    <span class="token key atrule">com.adalucky.modules</span><span class="token punctuation">:</span> debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220323232714031.png" alt="本地文件配置"></p><h2 id="代码规范检查"><a href="#代码规范检查" class="headerlink" title="代码规范检查"></a>代码规范检查</h2><h3 id="基础配置-1"><a href="#基础配置-1" class="headerlink" title="基础配置"></a>基础配置</h3><ul><li>通过 checkstyle 进行代码的规范性检查</li><li>引入依赖插件 plugins 中引入 <code>checkstyle</code> 并在全局中进行配置 apply 和 checkstyle 最大的警告数和版本号</li><li>完整示例</li></ul><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">import</span> org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlin<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>KotlinCompileplugins <span class="token punctuation">{</span>    java    checkstyle    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot"</span><span class="token punctuation">)</span> version <span class="token string">"2.6.4"</span>    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string">"io.spring.dependency-management"</span><span class="token punctuation">)</span> version <span class="token string">"1.0.11.RELEASE"</span>    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">"jvm"</span><span class="token punctuation">)</span> version <span class="token string">"1.6.10"</span>    <span class="token function">kotlin</span><span class="token punctuation">(</span><span class="token string">"plugin.spring"</span><span class="token punctuation">)</span> version <span class="token string">"1.6.10"</span><span class="token punctuation">}</span>group <span class="token operator">=</span> <span class="token string">"com.adalucky"</span>version <span class="token operator">=</span> <span class="token string">"1.0.0"</span>java<span class="token punctuation">.</span>sourceCompatibility <span class="token operator">=</span> JavaVersion<span class="token punctuation">.</span>VERSION_17configurations <span class="token punctuation">{</span>    compileOnly <span class="token punctuation">{</span>        <span class="token function">extendsFrom</span><span class="token punctuation">(</span>configurations<span class="token punctuation">.</span>annotationProcessor<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>repositories <span class="token punctuation">{</span>    maven <span class="token punctuation">{</span>        <span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"https://maven.aliyun.com/repository/public"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">mavenLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>subprojects <span class="token punctuation">{</span>    apply <span class="token punctuation">{</span>        <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot"</span><span class="token punctuation">)</span>        <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"io.spring.dependency-management"</span><span class="token punctuation">)</span>        <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"org.jetbrains.kotlin.jvm"</span><span class="token punctuation">)</span>        <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"org.jetbrains.kotlin.plugin.spring"</span><span class="token punctuation">)</span>        <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token string">"checkstyle"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dependencies <span class="token punctuation">{</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-web"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-security"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-actuator"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.fasterxml.jackson.module:jackson-module-kotlin"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.jetbrains.kotlin:kotlin-reflect"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.jetbrains.kotlin:kotlin-stdlib-jdk8"</span><span class="token punctuation">)</span>        <span class="token function">runtimeOnly</span><span class="token punctuation">(</span><span class="token string">"mysql:mysql-connector-java"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.baomidou:mybatis-plus-boot-starter:3.5.1"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.baomidou:mybatis-plus-boot-starter-test:3.5.1"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.github.xiaoymin:knife4j-spring-boot-starter:3.0.3"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"p6spy:p6spy:3.9.1"</span><span class="token punctuation">)</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.alibaba:easyexcel:2.2.6"</span><span class="token punctuation">)</span>        <span class="token comment">//easyExcel jdk17 报错   https://blog.csdn.net/weixin_42792301/article/details/121456156</span>        <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"org.burningwave:core:12.47.0"</span><span class="token punctuation">)</span>        <span class="token function">compileOnly</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok"</span><span class="token punctuation">)</span>        <span class="token function">developmentOnly</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-devtools"</span><span class="token punctuation">)</span>        <span class="token function">runtimeOnly</span><span class="token punctuation">(</span><span class="token string">"mysql:mysql-connector-java"</span><span class="token punctuation">)</span>        <span class="token function">annotationProcessor</span><span class="token punctuation">(</span><span class="token string">"org.projectlombok:lombok"</span><span class="token punctuation">)</span>        <span class="token function">testImplementation</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot:spring-boot-starter-test"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    checkstyle <span class="token punctuation">{</span>        maxWarnings <span class="token operator">=</span> <span class="token number">0</span>        toolVersion <span class="token operator">=</span> <span class="token string">"10.0"</span>    <span class="token punctuation">}</span>    tasks<span class="token punctuation">.</span>withType<span class="token operator">&lt;</span>KotlinCompile<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        kotlinOptions <span class="token punctuation">{</span>            freeCompilerArgs <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"-Xjsr305=strict"</span><span class="token punctuation">)</span>            jvmTarget <span class="token operator">=</span> <span class="token string">"17"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    tasks<span class="token punctuation">.</span>withType<span class="token operator">&lt;</span>Test<span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token function">useJUnitPlatform</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="规范配置"><a href="#规范配置" class="headerlink" title="规范配置"></a>规范配置</h3><ul><li>在父项目根目录下新建一个 config/ckeckstyle/checkstyle.xml 文件，内容如下</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?&gt;</span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">module</span> <span class="token name">PUBLIC</span>        <span class="token string">"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"</span>        <span class="token string">"https://checkstyle.org/dtds/configuration_1_3.dtd"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Checker<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>charset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>severity<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>warning<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileExtensions<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java, properties, xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BeforeExecutionExclusionFileFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileNamePattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module\-info\.java$<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FileTabCharacter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eachLine<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LineLength<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fileExtensions<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ignorePattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>^package.*|^import.*|a href|href|http://|https://|ftp://<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TreeWalker<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UnusedImports<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OuterTypeFilename<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IllegalTokenText<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>STRING_LITERAL, CHAR_LITERAL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Consider using special escape sequence instead of octal value or Unicode escaped value.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AvoidEscapedUnicodeCharacters<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowEscapesForControlCharacters<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowByTailComment<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowNonPrintableEscapes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--        不应使用 '.*' 形式的导入 - org.springframework.web.bind.annotation.* 。 [AvoidStarImport] --&gt;</span>        <span class="token comment">&lt;!--                &lt;module name="AvoidStarImport"/&gt;        --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OneTopLevelClass<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NoLineWrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PACKAGE_DEF, IMPORT, STATIC_IMPORT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmptyBlock<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TEXT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LeftCurly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF, INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH,             LITERAL_DEFAULT, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY,             LITERAL_WHILE, METHOD_DEF, OBJBLOCK, STATIC_INIT, RECORD_DEF, COMPACT_CTOR_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RightCurly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RightCurlySame<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RightCurly<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RightCurlyAlone<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>alone<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF, COMPACT_CTOR_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SuppressionXpathSingleFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RightCurlyAlone<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//RCURLY[parent::SLIST[count(./*)=1] or preceding-sibling::*[last()][self::LCURLY]]<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WhitespaceAfter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, DO_WHILE<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WhitespaceAround<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowEmptyConstructors<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowEmptyLambdas<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowEmptyMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowEmptyTypes<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowEmptyLoops<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ignoreEnhancedForColon<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE,            EQUAL, GE, GT, LAMBDA, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,            LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN,            QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ws.notFollowed<span class="token punctuation">"</span></span>                     <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WhitespaceAround: <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> is not followed by whitespace. Empty blocks may only be represented as <span class="token punctuation">'</span>{}<span class="token punctuation">'</span> when not part of a multi-block statement (4.1.3)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ws.notPreceded<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>WhitespaceAround: <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> is not preceded with whitespace.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OneStatementPerLine<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MultipleVariableDeclarations<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ArrayTypeStyle<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MissingSwitchDefault<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>FallThrough<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UpperEll<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ModifierOrder<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmptyLineSeparator<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF, RECORD_DEF, COMPACT_CTOR_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowNoEmptyLineBetweenFields<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowMultipleEmptyLinesInsideClassMembers<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowMultipleEmptyLines<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrapDot<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DOT<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nl<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrapComma<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>COMMA<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EOL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrapEllipsis<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ELLIPSIS<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EOL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrapArrayDeclarator<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ARRAY_DECLARATOR<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EOL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SeparatorWrapMethodRef<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>METHOD_REF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nl<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PackageName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>^[a-z]+(\.[a-z][a-z0-9]*)*$<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Package name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TypeName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, RECORD_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Type name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MemberName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>^[a-z][a-z0-9][a-zA-Z0-9]*$<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Member name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ParameterName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>^[a-z]([a-z0-9][a-zA-Z0-9]*)?$<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Parameter name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LambdaParameterName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>^[a-z]([a-z0-9][a-zA-Z0-9]*)?$<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Lambda parameter name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CatchParameterName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>^[a-z]([a-z0-9][a-zA-Z0-9]*)?$<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Catch parameter name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LocalVariableName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>^[a-z]([a-z0-9][a-zA-Z0-9]*)?$<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Local variable name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PatternVariableName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>^[a-z]([a-z0-9][a-zA-Z0-9]*)?$<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Pattern variable name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ClassTypeParameterName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Class type name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RecordTypeParameterName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Record type name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MethodTypeParameterName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Method type name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NoFinalizer<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GenericWhitespace<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ws.followed<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GenericWhitespace <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> is followed by whitespace.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ws.preceded<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GenericWhitespace <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> is preceded with whitespace.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ws.illegalFollow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GenericWhitespace <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> should followed by whitespace.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ws.notPreceded<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GenericWhitespace <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> is not preceded with whitespace.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Indentation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>basicOffset<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>braceAdjustment<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>caseIndent<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>throwsIndent<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lineWrappingIndentation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>arrayInitIndent<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AbbreviationAsWordInName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ignoreFinal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowedAbbreviationLength<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF, PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, PATTERN_VARIABLE_DEF, RECORD_DEF, RECORD_COMPONENT_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OverloadMethodsDeclarationOrder<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VariableDeclarationUsageDistance<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MethodParamPad<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF, SUPER_CTOR_CALL, ENUM_CONSTANT_DEF, RECORD_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NoWhitespaceBefore<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>COMMA, SEMI, POST_INC, POST_DEC, DOT, LABELED_STAT, METHOD_REF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowLineBreaks<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ParenPad<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF, EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL, METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA, RECORD_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>OperatorWrap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>option<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NL<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF, TYPE_EXTENSION_AND <span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AnnotationLocation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AnnotationLocationMostCases<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span>                      <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, RECORD_DEF, COMPACT_CTOR_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AnnotationLocation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AnnotationLocationVariables<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARIABLE_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>allowSamelineMultipleAnnotations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NonEmptyAtclauseDescription<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>InvalidJavadocPosition<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JavadocTagContinuationIndentation<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token comment">&lt;!--    Javadoc的第一句缺少一个结SummaryJavadoc    --&gt;</span>        <span class="token comment">&lt;!--        &lt;module name="SummaryJavadoc"&gt;--&gt;</span>        <span class="token comment">&lt;!--            &lt;property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/&gt;--&gt;</span>        <span class="token comment">&lt;!--        &lt;/module&gt;--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>JavadocParagraph<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>RequireEmptyLineBeforeBlockTagGroup<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>AtclauseOrder<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tagOrder<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@param, @return, @throws, @deprecated<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>target<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MethodName<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>format<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>^[a-z][a-z0-9][a-zA-Z0-9_]*$<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>message</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name.invalidPattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Method name <span class="token punctuation">'</span><span class="token punctuation">'</span>{0}<span class="token punctuation">'</span><span class="token punctuation">'</span> must match pattern <span class="token punctuation">'</span><span class="token punctuation">'</span>{1}<span class="token punctuation">'</span><span class="token punctuation">'</span>.<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SingleLineJavadoc<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>EmptyCatchBlock<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>exceptionVariableName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>expected<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CommentsIndentation<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tokens<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>SuppressionXpathFilter<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${org.checkstyle.google.suppressionxpathfilter.config}<span class="token punctuation">"</span></span>                      <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkstyle-xpath-suppressions.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>optional<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220323232535033.png" alt="checkstyle"></p><h1 id="SpringBoot-依赖冲突"><a href="#SpringBoot-依赖冲突" class="headerlink" title="SpringBoot 依赖冲突"></a>SpringBoot 依赖冲突</h1><ul><li>当前所使用的 SpringBoot 为 2.6.4，所以其它 SpringBoot 的场景启动器都会是 2.6.4</li></ul><h2 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h2><ul><li>依赖版本 <code>com.github.xiaoymin:knife4j-spring-boot-starter:3.0.3</code></li><li>访问地址：<a href="http://localhost:9090/doc.html">http://localhost:9090/doc.html</a></li></ul><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><ul><li>当我从 2.3.12 升级到 2.6.4 后有跨域问题，之前有配置跨域但是不起作用</li><li>修改原来的跨域自动配置类和 yml 文件</li><li>yml 配置</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">mvc</span><span class="token punctuation">:</span>    <span class="token key atrule">pathmatch</span><span class="token punctuation">:</span>      <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ant_path_matcher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>自动配置类示例如下(如果加了以后还有访问 404 的吧下面 knife4j与actuator依赖冲突 的 bean 加在 swagger 的自动配置类中)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">CorsConfiguration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span></span><span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token class-name">CorsFilter</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK17 * @Description 跨域配置方案不然 SpringBoot2.6.x 访问会有一些报错 * @since 2022/3/19 19:34 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CrosConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">CorsConfiguration</span> <span class="token function">corsConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CorsConfiguration</span> corsConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedOriginPattern</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        corsConfiguration<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">3600L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> corsConfiguration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">CorsFilter</span> <span class="token function">corsFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> <span class="token function">corsConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="knife4j与actuator依赖冲突"><a href="#knife4j与actuator依赖冲突" class="headerlink" title="knife4j与actuator依赖冲突"></a>knife4j与actuator依赖冲突</h3><ul><li>参考 <a href="https://toscode.gitee.com/xiaoym/knife4j/issues/I4JT89">knife4j与actuator依赖冲突</a></li><li>这里采用的是 <code>com.github.xiaoymin:knife4j-spring-boot-starter:3.0.3</code> 集成 swagge 只需要引用这一个依赖，当我的项目引入了 <code>org.springframework.boot:spring-boot-starter-actuator:2.6.4</code> 后项目启动报错 <code>org.springframework.context.ApplicationContextException: Failed to start bean 'documentationPluginsBootstrapper'; nested exception is java.lang.NullPointerException</code></li><li>在我们 swagger 的自动配置类中加入如下内容，注意依赖别导错了</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(完整示例)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">package</span> com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>web<span class="token punctuation">.</span>CorsEndpointProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>web<span class="token punctuation">.</span>WebEndpointProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>server<span class="token punctuation">.</span>ManagementPortType<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>ExposableEndpoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>web<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>web<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ControllerEndpointsSupplier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>web<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ServletEndpointsSupplier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>actuate<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>WebMvcEndpointHandlerMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtils<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>ApiInfoBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>oas<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableOpenApi<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span>@Configuration<span class="token comment">//@EnableSwagger2</span>@EnableOpenApi<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 解决springboot升级到2.6.x之后，knife4j报错     *     * @param webEndpointsSupplier        the web endpoints supplier     * @param servletEndpointsSupplier    the servlet endpoints supplier     * @param controllerEndpointsSupplier the controller endpoints supplier     * @param endpointMediaTypes          the endpoint media types     * @param corsProperties              the cors properties     * @param webEndpointProperties       the web endpoint properties     * @param environment                 the environment     * @return the web mvc endpoint handler mapping     */</span>    @Bean    <span class="token keyword">public</span> WebMvcEndpointHandlerMapping <span class="token function">webEndpointServletHandlerMapping</span><span class="token punctuation">(</span>            <span class="token parameter">WebEndpointsSupplier webEndpointsSupplier<span class="token punctuation">,</span> ServletEndpointsSupplier servletEndpointsSupplier<span class="token punctuation">,</span>            ControllerEndpointsSupplier controllerEndpointsSupplier<span class="token punctuation">,</span> EndpointMediaTypes endpointMediaTypes<span class="token punctuation">,</span>            CorsEndpointProperties corsProperties<span class="token punctuation">,</span> WebEndpointProperties webEndpointProperties<span class="token punctuation">,</span>            Environment environment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>ExposableEndpoint<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">&gt;&gt;</span> allEndpoints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>ExposableWebEndpoint<span class="token operator">&gt;</span> webEndpoints <span class="token operator">=</span> webEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>webEndpoints<span class="token punctuation">)</span><span class="token punctuation">;</span>        allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>servletEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allEndpoints<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>controllerEndpointsSupplier<span class="token punctuation">.</span><span class="token function">getEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String basePath <span class="token operator">=</span> webEndpointProperties<span class="token punctuation">.</span><span class="token function">getBasePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EndpointMapping endpointMapping <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndpointMapping</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        boolean shouldRegisterLinksMapping <span class="token operator">=</span> <span class="token function">shouldRegisterLinksMapping</span><span class="token punctuation">(</span>webEndpointProperties<span class="token punctuation">,</span>                environment<span class="token punctuation">,</span> basePath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcEndpointHandlerMapping</span><span class="token punctuation">(</span>endpointMapping<span class="token punctuation">,</span> webEndpoints<span class="token punctuation">,</span> endpointMediaTypes<span class="token punctuation">,</span>                corsProperties<span class="token punctuation">.</span><span class="token function">toCorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EndpointLinksResolver</span><span class="token punctuation">(</span>allEndpoints<span class="token punctuation">,</span> basePath<span class="token punctuation">)</span><span class="token punctuation">,</span>                shouldRegisterLinksMapping<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * shouldRegisterLinksMapping     *     * @param webEndpointProperties webEndpointProperties     * @param environment           environment     * @param basePath              /     * @return boolean     */</span>    <span class="token keyword">private</span> boolean <span class="token function">shouldRegisterLinksMapping</span><span class="token punctuation">(</span><span class="token parameter">WebEndpointProperties webEndpointProperties<span class="token punctuation">,</span>                                               Environment environment<span class="token punctuation">,</span> String basePath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> webEndpointProperties<span class="token punctuation">.</span><span class="token function">getDiscovery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>basePath<span class="token punctuation">)</span>                <span class="token operator">||</span> ManagementPortType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ManagementPortType<span class="token punctuation">.</span><span class="token constant">DIFFERENT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"测试平台API文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"自动化测试API文档"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">termsOfServiceUrl</span><span class="token punctuation">(</span><span class="token string">"www.adalucky.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"Ada"</span><span class="token punctuation">,</span> <span class="token string">"www.adalucky.com"</span><span class="token punctuation">,</span> <span class="token string">"958472019@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BeanPostProcessor</span> <span class="token function">springfoxHandlerProviderBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">WebMvcRequestHandlerProvider</span> <span class="token operator">||</span> bean <span class="token keyword">instanceof</span> <span class="token class-name">WebFluxRequestHandlerProvider</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">customizeSpringfoxHandlerMappings</span><span class="token punctuation">(</span><span class="token function">getHandlerMappings</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">RequestMappingInfoHandlerMapping</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">customizeSpringfoxHandlerMappings</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> mappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mappings<span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>mapping <span class="token operator">-&gt;</span> mapping<span class="token punctuation">.</span><span class="token function">getPatternParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestMappingInfoHandlerMapping</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHandlerMappings</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findField</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"handlerMappings"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RequestMappingInfoHandlerMapping</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="EasyExcel"><a href="#EasyExcel" class="headerlink" title="EasyExcel"></a>EasyExcel</h2><ul><li>EasyExcel 依赖版本：implementation(“com.alibaba:easyexcel:2.2.6”)</li><li>JDK 17</li></ul><h3 id="文件导出报错"><a href="#文件导出报错" class="headerlink" title="文件导出报错"></a>文件导出报错</h3><ul><li>参考 <a href="https://blog.csdn.net/weixin_42792301/article/details/121456156">JDK17 EasyExcel 导出报错</a>  文章中用的是 <code>9.5.2</code> 我换成最新的 <code>12.47.0</code> 也是可以的</li><li>问题描述，当我的在 JDK11 上运行时正常，升级到 17.0.2 后导出时报错 <code>Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not “opens java.lang” to unnamed module @61832929</code></li><li>看过一些网上的分析大多数都是说的 EasyExcel 依赖的 cglib 它又依赖于 asm4.2，与 SpringBoot2.6.x底层依赖的 asm3.x 有冲突，重新引入 cglib2.2 即可，不过我这里没有生效，后面百度说是 jdk17 和 EasyExcel 的一些问题</li><li>解决方案：引入 <code>implementation("org.burningwave:core:12.47.0")</code>  EasyExcel 工具类中添加 <code>StaticComponentContainer.Modules.exportAllToAll();</code></li><li>完整示例如下</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(完整示例)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">CustomCellWriteHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>write<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">ExcelWriterBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>burningwave<span class="token punctuation">.</span>core<span class="token punctuation">.</span>assembler<span class="token punctuation">.</span></span><span class="token class-name">StaticComponentContainer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLEncoder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @Version JDK11 * @since 2022/3/15 22:35 * @Description EasyExcel 工具类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExelUtil</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @param response 浏览器请求对象，必须在接口中定义一个 HttpServletResponse     * @param list     需要写入Excel的数据     * @param clazz    实体类(和 Excel 中的数据对应)     * @param fileName 写出的文件名     * @param &lt;T&gt;      泛型封装 List     * @return 返回 ExcelWriterBuilder 对象，通过调用   ExelUtil.writeExcel(args...).sheet("模板").doWrite(dataList);     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">ExcelWriterBuilder</span> <span class="token function">writeExcel</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token class-name">Class</span> clazz<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token comment">// 这里注意 有同学反应使用swagger 会导致各种问题，请直接用浏览器或者用postman</span>        <span class="token comment">//设置输出流返回的格式为 json 和 utf-8编码</span>        <span class="token comment">//设置成excel application/vnd.ms-excel 会报错 ，因为我们是自己封装的返回对象，No converter for [class com.adalucky.response.Result] with preset Content-Type 'application/vnd.ms-excel;charset=utf-8'</span>        <span class="token comment">//response.setContentType("application/vnd.ms-excel");</span>        <span class="token class-name">StaticComponentContainer</span><span class="token punctuation">.</span><span class="token class-name">Modules</span><span class="token punctuation">.</span><span class="token function">exportAllToAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//jdk17 报错</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系，自定义文件名</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-disposition"</span><span class="token punctuation">,</span> <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">".xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//写入的sheet 名称，应该可以用连缀的写法多个 sheet，然后 doWrite</span>        <span class="token keyword">return</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> clazz<span class="token punctuation">)</span>                <span class="token comment">//自适应列宽</span>                <span class="token punctuation">.</span><span class="token function">registerWriteHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomCellWriteHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">readExcel</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> sheet<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> readList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//                原本返回的LinkHashMap是所以这里需要用我们自己的实体类去加载就自动转成ExcelData类型</span>                <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>sheet<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">T</span> execelData<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        readList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>execelData<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> readList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">String</span> sheetName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sheetName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sheetName<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="JDK17新特性"><a href="#JDK17新特性" class="headerlink" title="JDK17新特性"></a>JDK17新特性</h1><ul><li>这里使用的是 JDK 17.0.2 LTS,下面将会记录从 JDK8 升级到 JDK17 用到的一些新语法，并不一定都是 17 的语法</li></ul><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="isBlack"><a href="#isBlack" class="headerlink" title="isBlack"></a>isBlack</h3><ul><li><del>isEmpty</del> 已经废弃了</li><li><code>isBlack</code>方法和<code>isEmpty</code> 前者忽略空格，后者只要有长度就判为非空。通常对于形参校验的情况下，应使用<code>isBlack</code></li></ul><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化构建开源工具。它使用一种基于Groovy的特定领域&lt;a href=&quot;https://baike.baidu.com/item/%E8%AF%AD%E8%A8%80/72744&quot;&gt;语言&lt;/a&gt;(DSL)来声明项目设置，也增加了基于Kotlin语言的kotlin-based DSL，抛弃了基于XML的各种繁琐配置。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="Gradle" scheme="https://www.adalucky.com/tags/Gradle/"/>
    
    <category term="JDK17" scheme="https://www.adalucky.com/tags/JDK17/"/>
    
    <category term="SpringBoot2.6.4" scheme="https://www.adalucky.com/tags/SpringBoot2-6-4/"/>
    
  </entry>
  
  <entry>
    <title>MybatisPlus</title>
    <link href="https://www.adalucky.com/auto/mybatis-plus/"/>
    <id>https://www.adalucky.com/auto/mybatis-plus/</id>
    <published>2022-03-08T09:21:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><p>我们的愿景是成为 MyBatis 最好的搭档，就像 <a href="https://baomidou.com/img/contra.jpg">魂斗罗</a> 中的 1P、2P，基友搭配，效率翻倍。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://baomidou.com/pages/24112f/" target="_blank" class="LinkCard" style="text-decoration: none;">Mybatis-Plus</a></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=328200936&amp;bvid=BV1yA411t782&amp;cid=191922449&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="快速集成"><a href="#快速集成" class="headerlink" title="快速集成"></a>快速集成</h1><ul><li>环境集成配置注意事项<ul><li>需要配置数据的基本信息 application.yml</li><li>pom.xml 中不要用 <code>&lt;packaging&gt;pom&lt;/packaging&gt;</code> 会导致resources目录下的文件无法编译到 classes 下 （会提示找不到数据库之类的</li><li>启动入口一定要配置 <code>@MapperScan("com.adalucky.MybatisPlus.modules")   // 需要扫描的包</code> 不然会提示找不到 bean</li><li>注意测试类的目录层级要和 java 中层级保持一致，且测试类没有配置文件时使用的是 main 的配置，如果有的话就必须定义数据库等信息使用自己单独的数据源和配置</li><li>Mybatis-Plus 默认是开启了下划线和驼峰互转的，也就是说 如果我们在实体类中定义了属性叫做 <code>userName</code> 那么它执行的时候查询的列会变为 <code>user_name</code></li></ul></li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span>  jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/data_auto_endpoint<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> test    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.adalucky<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>Mybatis-Plus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Mybatis-Plus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 会影响 resources 下编译到 classes 下&lt;packaging&gt;pom&lt;/packaging&gt;--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>这是一个关于Mybatis-Plus的学习项目<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--mybatis-plus--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--  java 连接 mysql       --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--swagger http://localhost:8080/dev/doc.html --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.xiaoymin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>knife4j-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!--在引用时请在maven中央仓库搜索3.X最新版本号--&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.0.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!--lombok--&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>spring-milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Spring Milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://repo.spring.io/milestone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>spring-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Spring Snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://repo.spring.io/snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>spring-milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Spring Milestones<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://repo.spring.io/milestone<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>spring-snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>Spring Snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://repo.spring.io/snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepository</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginRepositories</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h1><ul><li>有些数据需要设置为自动填充，比如创建时间、更新时间（当然也可以在数据层面约束）</li><li>自动填充：<code>@TableField(fill = FieldFill.xxx)</code>针对创建时间和更新时间可以使用自动填充（当然也可以在数据里面进行设置相应策略）</li><li>FieldFill.INSERT: 插入数据时</li><li>FieldFill.INSERT_UPDATE:  插入和更新</li><li>实现类和实体类时间都是用的 <code>LocalDateTime</code></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(实体类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//  创建时间</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>INSERT<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createTime<span class="token punctuation">;</span><span class="token comment">//  更新时间</span><span class="token comment">//@TableField(select = false,fill = FieldFill.INSERT_UPDATE)</span><span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>fill <span class="token operator">=</span> <span class="token class-name">FieldFill</span><span class="token punctuation">.</span>UPDATE<span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> updateTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><ul><li>创建 <code>MyMetaObjectHandler.java</code> 实现  <code>MetaObjectHandler 接口</code></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(MyMetaObjectHandler实现类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlus</span><span class="token punctuation">.</span>common<span class="token punctuation">.</span>handler<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">MetaObjectHandler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>reflection<span class="token punctuation">.</span></span><span class="token class-name">MetaObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyMetaObjectHandler * @Description Mybatis-Plus 自动填充创建时间和更新时间为本地时间 * @Author ada * @Computer Mac mini * @Date 2022/3/7 16:56 * @JDKVersion JDK1.8 */</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMetaObjectHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MetaObjectHandler</span> <span class="token punctuation">{</span>    <span class="token comment">/**     *实体中的日期也需要为 LocalDate 类型     * createTime、updateTime 需要和实体中的保持一致，实体中的需要和数据库映射正确     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start insert fill createTime...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictInsertFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"createTime"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 起始版本 3.3.3(推荐)</span>        <span class="token comment">/* this.strictUpdateFill(metaObject, "updateTime", () -&gt; LocalDateTime.now(), LocalDateTime.class); // 起始版本 3.3.3(推荐) 这行注释了因为插入的时候我不想生成更新时间*/</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateFill</span><span class="token punctuation">(</span><span class="token class-name">MetaObject</span> metaObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start update fill updateTime...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">strictUpdateFill</span><span class="token punctuation">(</span>metaObject<span class="token punctuation">,</span> <span class="token string">"updateTime"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 起始版本 3.3.3(推荐)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220307174957883.png" alt="自动填充时间"></p><h1 id="version"><a href="#version" class="headerlink" title="@version"></a>@version</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>标记乐观锁，通过 version 字段来保证数据的安全性，当修改数据的时候，会添加 version 作为条件，当条件成立的时候才会修改成功</li><li>原理：数据库中新增一个 version 字段，两个线程同时去操作数据是会加上 version 这个字段的值，操作完成后就会修改这个 version 值，可以保证线程安全</li><li>多线程并发案例：线程执行前为 1，其中一个执行成功后会修改 version 那么另外一个就查询不到也就不会去修改了<ul><li>线程一：update…..set  version = 2 where version = 1</li><li>线程二：update…..set  version = 2 where version = 1</li></ul></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li>数据库表内添加 version 字段<code> int 类型</code>，设置<code>默认值为 1</code></li><li>实体中新增 version 成员变量，并添加 @version 注解</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Version</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>新增配置类 MyBatisPlusConfig.java</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlus</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyBatisPlusConfig * @Description MyBatis-Plus 配置类 * @Author ada * @Computer Mac mini * @Date 2022/1/28 18:25 * @JDKVersion JDK1.8 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// 最新版 分页插件  DbType.MYSQL 指定为自己的方言</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 乐观锁     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptorVerion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> mybatisPlusInterceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mybatisPlusInterceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mybatisPlusInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220307185940903.png" alt="乐观锁示例"></p><h1 id="通用枚举"><a href="#通用枚举" class="headerlink" title="@通用枚举"></a>@通用枚举</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>有些字段在数据库中的存储为数字，但是希望返回给前端的是汉字，比如用户的性别在数据库中：<code>sex=0 (0女 1男 2保密)</code> 期望返回的是汉字不是数字</li><li>注意不能给实体类中的字段设置成 <code>@TableField(select = false)</code> 这样不会去查询，所以返回的都会是 null</li><li>如果需要赋值比如更新或者插入数据也可以通过枚举进行赋值 <code>sysUser.setSex(SexEnums.女);</code></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>   <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">SexEnums</span><span class="token punctuation">.</span>女<span class="token punctuation">)</span><span class="token punctuation">;</span>        mapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方式一：通过注解实现"><a href="#方式一：通过注解实现" class="headerlink" title="方式一：通过注解实现"></a>方式一：通过注解实现</h2><ul><li>数据库中有个 sex 字段，类型为 int，默认值为 2</li><li>创建枚举类 SexEnums 属性上加上  <code>@EnumValue</code> 注解</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlus</span><span class="token punctuation">.</span>common<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>mysql<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">EnumValue</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName SexEnums * @Description 数据库枚举,当数据库中的 sex =1 我们映射为男，sex=2,映射为女 * @Author ada * @Computer Mac mini * @Date 2022/3/7 16:56 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SexEnums</span> <span class="token punctuation">{</span>    <span class="token comment">// code=1时候映射成 sex1 ，变量要加 @EnumValue 注解</span>    女<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"当 sex=0 映射成女"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>男<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"当 sex=2 映射成男"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 保密<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"当 sex=2 映射成保密"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SexEnums</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@EnumValue</span>    <span class="token keyword">private</span>  <span class="token keyword">final</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">final</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><ul><li>配置 application.yml（com.adalucky.MybatisPlus.common.enums.mysql 为枚举类所在的目录）</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> com.adalucky.MybatisPlus.common.enums.mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>实体类定义时类型为枚举类对应的类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">SexEnums</span> sex<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220307213555278.png" alt="通过注解实现"></p><h2 id="方式二：通过实现接口"><a href="#方式二：通过实现接口" class="headerlink" title="方式二：通过实现接口"></a>方式二：通过实现接口</h2><ul><li>配置 application.yml（com.adalucky.MybatisPlus.common.enums.mysql 为枚举类所在的目录）和上面是一致的</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> com.adalucky.MybatisPlus.common.enums.mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>实体类定义时类型为枚举类对应的类型</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">StatusEnums</span> status<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义枚举类实现接口</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlus</span><span class="token punctuation">.</span>common<span class="token punctuation">.</span>enums<span class="token punctuation">.</span>mysql<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IEnum</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName StatusEnums * @Description Status 枚举 * @Computer Macbook pro * @Date 2022/3/7 21:37 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">StatusEnums</span> <span class="token keyword">implements</span> <span class="token class-name">IEnum</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    启用<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"当 status=0 映射成启用"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    禁用<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"当 status=1 映射成禁用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>    <span class="token class-name">StatusEnums</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>code<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220307220519236.png" alt="实现接口"></p><h1 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h1><ul><li>Mybatis-Plus推荐使用 3.3.0及以上版本就不需要在实体中对该字段添加@TableLogic注解</li><li>查询时会过滤掉逻辑删除的数据，删除时只会逻辑删除，修改 deleted 的值</li><li>配置 application.yml文件</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> com.adalucky.MybatisPlus.common.enums  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment">#全局配置，主键自动增长，就不需要在每个实体类上声明了 @TableId(type = IdType.AUTO)</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token key atrule">logic-delete-field</span><span class="token punctuation">:</span> deleted  <span class="token comment"># 全局逻辑删除的实体字段名(since 3.3.0版本以上就不需要在实体中对该字段添加@TableLogic注解)</span>      <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token comment"># 逻辑已删除值(默认为 1.我们改为 0)</span>      <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 逻辑未删除值(默认为 0，我们改为 1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220307222915626.png" alt="查询自动过滤掉逻辑删除"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20220307223440967.png" alt="逻辑删除数据"></p><h1 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h1><ul><li>实体类主要是绑定数据库的</li><li>类上指定表名：Mybatis-Plus 默认会用我们的实体类的类名作为数据库表名查询（默认是开启了支持类名和数据之间的驼峰和蛇形命名的转换，如果需要关闭需要去 yml 中配置），如果表名和类名对不上就在类层面加上这个注解可以绑定类和数据库的表，<code>@TableName("sys_user")</code> </li><li>指定主键：Mybatis-Plus 默认会将 字段名叫做 id 的当做主键，如果主键字段名不叫 id，可以在对应的字段定义出加上<code>@TableId(type = IdType.AUTO)</code> 申明是一个主键,并且开启自增，<code>type=IdType.AUTO</code> 就是声明主键生成策略，是一个枚举，还有什么雪花算法之类的，我们一般是用自增。不写的话就为 NONE</li></ul><table><thead><tr><th>Key</th><th>描述</th></tr></thead><tbody><tr><td>AUTO</td><td>数据库自增，<code>如果开发者自己赋值后数据库依旧会采用自增策略覆盖掉</code></td></tr><tr><td>NONE</td><td>无。采用默认的 Mybatis-Plus set 主键，雪花算法实现</td></tr><tr><td>INPUT</td><td>需要开发者手动赋值（<code>如果开发者没有赋值，传递参数会为 null，但是数据库主键有自己的策略进行自增</code>）</td></tr><tr><td>ASSIGN_ID</td><td>Mybatis-Plus自动分配 ID，<code>Long、Integer、String </code> 也是一个雪花算法</td></tr><tr><td>ASSIGN_UUID</td><td>Mybatis-Plus自动分配UUID，<code>String</code> 注意<code>生成的类型为 String 那么声明的实体也需要是 String</code> 其次数据库的类型也要是字符支持的类型，长度</td></tr></tbody></table><ul><li><p>指定字段名：<code>@TableField("nickname")</code> 或者 <code>@TableField(value="nickname")</code>   当字段和数据库字段命名不一致时可以进行绑定</p></li><li><p>其它表中的字段：<code>@TableField(exist = false)</code>  声明该实体不是表内的字段</p></li><li><p>指定忽略查询字段: <code>@TableField(select = false)</code></p></li><li><p>更多注解参考 <a href="https://baomidou.com/pages/223848/#tablename">官方注解指南</a></p></li></ul><h1 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h1><ul><li>mapper 里面的方法都是以 <code>select</code> <code>update</code> <code>insert</code> <code>delete</code> 命名的，很严谨，因为是直接和数据库交互的 service里面都是 get 什么之类的</li><li>mapper 是对实体类操作，最终把操作映射到数据库里面，mapper 是一个接口集成 baseMapper，指定泛型为需要操作的实体类对象 需要用<code>@Component</code>注入到 IOC 中</li><li>BaseMapper 中有 17个(版本不同可能不一样多)已经封装好的增删改查的方法可以直接用 SysUserMapper 去调用 </li><li>SysUserMapper 也是一个接口 但是是动态代理的，丢到虚拟机中，启动运行了以后就会生成该对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SysUserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><h3 id="insert-1"><a href="#insert-1" class="headerlink" title="insert"></a>insert</h3><ul><li>insert 插入单条数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * insert 插入单条数据 * 返回的是一个 int 类型，成功条数 * 主键设置了自增策略可以不赋值，其它的字段没有做不为空要求 * Execute SQL：INSERT INTO sys_user ( login_name, user_name, sex, status, create_time ) VALUES ( '13512648422', '测试save456', 2, 1, '2022-03-08T17:14:52.816' ) */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sysUser<span class="token punctuation">.</span><span class="token function">setLoginName</span><span class="token punctuation">(</span><span class="token string">"13512648422"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sysUser<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"测试save456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sysUser<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">SexEnums</span><span class="token punctuation">.</span>SECRET<span class="token punctuation">)</span><span class="token punctuation">;</span>    sysUser<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">StatusEnums</span><span class="token punctuation">.</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Wapper"><a href="#Wapper" class="headerlink" title="Wapper"></a>Wapper</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>Wapper 就是一个条件构造，我们可以去自定义一些条件查询，上面的查询基本上都是针对主键来的</li></ul><h3 id="单条件"><a href="#单条件" class="headerlink" title="单条件"></a>单条件</h3><ul><li>wrapper.eq</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * wrapper.eq 单条件查询     * 根据user_name 查询值为【阿达】的数据，user_name字段名必须和数据字段名一致     * 数据中的字段叫做 user_name 这里可以写成 user_name 或者 user_Name  不支持 userName 会提示找不到列名     * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_name = '阿达')     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectWrapperEq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"阿达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="多条件"><a href="#多条件" class="headerlink" title="多条件"></a>多条件</h3><ul><li>wrapper.allEq</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * wrapper.allEq 多条件查询     * 查询 user_name=阿达 并且 status=1，并且sex=1 的数据     *  Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_name = '阿达' AND sex = 1 AND status = 1)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectWrapperAllEq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"阿达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">allEq</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220307230907203.png" alt="多条件查询"></p><h3 id="小于"><a href="#小于" class="headerlink" title="小于"></a>小于</h3><ul><li>wrapper.lt</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * wrapper.lt 小于 * 查询 user_id 小于 10005 的数据（不包含等于） * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_id &lt; 10005) */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">selectWrapperLt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">lt</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> <span class="token number">10005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大于"><a href="#大于" class="headerlink" title="大于"></a>大于</h3><ul><li>wrapper.gt 大于</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * wrapper.gt 大于    * 查询 user_id 大于 10005 的数据（不包含等于）    *  Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_id &gt; 10005)    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">void</span> <span class="token function">selectWrapperGt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       wrapper<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> <span class="token number">10005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大于等于"><a href="#大于等于" class="headerlink" title="大于等于"></a>大于等于</h3><ul><li>wrapper.ge 大于等于</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * wrapper.ge 大于等于    * 查询 user_id 大于等于 10005 的数据（包含等于）    * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_id &gt;= 10005)    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">void</span> <span class="token function">selectWrapperGe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> <span class="token number">10005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="不等于"><a href="#不等于" class="headerlink" title="不等于"></a>不等于</h3><ul><li>wrapper.ne 不等于</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * wrapper.ne 不等于 * 查询 user_name 不等于 【阿达】的数据 * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_name &lt;&gt; '阿达') */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">selectWrapperNt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"阿达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><ul><li>wrapper.like 模糊查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * wrapper.like 模糊查询     * 查询 user_name 中包含了【测试】的数据     * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_name LIKE '%测试%')     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectWrapperLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="左模糊查询"><a href="#左模糊查询" class="headerlink" title="左模糊查询"></a>左模糊查询</h3><ul><li>wrapper.like 左模糊查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * wrapper.like 左模糊查询   * 查询 user_name 中以【测试】结尾的数据   * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_name LIKE '%测试')   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">selectWrapperLikeLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      wrapper<span class="token punctuation">.</span><span class="token function">likeLeft</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="右模糊查询"><a href="#右模糊查询" class="headerlink" title="右模糊查询"></a>右模糊查询</h3><ul><li>wrapper.likeRight 右模糊查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * wrapper.likeRight 右模糊查询  * 查询 user_name 中以【测试】开头的数据  * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_name LIKE '测试%')  */</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">selectWrapperLikeRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     wrapper<span class="token punctuation">.</span><span class="token function">likeRight</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h3><ul><li>wrapper.inSql 联合查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * wrapper.inSql 联合查询    * 查询 user_id &gt; 10004,status = 1    * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_id IN (select user_id from sys_user where user_id &gt; 10004) AND status IN (select status from sys_user where status = 1))     */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">void</span> <span class="token function">selectWrapperInsql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       wrapper<span class="token punctuation">.</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> <span class="token string">"select user_id from sys_user where user_id &gt; 10004"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       wrapper<span class="token punctuation">.</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token string">"select status from sys_user where status = 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h3><ul><li>wrapper.orderByAsc 升序排列</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * wrapper.orderByAsc 升序排列 * 查询数据并根据 user_id 升序排列 * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' ORDER BY user_id ASC */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">selectWrapperOrderByAsc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h3><ul><li>wrapper.orderByDesc 降序排列</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * wrapper.orderByDesc 降序排列 * 查询数据并根据 user_id 降序排列 * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' ORDER BY user_id DESC */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">selectWrapperOrderByDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="降序-过滤"><a href="#降序-过滤" class="headerlink" title="降序+过滤"></a>降序+过滤</h3><ul><li>wrapper.orderByDesc 降序排列</li><li>wrapper.having 排序后过滤</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * wrapper.orderByDesc 降序排列    * wrapper.having 排序后过滤    * 查询数据并根据 user_id 降序排列，只保留 status = 1 的数据（StatusEnums.启用 枚举中映射的为 1）    * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' HAVING status ORDER BY user_id DESC     */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">void</span> <span class="token function">selectWrapperOrderByDescAndHaving</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       wrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       wrapper<span class="token punctuation">.</span><span class="token function">having</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token class-name">StatusEnums</span><span class="token punctuation">.</span>启用<span class="token punctuation">)</span><span class="token punctuation">;</span>       mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><h3 id="selectList"><a href="#selectList" class="headerlink" title="selectList"></a>selectList</h3><ul><li>selectList 查询数据</li><li>本次为没有条件，查询所有的并遍历打印</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">SysUserMapperTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">SysUserMapper</span> mapper<span class="token punctuation">;</span>      <span class="token comment">/**     * selectList 查询数据     * 返回一个 List&lt;T&gt; 查询结果对象集合     * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1'      */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//queryWrapper 条件构造器，没有条件就用 null</span>        mapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="selectById"><a href="#selectById" class="headerlink" title="selectById"></a>selectById</h3><ul><li>selectById 根据主键查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * selectById 根据主键查询  * 返回一个实体对象  * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE user_id=10021 AND deleted='1'   */</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">10021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="selectBatchIds"><a href="#selectBatchIds" class="headerlink" title="selectBatchIds"></a>selectBatchIds</h3><ul><li>mapper.selectBatchIds 主键查询多个值</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * mapper.selectBatchIds 主键查询多个值     * 查询主键中等于 【10001, 10002, 10005】的数据     * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE user_id IN ( 10001 , 10002 , 10005 ) AND deleted='1'      */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token number">10002</span><span class="token punctuation">,</span> <span class="token number">10005</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="selectByMap"><a href="#selectByMap" class="headerlink" title="selectByMap"></a>selectByMap</h3><ul><li> mapper.selectByMap 根据 map 对象查询</li><li> Map 只能做等值判断，逻辑判断需要使用 Wrapper</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * mapper.selectByMap 根据 map 对象查询 * 查询 user_id = 10003的数据 * Map 只能做等值判断，逻辑判断需要使用 Wrapper * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE user_id = 10003 AND deleted='1' */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">selectbyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> <span class="token number">10003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="selectMaps"><a href="#selectMaps" class="headerlink" title="selectMaps"></a>selectMaps</h3><ul><li>selectMaps 返回wrapper的结果集</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * selectMaps 返回wrapper的结果集   * selectMaps 返回的是一个结果集，selectList 返回的是对象列表   * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_id = 10001)   */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">selectMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><ul><li>需要先注入分页的 bean，然后才能使用分页查询</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>adalucky<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlus</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">DbType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span></span><span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>inner<span class="token punctuation">.</span></span><span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MyBatisPlusConfig * @Description MyBatis-Plus 配置类 * @Author ada * @Computer Mac mini * @Date 2022/1/28 18:25 * @JDKVersion JDK1.8 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">{</span>    <span class="token comment">// 最新版 分页插件  DbType.MYSQL 指定为自己的方言</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptorPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="selectPage"><a href="#selectPage" class="headerlink" title="selectPage"></a>selectPage</h4><ul><li>selectPage 分页查询，返回的结果集是一个对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * selectPage 分页查询，返回的结果集是一个对象 * getSize() 每页的大小和参数 size 一样 * getTotal() 统计查询的总条数 * getRecords() 分页后的结果列表 * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' LIMIT 5,5  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> ipage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>ipage<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="selectMapsPage"><a href="#selectMapsPage" class="headerlink" title="selectMapsPage"></a>selectMapsPage</h4><ul><li>selectMapsPage 分页查询，返回的结果集是一个 map</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * selectMapsPage 分页查询，返回的结果集是一个 map    * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' LIMIT 5,5    */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">void</span> <span class="token function">selectMapsPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ipage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mapIPage <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectMapsPage</span><span class="token punctuation">(</span>ipage<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       mapIPage<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="selectObjs"><a href="#selectObjs" class="headerlink" title="selectObjs"></a>selectObjs</h3><ul><li>selectObjs() 查询主键的集合，返回的是所有主键的列表</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * selectObjs() 查询主键的集合，返回的是所有主键的列表 * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">selectObjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objects <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectObjs</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    objects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="selectOne"><a href="#selectOne" class="headerlink" title="selectOne"></a>selectOne</h3><ul><li>selectOne()  要求返回的结果中只能有一条数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * selectOne()  要求返回的结果中只能有一条数据     * 需要通过 wrapper 构造一个唯一结果     * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE deleted='1' AND (user_id = 10003)     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> <span class="token number">10003</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><h3 id="deleteById"><a href="#deleteById" class="headerlink" title="deleteById"></a>deleteById</h3><ul><li>deleteById 根据主键删除</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * deleteById 根据主键删除     * 根据主键 id 删除，因为配了逻辑删除，这里只会修改删除标识，不会物理删除     * Execute SQL：UPDATE sys_user SET deleted='0' WHERE user_id=100 AND deleted='1'      */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deleteBatchIds"><a href="#deleteBatchIds" class="headerlink" title="deleteBatchIds"></a>deleteBatchIds</h3><ul><li>deleteBatchIds 删除 ID 集合的数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * deleteBatchIds 删除 ID 集合的数据 * 传入的是一个主键的集合，多个 id，返回的结果集是一个 int 类型，删除成功了几条 * Execute SQL：UPDATE sys_user SET deleted='0' WHERE user_id IN ( 10001 , 10002 , 10003 ) AND deleted='1'  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">deleteBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">,</span> <span class="token number">10002</span><span class="token punctuation">,</span> <span class="token number">10003</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="delete-1"><a href="#delete-1" class="headerlink" title="delete"></a>delete</h3><ul><li>deleted 删除数据（<code>如果没有条件就是删除所有的</code>）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * deleted 删除数据 * 传递的参数是一个 wrapper 条件构造器（如果没有条件就是删除所有的） * Execute SQL：UPDATE sys_user SET deleted='0' WHERE deleted='1' AND (user_name = '测试4') */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">deleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> <span class="token string">"测试4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> delete <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="deleteByMap"><a href="#deleteByMap" class="headerlink" title="deleteByMap"></a>deleteByMap</h3><ul><li>deleteByMap 删除 Map 中的等值数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * deleteByMap 删除 Map 中的等值数据 * 做的等值判断，如下示例就是判断数据库中 user_id=10006 的数据，返回的是一个 int 类型删除成功的行数 * Execute SQL：UPDATE sys_user SET deleted='0' WHERE user_id = 10006 AND deleted='1'  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">deleteByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">,</span> <span class="token number">10006</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">deleteByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><h3 id="updateById"><a href="#updateById" class="headerlink" title="updateById"></a>updateById</h3><ul><li>updateById 根据主键 ID 去更新数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * updateById 根据主键 ID 去更新数据    * 这里是先查了一个数据出来，然后 set 替换值后再把这个对象去替换    * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE user_id=10021 AND deleted='1'    * Execute SQL：UPDATE sys_user SET dept_id=105, login_name='13512648422', user_name='update更新', user_type='00', email='', phonenumber='', sex=2, avatar='', status=1, login_ip='', update_time='2022-03-08T16:48:32.042', version=3 WHERE user_id=10021 AND version=2 AND deleted='1'     */</span>   <span class="token annotation punctuation">@Test</span>   <span class="token keyword">void</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">10021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       sysUser<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"update更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       mapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="update-1"><a href="#update-1" class="headerlink" title="update"></a>update</h3><ul><li>update 更新满足条件的数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * update 更新满足条件的数据  * 参数为一个实体对象，一个条件构造器  * 本示例为更新 10021 这个数据的名称为 update 同时该数据的 status需要为启用状态才会更新  * Execute SQL：SELECT user_id,dept_id,login_name,user_name,user_type,email,phonenumber,sex,avatar,status,deleted,project_id,login_ip,login_date,version FROM sys_user WHERE user_id=10021 AND deleted='1'  * Execute SQL：UPDATE sys_user SET dept_id=105, login_name='13512648422', user_name='update', user_type='00', email='', phonenumber='', sex=2, avatar='', status=1, login_ip='', update_time='2022-03-08T17:05:47.010', version=5 WHERE deleted='1' AND (status = 0 AND version = 4)  */</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">SysUser</span> sysUser <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">10021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     sysUser<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">QueryWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"status"</span><span class="token punctuation">,</span> <span class="token class-name">StatusEnums</span><span class="token punctuation">.</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> update <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sysUser<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>update<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义-SQL"><a href="#自定义-SQL" class="headerlink" title="自定义 SQL"></a>自定义 SQL</h2><h3 id="多表关联查询"><a href="#多表关联查询" class="headerlink" title="多表关联查询"></a>多表关联查询</h3><ul><li>需求：用户有自己的属性 姓名 账户 所属部门，所属公司   我们需要通过关联查询出某一个用户的部门和个人信息账号等</li><li>说明：这里只用了两张表，和4 个字段，多张表和多个字段实现方法一样，注意 VO 中的成员属性需要和数据库中的字段名一致，如果不一致需要在 sql 语句中给查询的字段起别名保持和 VO 中的一致，不然无法对应会为 null</li><li>VO: view object 数据库返回给视图的叫做(返回给页面展示的) VO</li><li> DTO：Data Transfer Object 业务层传输给数据库的叫做（前端传递的参数） DTO</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> u<span class="token punctuation">.</span>login_name<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span>u<span class="token punctuation">.</span>user_name<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dept_name <span class="token keyword">FROM</span> sys_dept d<span class="token punctuation">,</span>sys_user u <span class="token keyword">WHERE</span> u<span class="token punctuation">.</span>dept_id<span class="token operator">=</span>d<span class="token punctuation">.</span>dept_id <span class="token operator">and</span> u<span class="token punctuation">.</span>user_id<span class="token operator">=</span><span class="token number">10003</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>新建一个 VO 实体，该实体定义接收的数据字段</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserVO</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> loginName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> deptName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Mapper 中自己实现方法（自带的方法已经满足不了我们的需求了）</li><li>方法命名建议也采用 select _ By _ 的方式（service 中用 get）</li><li>通过注解 <code>Select</code> 把 sql 放进去，sql 的参数用 <code>#{ 参数 }</code> 引用 这里面的参数应该是按照顺序取的，第一个#{}对应着方法中的第一个参数，第二个对应着方法中的第二个参数</li><li>方法中返回的是 List&lt;VO&gt; 对象，传递的参数就是上面 sql 引用的参数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">SysUserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysUser</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">/**     *      * @param user_id 用户表的 id 主键     * @param status 是否禁用标识，用的枚举类     * @return 查询结果列表封装到 UserVO 中     */</span>    <span class="token comment">//@Select("SELECT u.login_name,u.user_id,u.user_name,d.dept_name FROM sys_dept d,sys_user u WHERE u.dept_id=d.dept_id and u.user_id=#{user_id}")</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT u.login_name,u.user_id,u.user_name,d.dept_name FROM sys_dept d,sys_user u WHERE u.dept_id=d.dept_id AND u.user_id=#{user_id} AND u.status=#{status}"</span><span class="token punctuation">)</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectUserVoById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> user_id<span class="token punctuation">,</span> <span class="token class-name">StatusEnums</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>调用 selectUserVoById</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * selectUserVoById 自定义 sql   * 需要传递两个参数，一个是用户ID，一个是启用状态（这里直接用的枚举中的）   * Execute SQL：SELECT u.login_name,u.user_id,u.user_name,d.dept_name FROM sys_dept d,sys_user u WHERE u.dept_id=d.dept_id AND u.user_id=10003 AND u.status=1    */</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">void</span> <span class="token function">selectUserVoById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserVO</span><span class="token punctuation">&gt;</span></span> userVOS <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">selectUserVoById</span><span class="token punctuation">(</span><span class="token number">10003</span><span class="token punctuation">,</span> <span class="token class-name">StatusEnums</span><span class="token punctuation">.</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>      userVOS<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SQL日志打印"><a href="#SQL日志打印" class="headerlink" title="SQL日志打印"></a>SQL日志打印</h1><ul><li>在执行程序的时候如果需要查看执行的 sql 语句我们可以通过配置打印出来</li></ul><h2 id="mybatis-plus实现类输出"><a href="#mybatis-plus实现类输出" class="headerlink" title="mybatis-plus实现类输出"></a>mybatis-plus实现类输出</h2><ul><li>通过配置 yml 文件中的 mybatis-plus进行配置输出日志</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment">#打印mybatis-plus的 sql 执行语句</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220307132147259.png" alt="mybatis-plus实现类输出"></p><h2 id="debug输出"><a href="#debug输出" class="headerlink" title="debug输出"></a>debug输出</h2><ul><li>正式环境推荐使用该方式，以 debug 模式显示出执行的 sql 语句和参数</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220307141259216.png" alt="debug输出"></p><h2 id="p6spy实现"><a href="#p6spy实现" class="headerlink" title="p6spy实现"></a>p6spy实现</h2><ul><li>建议在单元测试中、或者本地调试使用，因为会消耗性能，不建议部署在线上环境</li><li>添加 p6spy 依赖</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--执行 SQL 分析打印,yml配置中需要修改数据的连接驱动为 driver-class-name: com.p6spy.engine.spy.P6SpyDriver  url 改成 jdbc:p6spy:mysql://127.xxx --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>p6spy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>p6spy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改数据库驱动为：com.p6spy.engine.spy.P6SpyDriver</li><li>url 修改为：jdbc:p6spy:mysql://127.xxx</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.p6spy.engine.spy.P6SpyDriver    <span class="token key atrule">url</span><span class="token punctuation">:</span>  jdbc<span class="token punctuation">:</span>p6spy<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/data_auto_endpoint<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>resources 下新增 <code>spy.properties</code> （是在resources 下的根目录新增 不能在 config 中新增，文件名也不要写错了）</li></ul><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#modulelist=com.p6spy.engine.logging.P6LogFactory,com.p6spy.engine.outage.P6OutageFactory</span><span class="token attr-name">modulelist</span><span class="token punctuation">=</span><span class="token attr-value">com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span><span class="token comment"># logMessageFormat自定义日志打印格式如下</span><span class="token comment">#  Consume Time：48 ms 2022-03-07 15:14:51</span><span class="token comment">#  Execute SQL： 执行的 sql 语句</span><span class="token attr-name">logMessageFormat</span><span class="token punctuation">=</span><span class="token attr-value">com.baomidou.mybatisplus.extension.p6spy.P6SpyLogger</span><span class="token comment"># 使用日志系统记录sql</span><span class="token attr-name">appender</span><span class="token punctuation">=</span><span class="token attr-value">com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span><span class="token comment"># 设置使用p6spy driver来做代理</span><span class="token attr-name">deregisterdrivers</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment"># JDBC URL 是否加上前缀，设置为 true，会加上 p6spy: 作为前缀。取值 true| false</span><span class="token attr-name">useprefix</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment">## 配置记录Log例外  error,info,batch,debug,statement,commit,rollback,result,resultset.</span><span class="token attr-name">excludecategories</span><span class="token punctuation">=</span><span class="token attr-value">info,debug,result,commit,resultset</span><span class="token comment"># 日期格式</span><span class="token attr-name">dateformat</span><span class="token punctuation">=</span><span class="token attr-value">yyyy-MM-dd HH:mm:ss</span><span class="token comment"># 是否开启慢SQL记录</span><span class="token attr-name">outagedetection</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment"># 慢SQL记录标准 秒</span><span class="token attr-name">outagedetectioninterval</span><span class="token punctuation">=</span><span class="token attr-value">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/baomidou/mybatis-plus&quot;&gt;MyBatis-Plus (opens new window)&lt;/a&gt;（简称 MP）是一个 &lt;a href=&quot;https://www.mybatis.org/mybatis-3/&quot;&gt;MyBatis (opens new window)&lt;/a&gt;的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。&lt;/p&gt;
&lt;p&gt;我们的愿景是成为 MyBatis 最好的搭档，就像 &lt;a href=&quot;https://baomidou.com/img/contra.jpg&quot;&gt;魂斗罗&lt;/a&gt; 中的 1P、2P，基友搭配，效率翻倍。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="Mybatis-Plus" scheme="https://www.adalucky.com/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>Axios</title>
    <link href="https://www.adalucky.com/auto/axios/"/>
    <id>https://www.adalucky.com/auto/axios/</id>
    <published>2022-02-26T14:21:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Axios，是一个基于promise网络请求库，作用于<a href="https://baike.baidu.com/item/node.js/7567977">node.js</a>和<a href="https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911">浏览器</a>中，它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316">服务端</a>它使用原生node.js <a href="https://baike.baidu.com/item/http/243074">http</a>模块, 而在客户端 (浏览端) 则使用XMLHttpRequests</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=586217027&amp;bvid=BV1Pz4y1S7Uv&amp;cid=283047509&amp;page=39" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="认识-axios"><a href="#认识-axios" class="headerlink" title="认识 axios"></a>认识 axios</h1><ul><li>Axios简单的理解就是ajax的封装</li><li>Axios 是一个基于 promise 的 HTTP 库</li><li>支持node端和浏览器端</li><li>使用Promise管理异步，告别传统callback方式</li><li>丰富的配置项，支持拦截器等高级配置</li><li>转换请求数据和响应数据</li></ul><h1 id="接口案例"><a href="#接口案例" class="headerlink" title="接口案例"></a>接口案例</h1><ul><li>项目的两种编程方式：模板式编程（服务端渲染好的模板返回，例如 jsp）、接口式编程（现在基本都是这种，前后端分离）</li><li>RestFul API 规范（URL，HTTP， 版本， 状态码， 返回值， 请求条件等规范）<ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。（更新表内一行的所有数据）</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。（更新表内一行数据的一部分字段）</li><li>DELETE（DELETE）：从服务器删除资源。</li><li>我们配置接口时，这只是一种规范，只是<code>建议</code>大家按照规范来使用而已。</li></ul></li></ul><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>主要用于异步计算</li><li>可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果</li><li>可以在对象之间传递和操作promise，帮助我们处理队列</li><li>异步回调的问题：<ul><li>之前处理异步是通过纯粹的回调函数的形式进行处理</li><li>很容易进入到回调地狱中，剥夺了函数return的能力</li><li>问题可以解决，但是难以读懂，维护困难</li><li>稍有不慎就会踏入回调地狱 - 嵌套层次深，不好维护</li></ul></li><li>promise<ul><li>promise是一个对象，对象和函数的区别就是对象可以保存状态，函数不可以（闭包除外）</li><li>并未剥夺函数return的能力，因此无需层层传递callback，进行回调获取数据</li><li>代码风格，容易理解，便于维护</li><li>多个异步等待合并便于解决</li></ul></li></ul><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul><li>Promise总共有三种状态：<code>pending</code> <code>reslove</code> <code>reject</code></li><li>pending就是未决，resolve可以理解为成功，reject可以理解为拒绝</li><li>pending 可能会转变为 resolve</li><li>pending 也可能会转变为 reject</li><li>then() 函数回调后如果函数中没有发生错误会返回一个 resolve 状态的 Promise，如果回调中发生错误会返回一个 reject 状态的 Promise 然后触发 catch 的函数，同理如果 catch 中的执行没有发生错误依旧也会返回一个 resolve 状态的 Promise，还是可以走后面的 then 回调</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220227202057141.png" alt="状态及回调调用关系"></p><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><ul><li> 回调地狱简单说就是 套娃 请求A，但是A又依赖于B，因此在请求的A里面包含着B，同时B又依赖着C，因此B里面又包含着C，C又包含着D 这种模式就称为回调地狱</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220227214435868.png" alt="回调地狱"></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li>任何一个 then 中如果发生错误会走 catch 的回调，这里没有定义</li><li>每增加一个回调就按照这种格式写比前面的更加清晰</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220227222148923.png" alt="异步请求示例"></p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul><li>Promise.all 传递的参数是一个数组</li><li>多个任务完成后才会触发下一个回调</li><li>多个任务返回的也是一个数组</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220227223016457.png" alt="同步"></p><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>axios 发起请求后返回的就是一个 Promise 对象，所以要先掌握 Promise</li><li>接口是本地 mock 的一些，主要看效果</li></ul><h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><ul><li>html 中通过 srcipt 引入 axios 方式进行测试</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/axios/0.26.0/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//第一种用法，默认请求方式为 get</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getUser?id=1&amp;author=ada"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//第二种用法 method 不传的话默认为 get</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1:4523/mock/673120/getUser"</span><span class="token punctuation">,</span>        params<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> author<span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//第三种 POST 可自己设置 headers</span>    <span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        method<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">"http://127.0.0.1:4523/mock/673120/getInfo"</span><span class="token punctuation">,</span>        headers<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token string">"content-type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        data<span class="token operator">:</span> <span class="token punctuation">{</span>            cid<span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>            region<span class="token operator">:</span> <span class="token string">"mock"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220227233439190.png" alt="axios 示例一"></p><h1 id="线上环境使用"><a href="#线上环境使用" class="headerlink" title="线上环境使用"></a>线上环境使用</h1><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><ul><li>上面是通过引入 js 文件方式，下面我们将通过安装 axios 依赖的方式直接使用</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 安装（axios 安装到线上环境） </span><span class="token function">npm</span> i axios -S <span class="token function">npm</span> i webpack webpack-cli html-webpack-plugin -D<span class="token comment"># yarn 安装</span><span class="token function">yarn</span> <span class="token function">add</span> axios -S <span class="token function">yarn</span> <span class="token function">add</span> webpack webpack-cli html-webpack-plugin -D <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件及配置"><a href="#文件及配置" class="headerlink" title="文件及配置"></a>文件及配置</h2><ul><li>根目录下新建 src/index.js  和 src/index.html 两个文件</li><li>根目录下新建 webpack.config.js 配置文件</li><li>配置 webpack</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>template<span class="token operator">:</span> <span class="token string">"./src/index.html"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ul><li>index.js 的内容（新建了空的 index.html文件，webpack 打包后会引入这个 js ）</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token comment">//get 的一般用法</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getUser?id=1&amp;author=ada"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getUser"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>params<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">//post 的一般用法</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getInfo"</span><span class="token punctuation">,</span> <span class="token string">"cid=10000&amp;region=mock"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220228223753205.png" alt="示例返回"></p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ul><li>axios 的并发和 Promise的同步是一样的 axios.all   Promise.all 请求参数都是一个数据，返回也是一个数据</li><li>axios.spread 方法可以用参数分别接收每一个请求的结果，参数个数和发起的请求个数一致</li><li>ajax请求过多对页面性能可能会有影响，以及代码不美观，代码过于臃肿，所以我们可以使用 axios的并发请求axios.all()</li><li>axios.all() 这个方法在 axios 的构造函数是没有的，没在实例对象上。</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getUser?id=1&amp;author=ada"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getUser"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>params<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getInfo"</span><span class="token punctuation">,</span> <span class="token string">"cid=10000&amp;region=mock"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------all_res--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getUser?id=1&amp;author=ada"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getUser"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>params<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:4523/mock/673120/getInfo"</span><span class="token punctuation">,</span> <span class="token string">"cid=10000&amp;region=mock"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res1<span class="token punctuation">,</span> res2<span class="token punctuation">,</span> res3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">//上面是所有返回的结果是一个数组，这里用 axios.spread 用三个参数分别接收每一个请求的结果</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"--------------------res1 res2 res3--------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220228230013172.png" alt="并发"></p><h1 id="全局环境配置"><a href="#全局环境配置" class="headerlink" title="全局环境配置"></a>全局环境配置</h1><ul><li>axios.defaults 可配置全局环境，这里简单提取两个baseURL timeout 还有很多可扩展</li><li>axios.default.headers.post[‘content-type’]=’application/x-www-form-urlencoded’;</li><li>整理数据</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"># 整理数据axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function-variable function">transformRequest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js" data-language="js"><code class="language-js">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:4523/mock/673120"</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"getUser?id=123&amp;author=ada"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"getInfo"</span><span class="token punctuation">,</span> <span class="token string">"cid=10000&amp;region=mock"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实例封装"><a href="#实例封装" class="headerlink" title="实例封装"></a>实例封装</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><ul><li>有时候后台接口地址有多个并且超时时长不一样，我们不可能在axios中把每个后台请求的域名地址都拼接在URl中，并且在axios中的config写不同的超时时长，很繁琐，这个时候可以用到axios实例，在实例中可以配置这两种参数。</li><li>如果新建了一个axios实例但是没有参数，取得就是全局的配置值，实例中如果有则优先取实例中的</li><li>axios实例的相关配置（config参数）<ul><li>baseURL：请求的域名基本地址（如：<a href="http://localhost:8080）">http://localhost:8080）</a></li><li>timeout：后端定义的超时时长（默认是1000ms）</li><li>url：请求的路径（如：/data.json）</li><li>method：请求方法（get、post…..）</li><li>headers：设置请求头</li><li>params：请求的参数拼接在url中</li><li>data：请求的参数放在request body中</li></ul></li></ul><h2 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h2><ul><li>如果同时定义了 axios.defaults 和实例中定义了同样的优先会用实例自己的</li><li>如果实例中没有定义会使用 axios.defaults 的</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> user <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token operator">:</span> <span class="token string">"http://127.0.0.1:4523/mock/673120"</span><span class="token punctuation">,</span>    timeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> getUser <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token operator">:</span> <span class="token string">"http://127.0.0.1:4523/mock/673120/getUser"</span><span class="token punctuation">,</span>    timeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> info <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token operator">:</span> <span class="token string">"http://127.0.0.1:4523/mock/673120"</span><span class="token punctuation">,</span>    timeout<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"getUser?id=111&amp;author=ada"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>info<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"getInfo"</span><span class="token punctuation">,</span> <span class="token string">"cid=10000&amp;region=mock"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> author<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220301214657070.png" alt="创建实例"></p><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li>拦截器分为请求拦截器 和响应拦截器</li><li>实际用途：①请求拦截器：比如为每个请求都带上的参数，比如token，时间戳等 ②响应拦截器：比如对返回的状态进行判断，如token是否过期</li><li>拦截器可以为整个 axios 设置，也可以针对具体的某个实例进行设置</li><li>在使用拦截器的时候 响应拦截器可以进行设置只放行状态为 200 的，并且只放行 data（我们只return data数据）</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">let</span> getUser <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token operator">:</span> <span class="token string">"http://127.0.0.1:4523/mock/673120/getUser"</span><span class="token punctuation">,</span>    timeout<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>    method<span class="token operator">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> info <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    baseURL<span class="token operator">:</span> <span class="token string">"http://127.0.0.1:4523/mock/673120"</span><span class="token punctuation">,</span>    timeout<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>info<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"info 请求拦截的配置和操作比如添加 token onFulfilled 状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token comment">// 一定要加这个 放行 不然就截住了请求</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"info 请求拦截失败了会走下面这个代码块 onRejected 状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>info<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"getInfo"</span><span class="token punctuation">,</span> <span class="token string">"cid=10000&amp;region=mock"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>getUser<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getUser onFulfilled 状态 响应拦截的配置和操作比如只放行状态码为 200 的 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回时也一定要放行，而且可以只放行 data 下的内容（这个里面才是接口返回的数据），不然就截住了返回的数据了 前端就拿到接口返回的数据</span>    <span class="token keyword">return</span> config<span class="token punctuation">.</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"getUser 响应拦截失败了会走下面这个代码块 onRejected 状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    params<span class="token operator">:</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span> author<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220301223331458.png" alt="拦截器"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li>一些常用的配置 添加 token 和返回状态的设置（全局 axios 有效）</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">config</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 每次发送请求之前判断是否存在token</span>        <span class="token comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span>        <span class="token comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span>        <span class="token keyword">const</span> token <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        token <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> config<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>    <span class="token parameter">response</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据</span>        <span class="token comment">// 否则的话抛出错误</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 服务器状态码不是2开头的的情况</span>    <span class="token comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码</span>    <span class="token comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span>    <span class="token comment">// 下面列举几个常见的操作，其他需求可自行扩展</span>    <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;Axios，是一个基于promise网络请求库，作用于&lt;a href=&quot;https://baike.baidu.com/item/node.js/7567977&quot;&gt;node.js&lt;/a&gt;和&lt;a href=&quot;https://baike.baidu.com/item/%E6%B5%8F%E8%A7%88%E5%99%A8/213911&quot;&gt;浏览器&lt;/a&gt;中，它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在&lt;a href=&quot;https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E7%AB%AF/6492316&quot;&gt;服务端&lt;/a&gt;它使用原生node.js &lt;a href=&quot;https://baike.baidu.com/item/http/243074&quot;&gt;http&lt;/a&gt;模块, 而在客户端 (浏览端) 则使用XMLHttpRequests&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="Axios" scheme="https://www.adalucky.com/tags/Axios/"/>
    
    <category term="前端基础" scheme="https://www.adalucky.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript 6</title>
    <link href="https://www.adalucky.com/auto/es6/"/>
    <id>https://www.adalucky.com/auto/es6/</id>
    <published>2022-02-24T13:23:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ECMAScript 6.0，简称ES6，是JavaScript语言的下一代标准，已经在2015年6月正式发布。其目标为使JavaScript可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=586217027&amp;bvid=BV1Pz4y1S7Uv&amp;cid=283046856&amp;page=28" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="ECMAScript-6语法和应用"><a href="#ECMAScript-6语法和应用" class="headerlink" title="ECMAScript 6语法和应用"></a>ECMAScript 6语法和应用</h1><ul><li>ECMAScript 2015 花费6年时间敲定,是一个很大的发行版</li><li>认识ES6</li><li>函数的参数</li><li>ES6兼容性解决</li><li>解构赋值</li><li>let和 const</li><li>Classl的用法</li><li>箭头函数</li><li>JSON的新应用</li><li>数组的新增方法</li><li>Module模块</li><li>Map数据结构</li><li>ES7-ES11的一些新特性介绍</li><li>字符串和新增方法和模版字符串</li></ul><h1 id="ECMAScript和-JavaScrip的关系"><a href="#ECMAScript和-JavaScrip的关系" class="headerlink" title="ECMAScript和 JavaScrip的关系"></a>ECMAScript和 JavaScrip的关系</h1><ul><li><p>ECMA是“European Computer Manufacturers Association”的缩写,中文称欧洲计算机制造联合会。这个组织的目标是评估,开发和认可电信和计算机标准。</p></li><li><p>ECMA是标准, JavaScript是实现</p><ul><li>类似HTML5是标准,IE10、 Chrome、FF都是实现</li><li>目的是让所有前端脚本都实现ECMA</li><li>目前只有 JavaScript实现ECMA标准, ECMAScript≈Js</li></ul></li><li><p>ECMAScript简称ECMA或ES(ES6)</p></li><li><p>目前版本</p><ul><li>高级浏览器支持ES6</li><li>低级浏览器主要支持ES3.1</li></ul></li></ul><h1 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h1><table><thead><tr><th><strong>时间</strong></th><th><strong>版本</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>1996 年 11月</td><td></td><td>JavaScript 的创造者 Netscape 公司将 JavaScript 提交给标准化组织 ECMA。</td></tr><tr><td>1997年</td><td>ES1</td><td>ECMA 发布 262 号标准文件（ECMA-262），规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript (ES).</td></tr><tr><td>1998年</td><td>ES2</td><td>内容编辑加工，没有特性修改。</td></tr><tr><td>1999年</td><td>ES3</td><td>有较完善的修改，成为JavaScript的通行标准，得到了广泛支持。</td></tr><tr><td>2000年</td><td>ES4</td><td>2008年终止也称作JavaScript 2，因改动太大没有通过，Harmony项目启动来跟进，ES4大部分内容被 ES6 继承. Harmony部分内容放到ES6之后。</td></tr><tr><td>2009年</td><td>ES5(ES3.1)</td><td>新功能主要包括：JSON对象（包含parse/stringify等方法）、Array和Object增加一些方法，严格模式（use strict），函数的bind方法。</td></tr><tr><td>2011年</td><td>ES5.1</td><td>成为 ISO 国际标准（ISO/IEC 16262:2011)， 到了2012年底，主流浏览器都支持ECMAScript 5.1的全部功能</td></tr><tr><td>2015年</td><td>ES2015(ES6)</td><td><code>做了大量的更新，但向后兼容。ES6是一次重大改进。 部分功能：let/const、变量的解构赋值、Promise、箭头函数…</code></td></tr><tr><td>2016年</td><td>ES2016(ES7)</td><td>新功能主要包括： 1. Array.prototype.includes检查数组中是否存在值；（区别ES6字符串的includes方法） 2. Exponentiation Operator 求幂运算 (a ** b等价于Math.pow(a,b))</td></tr><tr><td>2017年</td><td>ES2017(ES8)</td><td>部分功能： 1.Object.values/entries/getOwnPropertyDescriptors 2.String.prototype.padStart/padEnd 3.函数参数列表和调用中的尾逗号（Trailing commas） 4.Async Functions 异步函数（async/await）</td></tr><tr><td>2018年</td><td>ES2018(ES9)</td><td>现在已经可用了。新增异步迭代、Promise.finally()、Rest/Spread 属性、正则表达式命名捕获组、正则表达式反向断言、非转义序列的模板字符串……</td></tr></tbody></table><h1 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let&amp;const"></a>let&amp;const</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>为什么ES6新增 let 关键字声明变量：因为最起初 JavaScript 设计是写一写小的项目，当时没有考虑的很全面，后面使用的人多了，var 声明变量就暴露了它的缺陷</li></ul><h2 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h2><h3 id="var可以重复声明"><a href="#var可以重复声明" class="headerlink" title="var可以重复声明"></a>var可以重复声明</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    重复声明<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220224222411594.png" alt="var重复声明"></p><h3 id="var无法限制修改"><a href="#var无法限制修改" class="headerlink" title="var无法限制修改"></a>var无法限制修改</h3><ul><li>var无法限制修改</li><li>var没有块级作用域{}  if(){块内}  for(){块内}</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//这里没有限制代码块中变量 a 的作用域，其实是希望这里没办法使用到变量 a</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"ada"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"阿达"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//这里在 if 块内的赋值修改了 if 块外的 name 变量，期望的是 if 块内打印的是【阿达】，块外打印的是 【ada】 没有限制修改</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220224223940737.png" alt="未限制修改和没有块级作用域"></p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><ul><li>let 不支持变量提升</li><li>var 不管放在哪里定义 都会把 var 语句提升到最前面</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(var变量提升)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token keyword">var</span> 支持变量提升<span class="token operator">--</span><span class="token operator">&gt;</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(let不支持变量提升)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    <span class="token keyword">let</span> 不支持变量提升<span class="token operator">--</span><span class="token operator">&gt;</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> a<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220224233950854.png" alt="变量提升"></p><h2 id="解决方法（闭包-amp-let）"><a href="#解决方法（闭包-amp-let）" class="headerlink" title="解决方法（闭包&amp;let）"></a>解决方法（闭包&amp;let）</h2><ul><li>ES6 以前的解决方法是通过<code>闭包</code>的方式解决</li><li><code>var 在块级中没有作用域但是在方法中有作用域</code></li></ul><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><ul><li>需求：块内输出块内自己的变量值，块外输出块外的变量值</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"ada"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nameStr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> nameStr<span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"闭包中的输出："</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"阿达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 括号中的值是方法中 nameStr 传递的参数</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"变量 var 的输出"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220224225629511.png" alt="示例一"></p><h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><ul><li>需求：有 5 个按钮，每次点击打印对应的按钮序号</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(var_before)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮五<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//按钮添加监听事件</span>    <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(var_after闭包)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮五<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//按钮添加监听事件</span>    <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220224231308389.png" alt="示例二"></p><h3 id="示例三（let）"><a href="#示例三（let）" class="headerlink" title="示例三（let）"></a>示例三（let）</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(let定义)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮三<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮四<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>按钮五<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//按钮添加监听事件</span>    <span class="token keyword">let</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220224232209558.png" alt="示例三"></p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><ul><li>限制修改（常量方式）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>以后都不用 var</li><li>如果变量需要修改就用 let</li><li>如果变量不希望修改就用 const 定义为常量</li><li>箭头函数定义的方法用 const 对象用 const 普通变量和数组用 let（我的个人习惯）</li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>ES6 新增 let 和 const 命令,用来声明变量,用法类似于 var</li><li>let 声明的变量,只在 let 命令所在的代码块內有效</li><li>let 命令不存在变量提升</li><li>let 命令不允许在相同作用域内,重复声明同一个变量</li></ul><h3 id="const-1"><a href="#const-1" class="headerlink" title="const"></a>const</h3><ul><li>let 拥有的特性 const 也拥有</li><li>const 不可以像 let 一样分步声明，例如： let a; a=10;  因为 const 的值不可改变，一旦定义了就不能修改，所以后面也不能进行赋值了</li><li>const 命令声明一个只读的常量。一旦声明,常量的值就不能改变</li><li>const 命令声明的常量不得改变值。即一旦声明就必须立即初始化。</li><li>const 命令声明的常量,只在声明所在的块级作用域内有效</li><li>const 命令声明的常量不提升,只能在声明的位置后使用</li><li>const 命令声明的常量,与let一样不可重复声明</li><li>const 命令声明的<code>复合类型的数据</code>(主要是对象和数组),变量指向的内存地址</li><li><code>const定义的基本类型不可修改,复合类型（对象，数组）也不可以修改</code>,复合类型的<code>属性是可以修改</code>的 直接修改基本类型或者复合类型相当于修改栈内存中的地址是不允许的，修改复合类型对象的属性其实是修改该类型指向堆内存中的属性不受影响</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//const定义的常量不可修改,对象也不可以修改,对象的属性是可以修改的</span><span class="token keyword">const</span> obj <span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">'lisi'</span><span class="token punctuation">;</span>  <span class="token comment">//这个是支持的,因为修改的是对象在堆里面的值</span>obj<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'李四'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//不支持,因为是重新创建了一个堆的对象{name:'李四',age:10,sex:'男'}然后赋值给栈里面的obj所以不可修改(栈内存)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul><li>const:不可修改（可以理解常量 java 中的 final）</li><li>let:可以修改，（可以理解为变量）</li></ul><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>ES6 允许使用“箭头”（=&gt;）定义</li><li>不需要参数或需要多个参数，就用圆括号代</li><li>代码块部分多于一条语句，就用大括号括起来，并且用return返回</li><li>箭头函数返回对象时，必须在对象外面加上括号</li><li>箭头函数使得表达更加简洁</li><li>箭头函数能够简化回调函数</li><li>箭头函数类似于 jdk8 中的 lamda 表达式</li></ul><h2 id="示例一（箭头函数基本使用）"><a href="#示例一（箭头函数基本使用）" class="headerlink" title="示例一（箭头函数基本使用）"></a>示例一（箭头函数基本使用）</h2><ul><li>基本规则：1.把 function 换成 =&gt;  2.把 =&gt; 放在参数和 {} 的中间</li><li>如果只有一个参数   = <code>等号和箭头中间写形参名</code> =&gt;</li><li>如果 { } 大括号代码块内只有一条语句不用写 <code>return 和大括号{ } </code> 这里是同时都不写</li><li>return 和大括号{ }一般是成对出现的，有大括号一般都有 return，如果有大括号里面哪怕只有一条语句也要加上 return 不然调用该方法的时候会出现 undefined</li><li>如果有多个参数或者没有参数也必须要用 () 来定义参数列表，没有参数的时候括号内就空着</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(箭头函数示例一)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">fun2</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> b <span class="token operator">*</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第一次演变：1.把 function 换成 =&gt;  2.把 =&gt; 放在参数和 {} 的中间</span>    <span class="token keyword">const</span> <span class="token function-variable function">fun3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> c <span class="token operator">*</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun3</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第二次演变：1.如果只有一个参数   = 等号和箭头中间写形参名 =&gt;   2.如果 { } 大括号代码块内只有一条语句不用写 return 和大括号{ }</span>    <span class="token keyword">const</span> <span class="token function-variable function">fun4</span> <span class="token operator">=</span> <span class="token parameter">d</span> <span class="token operator">=&gt;</span> d <span class="token operator">*</span> d<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun4</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第三次演变：如果有多个参数或者没有参数也必须要用 () 来定义参数列表，没有参数的时候括号内就空着</span>    <span class="token keyword">const</span> <span class="token function-variable function">fun5</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> f<span class="token punctuation">,</span> g</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> add <span class="token operator">=</span> e <span class="token operator">+</span> f <span class="token operator">+</span> g<span class="token punctuation">;</span>        <span class="token keyword">return</span> add<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun5</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第四次演变：1.没有参数也要用括号 () 来定义参数列表  2.方法体内只有一条语句不用加大括号 { } 和 return 关键字</span>    <span class="token keyword">const</span> <span class="token function-variable function">fun6</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220225130638912.png" alt="箭头函数基本使用"></p><h2 id="示例二（数组排序）"><a href="#示例二（数组排序）" class="headerlink" title="示例二（数组排序）"></a>示例二（数组排序）</h2><ul><li>方法的演变还是和上面示例一相同，1.把 function 换成 =&gt;  2.把 =&gt; 放在参数和 {} 的中间</li><li>箭头函数的函数体只有一条语句 不用加 { } 和 return</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(箭头函数数组排序)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//数组升序排列 从小到大  i - j 表示从小到大  j - i 表示从大到小</span>    <span class="token keyword">const</span> asc <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>asc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//箭头函数数组降序序排列 从大到小  j - i 表示从大到小</span>    <span class="token keyword">const</span> desc <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> j <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220225125918624.png" alt="数组排序"></p><h2 id="示例三（箭头函数返回对象）"><a href="#示例三（箭头函数返回对象）" class="headerlink" title="示例三（箭头函数返回对象）"></a>示例三（箭头函数返回对象）</h2><ul><li>返回的对象 obj 需要用法大括号包裹起来和箭头函数的大括号有冲突，所以可通过外面包裹一层 <code>大括号+return</code> 或者用<code>小括号</code>包括返回的对象</li><li>不能直接像上面那样只有一条语句连对象的大括号都不写，对象需要用大括号包裹的不然 IDE 工具就会报错</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(箭头函数返回对象)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//方式一：箭头函数返回对象时语法   { return {返回的对象内容} }    如果只写里面的对象的括号语法会以为是箭头函数的大括号</span>    <span class="token keyword">const</span> <span class="token function-variable function">fun1</span> <span class="token operator">=</span> <span class="token parameter">id</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>id<span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"阿达"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//方式二：其实我们只有一条语句不想写 return 语句，就用小括号括住返回的对象  ( { 返回的对象 } )</span>    <span class="token keyword">const</span> <span class="token function-variable function">fun2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>id<span class="token operator">:</span> id<span class="token punctuation">,</span> name<span class="token operator">:</span> name<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">"adalucky"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">"adalucky"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">10002</span><span class="token punctuation">,</span> <span class="token string">"adalucky"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220225210400086.png" alt="箭头函数返回对象"></p><h2 id="示例四（构造方法）"><a href="#示例四（构造方法）" class="headerlink" title="示例四（构造方法）"></a>示例四（构造方法）</h2><ul><li>箭头函数没有构造方法，因此不能用箭头函数定义一个方法然后还去 new 这个方法</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块（构造方法错误示例）</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">function</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> fun1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">demo2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> fun2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 控制台会提示 Uncaught TypeError: demo2 is not a constructor    demo2不是一个构造方法，因为 dome2 是用箭头函数定义的，箭头函数没有构造方法</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun2<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220225211957942.png" alt="构造方法"></p><h2 id="关于箭头函数中的this的指向"><a href="#关于箭头函数中的this的指向" class="headerlink" title="关于箭头函数中的this的指向"></a>关于箭头函数中的this的指向</h2><h3 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h3><ul><li>普通函数的this：指向它的调用者，如果没有调用者则默认指向window.</li><li>箭头函数的this: 指向箭头函数定义时所处的对象，而不是箭头函数使用时所在的对象，默认使用父级的this.</li><li>综上：箭头函数没有自己的this，它的this是继承而来，默认指向在定义它时所处的对象(宿主对象)。</li><li>上面三条看起很懵，没关系接着看下面的两个示例看完再回来理解这三条的含义</li></ul><h3 id="示例一-1"><a href="#示例一-1" class="headerlink" title="示例一"></a>示例一</h3><ul><li>普通函数，谁调用这个方法，this 就代表谁，没有人调用直接运行就代表最大的 window 对象</li><li>箭头函数跟调用者无关，指向的是函数定义时所处的对象，可以理解为父级的 this 对象，如果父级没有，就再往上找，最后是到 window 对象</li><li>下图中 arrowThis2.html 的 fun1 定义在 adaThis2对象,该对象直接是在 window 里面定义的，因此上下文的 tihs 就是 window 所以无论怎么调用都会指向 window 对象</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(普通函数this指向)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//定义了一个对象 adaThis1 里面 代码块的形式定义了一个方法fun1</span>    <span class="token comment">//定义的方法语法有点类似 json 格式 f:f(){}</span>    <span class="token keyword">const</span> adaThis1 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function-variable function">fun1</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//用 adaThis1 这个对象调用运行 fun1---&gt;</span>    <span class="token comment">// this 就会指向它的调用者 也就会是这个 adaThis1</span>    adaThis1<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//没有对象调用，直接用运行 fun2() 就会指向 window 对象</span>    <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(箭头函数this指向)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//对象adaThis2 代码块箭头函数的形式定义了一个方法 fun1</span>    <span class="token comment">//定义的方法语法有点类似 json 格式 f:f(){}</span>    <span class="token keyword">const</span> adaThis2 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token function-variable function">fun1</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">//用 adaThis2 这个对象调用运行 fun1---&gt;</span>    <span class="token comment">//this 指向箭头函数定义时所处的对象，而不是箭头函数使用时所在的对象，默认使用父级的this</span>    adaThis2<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220225222600579.png" alt="this 指向示例一"></p><h3 id="示例二-1"><a href="#示例二-1" class="headerlink" title="示例二"></a>示例二</h3><ul><li>再次强调<code>普通函数的 this 指向和调用者有关</code></li><li>下面的内容主要是针对示例一更加直观的解释 this 指向问题（普通函数）</li><li>左侧代码大致的意思是定义了一个 box，设置了css 属性，当发生点击时添加新的样式进来，右侧是把添加新样式的方法写在了 setTimeout 里面等待三秒，因为 setTimeout 是 window 的对象，所以调用者不是 box 因此无法改变颜色，通过对比来阐述普通函数 this 对象指向的是调用者</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(左侧代码)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">#box</span> <span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">#box.newColor</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"newColor"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(右侧代码)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">#box</span> <span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">#box.newColor</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"newColor"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220225230434521.png" alt="this 指向示例二"></p><h3 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h3><ul><li>本内容是对示例二中添加了 setTimeout 函数无法改变颜色获取我们期望的对象做修复</li><li>普通函数就在 setTimeout 前获取 this 对象，命名为 obj，此时的 obj 指向的是 box 对象，再用这个 obj 调用就相当于用 box 调用 <code>普通函数 this 指向和调用者有关</code></li><li><code>箭头函数与调用者无关,指向箭头函数定义时所处的对象</code></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(左侧代码)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">#box</span> <span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">#box.newColor</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//此时的 this 是 box，把 this 赋给 obj</span>        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//用上面赋值的 obj 调用就相当于用 box 调用</span>            obj<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"newColor"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(右侧代码)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token selector">#box</span> <span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">#box.newColor</span> <span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    box<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>            <span class="token comment">//箭头函数 this 指向和调用者无关，指向箭头函数定义时所处的对象</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">"newColor"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220225233944296.png" alt="this 指向示例三"></p><h1 id="数组新方法"><a href="#数组新方法" class="headerlink" title="数组新方法"></a>数组新方法</h1><h2 id="常用新增方法"><a href="#常用新增方法" class="headerlink" title="常用新增方法"></a>常用新增方法</h2><ul><li>filter   过滤器(过滤掉不符合条件的数据)</li><li>map      映射（把数据映射到新的对象中） </li><li>reduce   汇总（统计求和）</li><li>some()   数组中有一个为真就返回真—&gt;待补充（判断时候用）</li><li>every()  数组中有全部为真才返回真—&gt;待补充（判断时候用）</li><li>需求：有一批商品，现在要做促销活动，把价格大于等于 10 的商品打 5 折后计算此次促销会少赚多少钱 通过该需求进行 ES6 高级函数的演示</li></ul><h2 id="示例一-2"><a href="#示例一-2" class="headerlink" title="示例一"></a>示例一</h2><ul><li>示例一中将用以前<code>原始的写法</code>进行实现需求</li><li><code>let n of array 语法可以了解一下</code></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//需求：有一批商品，现在要把大于或等于 10 元的商品促销打 5 折处理</span><span class="token comment">// ①过滤 &gt;=10元的商品 ②把过滤的商品打 5 折 ③列出促销产品打折前后的价格 ④计算此次促销少赚多少钱</span><span class="token keyword">let</span> goods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> step1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//步骤一：定义了一个空的数组用于存放 &gt;= 10的商品价格（过滤）</span><span class="token comment">//let n of goods  该语法相当于会去循环 goods 数组，循环的次数就是数组的长度，n 是每次循环对应下标的值</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> goods<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        step1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>step1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> step2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//步骤二：定义了一个空的数组用于存放 &gt;= 10的商品价格打 5 折以后的价格（打折）</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> step1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    step2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>step2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> beforeSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//定义两个数组用于存放促销商品打折前后的价格</span><span class="token keyword">let</span> afterSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> step1<span class="token punctuation">)</span><span class="token punctuation">{</span>    beforeSum <span class="token operator">+=</span> n<span class="token punctuation">;</span> <span class="token comment">//步骤三：促销产品打折前价格</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> step2<span class="token punctuation">)</span><span class="token punctuation">{</span>    afterSum <span class="token operator">+=</span> n<span class="token punctuation">;</span> <span class="token comment">//步骤三：促销产品打折后价格</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"促销产品原始总价："</span><span class="token operator">+</span>beforeSum<span class="token operator">+</span><span class="token string">",促销产品打折后总价："</span><span class="token operator">+</span>afterSum<span class="token operator">+</span><span class="token string">",少盈利："</span><span class="token operator">+</span><span class="token punctuation">(</span>beforeSum<span class="token operator">-</span>afterSum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226014546374.png" alt="原始写法"></p><h2 id="示例二-2"><a href="#示例二-2" class="headerlink" title="示例二"></a>示例二</h2><ul><li>示例二中采用 ES6 中新增的高级方法 <code>filter</code> <code>map</code> <code>reduce</code> 实现</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//需求：有一批商品，现在要把大于或等于 10 元的商品促销打 5 折处理</span><span class="token comment">// ①过滤 &gt;=10元的商品 ②把过滤的商品打 5 折 ③列出促销产品打折前后的价格 ④计算此次促销少赚多少钱</span><span class="token keyword">let</span> goods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> step1 <span class="token operator">=</span> goods<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//步骤一：过滤 &gt;= 10的商品价格,参数 n 为每次遍历数组 goods 后的结果，当 n &gt;=10（布尔表达式） 才返回到数组中</span>    <span class="token keyword">return</span> n <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token comment">// step1 = [ 10, 20, 30, 90, 100 ]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>step1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> step2 <span class="token operator">=</span> step1<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//步骤二：打折后映射到新的数组 step2 中，参数 n 为每次遍历数组 step1 后的结果,打 5 折后返回至 step2 中</span>    <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">;</span> <span class="token comment">//step2 = [ 5, 10, 15, 45, 50 ]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>step2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> beforeSum <span class="token operator">=</span> step1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//有两个参数 s,n  s给了一个初始值就是后面的 0(不给值默认也是 0) ，n 遍历数组中的每一个对象值</span>    <span class="token comment">//第一次：s=0,n=10(step1中第一个元素)，return 后 s=10（s+=n -&gt; s=s+n),beforeSum=10;</span>    <span class="token comment">//第二次：s=10,n=20, return 后 s=30,beforeSum=30;  第三次：s=30,n=30,return 后 s=60,beforeSum=60</span>    <span class="token keyword">return</span> s <span class="token operator">+=</span> n<span class="token punctuation">;</span> <span class="token comment">//步骤三：促销产品打折前价格</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">let</span> afterSum <span class="token operator">=</span> step2<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s <span class="token operator">+=</span> n<span class="token punctuation">;</span> <span class="token comment">//步骤三：促销产品打折后价格</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"促销产品原始总价："</span> <span class="token operator">+</span> beforeSum <span class="token operator">+</span> <span class="token string">",促销产品打折后总价："</span> <span class="token operator">+</span> afterSum <span class="token operator">+</span> <span class="token string">",少盈利："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>beforeSum <span class="token operator">-</span> afterSum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226012729947.png" alt="高级函数语法"></p><h2 id="示例三-1"><a href="#示例三-1" class="headerlink" title="示例三"></a>示例三</h2><ul><li>在示例二的基础上进行<code>链式编程方式</code>，更加优雅的实现</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//需求：有一批商品，现在要把大于或等于 10 元的商品促销打 5 折处理</span><span class="token comment">// ①过滤 &gt;=10元的商品 ②把过滤的商品打 5 折 ③列出促销产品打折前后的价格 ④计算此次促销少赚多少钱</span><span class="token keyword">let</span> goods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//促销产品打折前价格:采用链式编程，过滤-&gt;映射-&gt;汇总</span><span class="token keyword">let</span> afterSum <span class="token operator">=</span> goods<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> s <span class="token operator">+=</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//-----这两个其实都是一样的故意用两种写法 因为箭头函数中只有一条语句可写可不写 return + {} -----</span><span class="token comment">//reduce 如果不传参默认就是 0，如果传参的话写在箭头函数 } 的后面，用逗号分割参数</span><span class="token comment">//促销产品打折后价格:  采用链式编程，过滤-&gt;映射-&gt;汇总</span><span class="token keyword">let</span> beforeSum <span class="token operator">=</span> goods<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> n <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span> <span class="token keyword">return</span>  n<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> s <span class="token operator">+=</span> n<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"促销产品原始总价："</span><span class="token operator">+</span>beforeSum<span class="token operator">+</span><span class="token string">",促销产品打折后总价："</span><span class="token operator">+</span>afterSum<span class="token operator">+</span><span class="token string">",少盈利："</span><span class="token operator">+</span><span class="token punctuation">(</span>beforeSum<span class="token operator">-</span>afterSum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226014409543.png" alt="高级函数链式编程"></p><h1 id="数据结构集合"><a href="#数据结构集合" class="headerlink" title="数据结构集合"></a>数据结构集合</h1><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><ul><li>set 集合和 java 的 set 集合差不多</li><li>集合中只能存放值，没有键，相同的值只能存储一个</li><li>一个 set 集合中可以同时存放不同的数据类型，比如整型，字符串，数组等</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>常用方法：<code>add</code> <code>delete</code> <code>has</code> <code>size</code> <code>forEach</code> <code>clear</code></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// add 添加数据</span>obj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 添加数据重复数据是无效的</span>obj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断集合中是否有 1，返回的是一个布尔值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除集合中等于 2 的值，删除成功返回 true ，删除失败返回 false，这里面没有 2 就会删除失败返回 false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 两种遍历方式</span>obj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">n</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"forEach遍历结果："</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token keyword">of</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//清空集合</span>obj<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取集合大小</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226124242701.png" alt="set 示例"></p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><ul><li>也和 java 的差不多，通过键值对存储  key-&gt;value</li><li>Map 数据结构类似于对象，是键值对的集合，传统的键只能用字符串，Map 的键不限于字符串，各种类型的值（包括对象）都可以当作键。</li><li>属性和操作方法<ul><li>size 属性，返回 Map 结构的成员总数</li><li>set(key,value)方法，设置set方法设置键名key对应的键值为value，然后返回整个 Map 结构。如果key已经有值，则键值会被更新，否则就新生成该</li><li>get(key) 方法，读取key对应的键值，如果找不到key，返回undefined</li><li>has(key) 方法，返回一个布尔值，表示某个键是否在当前 Map 对象之中。</li><li>delete(key) 方法，删除某个键，返回true。如果删除失败，返回false。</li><li>clear(key) 方法，清除所有成员，没有返回值。</li></ul></li><li>Map 遍历<ul><li>keys()  返回键名的遍历器</li><li>values() 返回键值的遍历器</li><li>entries()返回所有成员的遍历器</li><li>forEach()遍历Map的所有成员</li></ul></li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ul><li>常用方法：<code>set</code> <code>get</code> <code>forEach</code> <code>has</code> <code>size</code></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> mapObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mapObj<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mapObj<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapObj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapObj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重复的key,value 会覆盖 上面输出的 ada 下面输出的 阿达</span>mapObj<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"阿达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapObj<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//遍历 和 java 的 lambda 一样一样的</span>mapObj<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">k<span class="token punctuation">,</span>v</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"key:"</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token string">",value:"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//删除 age</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapObj<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//判断是否有 name</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapObj<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取大小</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapObj<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226130705034.png" alt="map 示例"></p><h1 id="字符串新功能"><a href="#字符串新功能" class="headerlink" title="字符串新功能"></a>字符串新功能</h1><ul><li>startsWith    判断以什么字符串开头</li><li>endsWith      判断以什么字符串结尾</li><li>模板字符串</li></ul><h2 id="判断开头与结尾"><a href="#判断开头与结尾" class="headerlink" title="判断开头与结尾"></a>判断开头与结尾</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token string">"www.adalucky.com"</span><span class="token comment">/** * * @param s 域名.前面部分 * @param e 域名.后面部分 * @returns {string} */</span><span class="token keyword">const</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">s<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// return "是一个标准的【"+s+"】开头，【"+e+"】结尾的域名"</span>        <span class="token comment">// 上面注释的是普通字符串拼接的变量，下面是用模板字符串 `` ${} 引用变量</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">是一个标准的【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】开头，【</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>e<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">】结尾的域名</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"不是一个标准的【www】开头，【com】结尾的域名"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"www"</span><span class="token punctuation">,</span> <span class="token string">"com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"www."</span><span class="token punctuation">,</span> <span class="token string">".com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"vip"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226141409496.png" alt="判断开头结果"></p><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><ul><li>模板字符串 ``定义字符 ${} 引用变量</li><li>支持换行</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token string">"这是标题"</span><span class="token punctuation">;</span><span class="token keyword">let</span> slogan <span class="token operator">=</span> <span class="token string">"这是标语 slogan"</span><span class="token punctuation">;</span><span class="token comment">//里面还可以拼接标签 &lt;title&gt;${title}&lt;/title&gt; 这使用方法，换行会直接换行</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">模板字符串中直接引用变量不需要用加号隔开</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>slogan<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span><span class="token template-punctuation string">`</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//换行也会自动用加号拼接 最后打印都是一行</span><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">"字符串拼接"</span>    <span class="token operator">+</span> title    <span class="token operator">+</span> sloganconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226141039948.png" alt="模板字符串示例"></p><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><h2 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h2><ul><li>解构赋值，序列解包，</li><li>注意事项：结构构必须一样，比如数组两边都需要用数组[a,b,c]=[1,2,3] 对象{UserName,UserAge,UserSex}={“name”: “ada”, “age”: “25”, “sex”: “男”}</li><li>接受的参数个数不能操作数据的长度，可以少，当少于长度时按照从左到右顺序解构</li><li>解构赋值不能像定义变量一样分开声明和赋值，例如 let [a,b]; [a,b]=[1,2]</li></ul><h2 id="基础的解构"><a href="#基础的解构" class="headerlink" title="基础的解构"></a>基础的解构</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> b <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> c <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,b=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,c=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> UserName <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token keyword">let</span> UserAge <span class="token operator">=</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token keyword">let</span> UserSex <span class="token operator">=</span> obj<span class="token punctuation">.</span>sex<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>UserName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,age:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>UserAge<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,sex:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>UserSex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//等号右边可以是引用的数组，也可以直接显示声明数组 [a, b, c] = [1, 2, 3,4]</span><span class="token comment">//两边的结构保持一致都是数组，接受的参数个数可以小于数组的长度 不能超出长度</span><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>a<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,b=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>b<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,c=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>c<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//直接显示声明，对象结构的是按照 key 取得所有参数名和对象中的 key 要一致，顺序无所谓</span><span class="token keyword">let</span> <span class="token punctuation">{</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>name<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"sex"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">name:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,age:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,sex:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226150138708.png" alt="基础解构"></p><h2 id="复杂的解构"><a href="#复杂的解构" class="headerlink" title="复杂的解构"></a>复杂的解构</h2><ul><li>这种复杂的一般比较少不常用</li><li>①先确定外层结构两边保持一至 ②内层结构中有对象+数组的 那么用 对象名:[] 来二次结构 ③对象的数组中又有对象用，对象名:[{对象名}]</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//较为复杂的组合结构  ①先确定外层结构两边保持一至 ②内层结构中有对象+数组的 那么用 对象名:[] 来二次结构 ③对象的数组中又有对象用，对象名:[{对象名}]</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">,</span> four<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">,</span> four<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> c1<span class="token punctuation">]</span><span class="token punctuation">,</span> str1<span class="token punctuation">,</span> number1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"ada1"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"字符串"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> a1<span class="token punctuation">,</span> b1<span class="token punctuation">,</span> c1<span class="token punctuation">,</span> str1<span class="token punctuation">,</span> number1<span class="token punctuation">)</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>obj<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> number2<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"obj"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"arr"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"str2"</span><span class="token operator">:</span> <span class="token string">"字符"</span><span class="token punctuation">,</span> <span class="token string">"number2"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> arr<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> number2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>obj<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">,</span>age<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token operator">:</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> str3<span class="token punctuation">,</span> number3<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"obj"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"ada3"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token operator">:</span> <span class="token string">"27"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"arr"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"str3"</span><span class="token operator">:</span> <span class="token string">"字符"</span><span class="token punctuation">,</span> <span class="token string">"number3"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token punctuation">,</span>str3<span class="token punctuation">,</span> number3<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> child<span class="token operator">:</span><span class="token punctuation">{</span>firstChild<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'zxj'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span> child<span class="token operator">:</span> <span class="token punctuation">{</span>firstChild<span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226155759354.png" alt="复杂解构示例"></p><h1 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h1><h2 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h2><ul><li>…三点运算符   </li><li>展开数组</li><li>默认参数   <code>和java 中的可变参数一样</code></li></ul><h2 id="数组展开放入"><a href="#数组展开放入" class="headerlink" title="数组展开放入"></a>数组展开放入</h2><ul><li>先展开数组然后按照所在位置存入数组中</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 三个点展开数组然后放进数组中</span><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">argsFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span>arr2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">argsFun</span><span class="token punctuation">(</span><span class="token operator">...</span>arr1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226164659994.png" alt="数组展开放入"></p><h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul><li>如果方法中有自定义的参数和需要可变参数，可变参数需要放在最后一个形参中</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//调用方法是作为参数传递，方法中只需要 2 个参数就会取数组中的前 2 个值</span><span class="token keyword">const</span> <span class="token function-variable function">argsFun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span> arr2<span class="token punctuation">)</span><span class="token function">argsFun</span><span class="token punctuation">(</span><span class="token operator">...</span>arr1<span class="token punctuation">)</span><span class="token comment">//方法中用 ...args 作为可变参数，传进来的会当成一个数组处理，也可根据 ...args 的下标取值</span><span class="token keyword">const</span> <span class="token function-variable function">argsFun2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">argsFun2</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token comment">//如果方法中有自定义的参数和需要可变参数，可变参数需要放在最后一个形参中</span><span class="token comment">//定义的argsFun3中有 2个参数str,number和一个可变参数 ...args  调用的时候只传了一个 str 和一个展开的数组，展开的数组的第一个就会赋给 number，剩下的给可变参数 ...args</span><span class="token keyword">const</span> <span class="token function-variable function">argsFun3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span>number<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">str的值为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>str<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,number的值为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,args的值为: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token function">argsFun3</span><span class="token punctuation">(</span><span class="token string">"字符"</span><span class="token punctuation">,</span><span class="token operator">...</span>arr1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226164814699.png" alt="参数传递"></p><h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><h2 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h2><ul><li>ES6之前 JavaScript 叫做基于对象，ES6 新增了 Class（类）的概念，可以说是面向对象的</li><li>constructor 是构造方法</li><li>this关键字代表实例对象</li><li>通过extends关键字实现继承</li><li>super关键字，表示父类的构造函数，用来新建父类的this对象</li></ul><h2 id="对比-1"><a href="#对比-1" class="headerlink" title="对比"></a>对比</h2><ul><li>通过截图中左右两段代码可看出来 ES6 的定义类、方法、构造方法层次更加清晰</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(ES6before)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//ES6 前既是构造函数又是方法</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"跑起来吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块ES6after</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment">//constructor 构造方法关键字</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ES6后面跑起来了"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> es6User <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"阿达"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男性"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>es6User<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>es6User<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>es6User<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>es6User<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226173822352.png" alt="对比"></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>继承通过关键字 extends 实现</li><li>子类如果重写了父类的方法调用的是子类自己的方法</li><li>子类的方法中如果需要调用父类的其它方法可以使用 super.run() super.say() 这种方式</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是父类的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ES6后面跑起来了"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">students</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token comment">//子类的构造方法，因为我们子类只新增了一个school参数，那么可以用之前的可变参数 ...args 优雅</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">school<span class="token punctuation">,</span><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//在子类的构造方法中调用父类的构造方法后再把新增的 school也给初始化</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>school <span class="token operator">=</span> school<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//子类重写父类的对象方法</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">我是子类的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> es6Student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">students</span><span class="token punctuation">(</span><span class="token string">"十八线学校"</span><span class="token punctuation">,</span><span class="token string">"阿达"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"男性"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>es6Student<span class="token punctuation">)</span><span class="token punctuation">;</span>es6Student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226175904156.png" alt="继承"></p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><ul><li>JSON.stringify()      串行化</li><li>JSON.parse()          反串行化</li><li>简写  <ul><li>(属性和值)名字一样可以简写</li><li>方法一样可以简写（:function省）</li></ul></li></ul><h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> user1 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"阿达"</span><span class="token punctuation">;</span><span class="token keyword">let</span> age1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//简写：name:name --&gt; 简写 name 既是键又是值的引用, age不行，因为对象的 key 叫 age，变量名叫 age1</span><span class="token keyword">const</span> user2 <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token operator">:</span> age1<span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> user3 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">//    对象里面再套一个方法 say:function ()---&gt;简写为 say()</span>    name<span class="token punctuation">,</span> age1<span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>user3<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226185924747.png" alt="json 简写"></p><h2 id="串行化、-反串行化"><a href="#串行化、-反串行化" class="headerlink" title="串行化、 反串行化"></a>串行化、 反串行化</h2><ul><li>串行化：JSON 对象转成 字符串          </li><li>反串行化：JSON 格式的字符串转成 JSON</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> user3 <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">//    对象里面再套一个方法 say:function ()---&gt;简写为 say()</span>    name<span class="token operator">:</span><span class="token string">"ada"</span><span class="token punctuation">,</span> age<span class="token operator">:</span><span class="token number">25</span><span class="token punctuation">,</span> sex<span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//会输出 undefined，此时的 str 已经被串行成了字符串，没有 name 的属性</span><span class="token keyword">let</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>json<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//这一句就会报错，因为上面串行化的时候已经丢失了 say 的方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226191056019.png" alt="串行化和反串行化"></p><h1 id="Module模块化"><a href="#Module模块化" class="headerlink" title="Module模块化"></a>Module模块化</h1><h2 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h2><ul><li>模块化优点：减少命名冲突    避免引入时的层层依赖    可以提升执行效率</li><li>export命令：用于规定模块的对外接口，一个模块就是一个独立的文件。该文件内部的所有变量，外部无法获取。如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。</li><li>import命令：用于输入其他模块提供的功能，import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同。</li></ul><h2 id="冲突示例"><a href="#冲突示例" class="headerlink" title="冲突示例"></a>冲突示例</h2><ul><li>当我们在 html 中引入的 js 时，多个 js 存在重复的变量名、方法名、函数名，就会发生冲突，已经命名的不能重复命名</li><li>解决方法：给每个 js 文件类型都设置成 module，这样都是独立的了</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220226201314324.png" alt="命名冲突报错"></p><h2 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h2><ul><li><code>坑</code>：如果是用 node 运行，导入导出使用的关键分别为 <code>require</code> <code>module.exports</code></li><li><code>坑</code>：如果是用 浏览器 运行，导入导出使用的关键分别为 <code>import</code> <code>export</code></li><li><code>注意事项</code>：如果是用 node 运行,文件后的 .js 可以不写，如果是浏览器运行导出的文件<code>必须写后缀 .js</code> （这里不包含打包工具处理哈，可能有些打包工具会自动处理上述问题）</li><li>导出的时候可以整体用一个 export {导出1,导出 2,…} 也可以在单个上用 export 导出</li><li>导入导出时需要使用到<code>解构赋值</code> <code>JSON 简写</code> 的方式比较简便</li></ul><h3 id="示例一-3"><a href="#示例一-3" class="headerlink" title="示例一"></a>示例一</h3><ul><li>导入时有命名冲突的可在导入方用 as 起别名</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(one.js)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//导出 简写 x:x y:y   json中支持的简写方式 既是Key又是value</span><span class="token comment">//如果是用 node 运行，导出关键字为 module.exports，如果是浏览器运行导出的关键字为 export</span><span class="token comment">// module.exports ={x, y,mun};</span><span class="token keyword">export</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> mun<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">mun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">"这是one.js返回的："</span> <span class="token operator">+</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span><span class="token comment">// console.log(mun(x, y));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(two.js)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">{</span>add<span class="token punctuation">,</span> mun<span class="token punctuation">,</span>Person<span class="token punctuation">}</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"ada"</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">let</span> sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token function-variable function">mun</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">"这是two.js返回的："</span> <span class="token operator">+</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"two.js中 Person 类的 say 方法"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(index.js)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//如果是用 node 运行，导入关键字为 require,文件后的 .js 可以不写，如果是浏览器运行导出的关键字为 import，文件后的 .js 必须写</span><span class="token comment">// let {x, y, mun} = require('./two');</span><span class="token keyword">import</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>mun<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./one.js"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>add<span class="token punctuation">,</span>mun <span class="token keyword">as</span> mun2<span class="token punctuation">,</span>Person<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./two.js"</span>     <span class="token comment">//如果有命名冲突的可以再导入方 as 起个别名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mun</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">mun2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> per <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>per<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(index.html)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226211722140.png" alt="导入导出示例一"></p><h3 id="示例二-3"><a href="#示例二-3" class="headerlink" title="示例二"></a>示例二</h3><ul><li>导出时一个 js 文件最多可以定义一个匿名的 default 导出，由导入方定义名称</li><li>导出的时候也可以通过 as 起别名</li><li>导入的时候可以用 <code>* as name</code> 把暴露的接口都整合在一个对象中，使用时直接用这个对象来操作</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(dome.js)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span> y <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//匿名的，导出方不需要定义名称，导入方自定义，一个 js 文件中只能有一个 default，需要单独写 export</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">"这是one.js，default返回的："</span> <span class="token operator">+</span> i <span class="token operator">*</span> j<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(user.js)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">{</span>name <span class="token keyword">as</span> myName<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> Person<span class="token punctuation">}</span><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"ada"</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">let</span> sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"user.js中 Person 类的 say 方法"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(index.js)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./dome.js"</span><span class="token punctuation">;</span><span class="token comment">//导入方自定义 dome.js 中的匿名函数，需要单独写一个 import 不能放在 {x,y} 中</span><span class="token keyword">import</span> test <span class="token keyword">from</span> <span class="token string">"./dome.js"</span><span class="token punctuation">;</span>    <span class="token comment">// 导入user.js 中暴露出来的接口，并起个别名为 user</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> user <span class="token keyword">from</span> <span class="token string">"./user.js"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>myName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user<span class="token punctuation">.</span>Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(index.html)</div></div><div class="fold"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220226215408000.png" alt="导入导出示例二"></p><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;ECMAScript 6.0，简称ES6，是JavaScript语言的下一代标准，已经在2015年6月正式发布。其目标为使JavaScript可以用来编写复杂的大型应用程序，成为企业级开发语言。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="前端基础" scheme="https://www.adalucky.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="ES6" scheme="https://www.adalucky.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>webpack5</title>
    <link href="https://www.adalucky.com/auto/webpack5/"/>
    <id>https://www.adalucky.com/auto/webpack5/</id>
    <published>2022-02-22T10:00:00.000Z</published>
    <updated>2022-06-13T14:43:37.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>webpack 是代码编译工具，有入口、出口、loader 和插件。webpack 是一个用于现代<a href="https://baike.baidu.com/item/JavaScript/321142">JavaScript</a>应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 <em>bundle</em></p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=586217027&amp;bvid=BV1Pz4y1S7Uv&amp;cid=283045652&amp;page=9" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="简介安装配置"><a href="#简介安装配置" class="headerlink" title="简介安装配置"></a>简介安装配置</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>webpack 是一个模块打包器(构建工具)。它的主要目标是将 JavaScript 文件打包在一起，打包后的文件用于在浏览器中使用，但它也能够胜任转换（transform）、打包（bundle）或包裹（package）任何资源(resource or asset)。</li><li>官网： <a href="https://webpack.js.org/">https://webpack.js.org/</a>    </li><li>中文文档：<a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220205144447552.png" alt="官网简介图"></p><h2 id="webpack原理和概念"><a href="#webpack原理和概念" class="headerlink" title="webpack原理和概念"></a>webpack原理和概念</h2><ul><li>树结构: 在一个入口文件中引入所有资源，形成所有依赖关系树状图</li><li>模块：模块就是模块可以是ES6模块也可以是commonJS或者AMD模块，对于webpack来说，所有的资源（css,img…）</li><li>chunk：打包过程中被操作的模块文件叫做chunk,例如异步加载一个模块就是一个chunk</li><li>bundel：bundle是最后打包后的文件,最终文件可以和chunk长的一模一样,但是大部分情况下他是多个chunk的集合</li><li>为了优化最后生产出的bundle数量可能不等于chunk的数量，因为有可能多个chunk被组合到了一个Bundle中。</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220205144548953.png" alt="webpack打包过程"></p><pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid">graph LRA(webpack工作原理) --&gt;B1[png]    A--&gt;B2[JPG]    A--&gt;B3[CSS]    A--&gt;B4[JS]B[chuck为打包过程bundle为打包结果]subgraph 资源    B1 --&gt; A1((A1))     B1 --&gt; A2((A2))    B2 --&gt;A3((B1))B2 --&gt;A4((B1))endsubgraph 代码B3B4endsubgraph distmain.jsendA1 --&gt;|chuck1| bundle1--&gt;main.jsA2 --&gt; |chuck1|bundle1A3 --&gt;|chuck1| bundle1A4 --&gt; |chuck1|bundle1A4 --&gt; |chuck2|bundle2--&gt;main.jsB3 --&gt; |chuck2|bundle2B4 --&gt; |chuck2|bundle2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack环境安装"><a href="#webpack环境安装" class="headerlink" title="webpack环境安装"></a>webpack环境安装</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#安装webpack、webpack-cli至开发环境 i=install -D=--save-dev 注意看看pack.json webpack版本5+ webpack-cli4+</span><span class="token function">sudo</span> <span class="token function">npm</span> i webpack webpack-cli -D -g<span class="token function">sudo</span> <span class="token function">yarn</span> <span class="token function">add</span> webpack webpack-cli -D -gwebpack -v<span class="token comment">#打包 --mode指定模式  development开发模式（文件较大，包含注释等信息）,production生产模式（无注释，无空格全部在一行）  最终会在生成dist文件夹下有个main.js</span><span class="token comment">#生成模式打包后的文件更小，里面也没有多余的说明和注释等信息，默认是打包 src 下的文件，如果没有该文件夹会报错</span>webpack --mode developmentwebpack --mode production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack基础配置"><a href="#webpack基础配置" class="headerlink" title="webpack基础配置"></a>webpack基础配置</h2><ul><li>项目根目录下，新建<code>webpack.config.js</code>文件（就用这个名字，换其它的名字需要在执行 webpack 命令的时候重新指定一遍，默认会读取这个名字的文件不需要指定）</li><li>该文件为执行 webpack 命令默认读取的配置文件</li><li> webpack默认打包js资源</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//node中的包，可获取当前项目的根路径</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// webpack 的核心有五个: 1.entry 入口 2.output 输出 3.loader  4.plugin 插件 5.module</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment">// entry指示 webpack 应该使用哪个模块，来作为构建其内部 依赖图(dependency graph) 的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的.默认值是 ./src/index.js，入口配置3选一</span>    <span class="token comment">//单入口：如果只有一个入口文件，使用字符串指定入口文件，打包一个chunk,名称是默认的（output中的filename的值build.js）输出一个bundle</span>    entry<span class="token operator">:</span> <span class="token string">"./src/main.js"</span><span class="token punctuation">,</span>    <span class="token comment">//多入口：Array数组可多个入口文件，所有的入口文件生成一个chunk，名称是默认的（output中的filename的值build.js）输出一个bundle</span>    entry<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"./src/main.js"</span><span class="token punctuation">,</span><span class="token string">"./src/index.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//多入口：Object对象，通过Key：Value,配置多个入口，有几个入口文件就有几个chunk，并输出几个bundle，chunk的名称是key（output中的filename的值要写成"[name].js"）</span>    entry<span class="token operator">:</span><span class="token punctuation">{</span>        test<span class="token operator">:</span><span class="token string">'./src/one.js'</span><span class="token punctuation">,</span>        index<span class="token operator">:</span><span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>        main<span class="token operator">:</span><span class="token string">'./src/main.js'</span>    <span class="token punctuation">}</span>    <span class="token comment">//混合模式</span>    entry<span class="token operator">:</span><span class="token punctuation">{</span>     <span class="token comment">//Array数组的多个打成1个test，其它的单独生成一个，filename的值还是写成[name].js</span>        test<span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"./src/main.js"</span><span class="token punctuation">,</span><span class="token string">"./src/index.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          index<span class="token operator">:</span><span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>        main<span class="token operator">:</span><span class="token string">'./src/main.js'</span>    <span class="token punctuation">}</span>    <span class="token comment">// output告诉 webpack 在哪里输出它所创建的 bundle，以及如何命名这些文件。主要输出文件的默认值是 ./dist/main.js，其他生成文件默认放置在 ./dist 文件夹</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token comment">//如果entry是object时，filename的值要写成"[name].js"</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// loader webpack 只能理解 JavaScript 和 JSON 文件。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//plugin loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">//模式（mode）指示webpack使用相应的配置，开发模式（development）：配置比较简单，能让代码本地调试运行的环境 生产模式（production）：代码需要不断优化达到性能最好，能让代码优化上线运行的环境</span>    <span class="token comment">//都会自动启用一些插件，生产模式使用插件更多</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    <span class="token comment">// mode: "production",</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="html资源打包配置"><a href="#html资源打包配置" class="headerlink" title="html资源打包配置"></a>html资源打包配置</h1><blockquote><p>由于webpack默认只能打包js资源，我们想要打包html资源需要在开发环境安装html-webpack-plugin插件</p></blockquote><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><blockquote><p>插件3大步骤:</p><p>1.下载  npm i html-webpack-plugin -D</p><p>2.引入 const htmlWebpackPlugin = require(‘html-webpack-plugin’);</p><p>3.使用 new htmlWebpackPlugin();</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#方式一：npm安装插件</span><span class="token function">npm</span> i html-webpack-plugin -D<span class="token comment">#方式二：yarn安装插件</span><span class="token function">yarn</span> <span class="token function">add</span>  html-webpack-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置webpack-config-js文件"><a href="#配置webpack-config-js文件" class="headerlink" title="配置webpack.config.js文件"></a>配置webpack.config.js文件</h2><ul><li>打包 html 文件</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// webpack 的核心有五个: 1.entry 入口 2.output 输出 3.loader  4.plugin 插件 5.module</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>    <span class="token comment">//plugin loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token comment">//默认会创建一个空的，会自动引入 js 文件</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span>            <span class="token punctuation">{</span>                <span class="token comment">//源文件(不指定template 就会自动生成一个空的 html 文件)</span>                template<span class="token operator">:</span> <span class="token string">"./src/index.html"</span><span class="token punctuation">,</span>                <span class="token comment">//目标文件名（不指定filename 就会使用 template 的文件作为文件名，如果template也没有指定就会使用系统默认的 index.html）</span>                filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>                <span class="token comment">//    压缩</span>                minify<span class="token operator">:</span> <span class="token punctuation">{</span>                    collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//    移除空格（结构中的空格，文字间的还是保留的）</span>                    removeComments<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token comment">//    移除注释</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h2 id="分开打包-html-文件"><a href="#分开打包-html-文件" class="headerlink" title="分开打包 html 文件"></a>分开打包 html 文件</h2><ul><li>不同的 html 文件需要引入不同的 js 文件，因此需要对不同的 js 文件分别或组合打包成一个bundle,在不同的页面中引用</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//模拟真实打包</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token comment">// 将 common 和 jquery 依赖打包在一起，剩下的两个单独打包在一起</span>        vendor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./src/js/common.js'</span><span class="token punctuation">,</span> <span class="token string">'jquery'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        index<span class="token operator">:</span> <span class="token string">"./src/js/index.js"</span><span class="token punctuation">,</span>        cart<span class="token operator">:</span> <span class="token string">"./src/js/cart.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//plugin loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">//源文件(不指定template 就会自动生成一个空的 html 文件)</span>            template<span class="token operator">:</span> <span class="token string">"./src/view/index.html"</span><span class="token punctuation">,</span>            <span class="token comment">//目标文件名（不指定filename 就会使用 template 的文件作为文件名，如果template也没有指定就会使用系统默认的 index.html）</span>            filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token string">'vendor'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// chunks 中的值为 entry 中的键，多个bundle之间有依赖关系，从右往左写，数组中最后一个最先引入</span>            <span class="token comment">//    压缩</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//    移除空格（结构中的空格，文字间的还是保留的）</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token comment">//    移除注释</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/view/cart.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"demo2.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'cart'</span><span class="token punctuation">,</span><span class="token string">'vendor'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//    移除空格（结构中的空格，文字间的还是保留的）</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token comment">//    移除注释</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220210220810678.png" alt="分别打包 html"></p><h1 id="css资源打包"><a href="#css资源打包" class="headerlink" title="css资源打包"></a>css资源打包</h1><h2 id="内联打包"><a href="#内联打包" class="headerlink" title="内联打包"></a>内联打包</h2><ul><li>实现原理：先用css-loader把 css 样式打包到 js 的一个bundle 然后用style-loader创建了一个<style></style>&gt;标签引入样式,属于内联式打包</li><li>开发环境安装插件:css-loader style-loader<ul><li>css-loader:把css资源打包捆绑到js文件中（作用是处理css中的 @import 和 url 这样的外部资源）</li><li>style-loader:把css加载引入到html中（作用是把样式插入到 DOM中，方法是在head中插入一个style标签，并把样式写入到这个标签的 innerHTML里）</li></ul></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方式一：npm 安装插件</span><span class="token function">npm</span> i css-loader style-loader -D<span class="token comment">#方式二：yarn 安装插件</span><span class="token function">yarn</span> <span class="token function">add</span> css-loader style-loader -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css资源打包到html"><a href="#css资源打包到html" class="headerlink" title="css资源打包到html"></a>css资源打包到html</h2><ul><li>webpack配置<code>module</code>标签</li></ul><ul><li><p>打包的 js 导入css文件(import/require)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//打包index的时候会通过css-loder把css打到index.js中</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./style.css'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./lessstyle.less'</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./sassstyle.scss'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是入口文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="webpack-config-js配置"><a href="#webpack-config-js配置" class="headerlink" title="webpack.config.js配置"></a>webpack.config.js配置</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//打包 css</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/demo/js/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>            <span class="token comment">// 两个斜杠表示正则,中间的.css$表示所有的.css结尾的文件 "\"是用来转移"."的</span>            test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>            <span class="token comment">//注意顺序,一定是style-loader在css-loader的左边,因为加载规则的时候是从右边到左</span>            <span class="token comment">//1.通过css-loader把正则中的(这里也就是所有的css文件)打包到js中</span>            <span class="token comment">//2.打包后再通过style-loader把这些插入到html中</span>            use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/demo/index.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//    移除空格（结构中的空格，文字间的还是保留的）</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token comment">//    移除注释</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220210225332026.png" alt="css 样式打包到 html"></p><h1 id="Less-Sass资源打包"><a href="#Less-Sass资源打包" class="headerlink" title="Less/Sass资源打包"></a>Less/Sass资源打包</h1><ul><li>因为css只是单纯的属性描述,它并不具有变量、条件语句等,css的特性导致了它难组织和维护。</li><li>Sass和Less都属于CSS预处理器,定义了一种新的语言,其基本思想是用一种专门的编程语言,为</li><li>CSS增加一些编程的特性,将CSS作为目标生成文件,然后开发者使用这种语言进行CSS编码工作.</li><li>Less需要使用npm下载less包和less- loader</li><li>Sass需要使用npm下载node-sass包和sass- loader</li><li>需要在打包的 js 文件中引如 less sass</li></ul><h2 id="插件安装-1"><a href="#插件安装-1" class="headerlink" title="插件安装"></a>插件安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#Less的插件(开发环境)</span><span class="token function">npm</span> i <span class="token function">less</span> less-loader -D<span class="token function">yarn</span> <span class="token function">add</span> <span class="token function">less</span> less-loader -D<span class="token comment">#Sass的插件(开发环境)</span><span class="token function">npm</span> i node-sass sass-loader -D<span class="token function">yarn</span> <span class="token function">add</span> node-sass sass-loader -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack-config-js配置-1"><a href="#webpack-config-js配置-1" class="headerlink" title="webpack.config.js配置"></a>webpack.config.js配置</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js">module<span class="token operator">:</span> <span class="token punctuation">{</span>       rules<span class="token operator">:</span> <span class="token punctuation">[</span>           <span class="token punctuation">{</span>               <span class="token comment">// 两个斜杠表示正则,中间的.css$表示所有的.css结尾的文件 "\"是用来转移"."的</span>               test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>               <span class="token comment">//注意顺序,一定是style-loader在css-loader的左边,因为加载规则的时候是从右边到左</span>               <span class="token comment">//1.通过css-loader把正则中的(这里也就是所有的css文件)打包到js中</span>               <span class="token comment">//2.打包后再通过style-loader把这些插入到html中</span>               use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token comment">//先通过less-loader转成css,然后通过css-loader打包到入口文件js中,style-loader插入到html中,顺序从后往前 </span>           <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>           <span class="token comment">//sass原理一致,只是文件后缀名称是scss,所以正则的时候别写错了</span>           <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>use<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>           <span class="token punctuation">}</span>       <span class="token punctuation">]</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="less-sass-语法"><a href="#less-sass-语法" class="headerlink" title="less/sass 语法"></a>less/sass 语法</h2><pre class="line-numbers language-less" data-language="less"><code class="language-less"><span class="token comment">//less语法</span><span class="token comment">//全局变量用@符号定义和引用</span><span class="token variable">@color<span class="token punctuation">:</span></span> red<span class="token punctuation">;</span><span class="token variable">@background<span class="token punctuation">:</span></span> yellow<span class="token punctuation">;</span><span class="token variable">@width<span class="token punctuation">:</span></span> 200px<span class="token punctuation">;</span><span class="token variable">@height<span class="token punctuation">:</span></span> 300px<span class="token punctuation">;</span><span class="token selector">#lessBox</span> <span class="token punctuation">{</span>  <span class="token comment">//局部变量</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">@color</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">@width</span><span class="token operator">*</span>0.5<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">@height</span><span class="token operator">*</span>0.33333<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">@background</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scss" data-language="scss"><code class="language-scss"><span class="token comment">//sass语法</span><span class="token comment">// sass 样式是以 scss 结尾的文件 定义变量用 $</span><span class="token comment">//全局变量用$符号定义和引用</span><span class="token property"><span class="token variable">$color</span></span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token property"><span class="token variable">$background</span></span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token property"><span class="token variable">$width</span></span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token property"><span class="token variable">$height</span></span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token selector">#sassBox </span><span class="token punctuation">{</span>  <span class="token comment">//局部变量</span>  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token variable">$width</span>*0.8<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token variable">$height</span>*0.5<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token variable">$background</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="单独打包样式文件"><a href="#单独打包样式文件" class="headerlink" title="单独打包样式文件"></a>单独打包样式文件</h1><blockquote><p>把less,sass,css等资源打包成一个独立的资源文件</p></blockquote><h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><blockquote><p>插件3大步骤:</p><p>1.下载  npm i mini-css-extract-plugin -D</p><p>2.引入 const miniCssExtractPlugin = require(‘mini-css-extract-plugin’);</p><p>3.使用 new miniCssExtractPlugin()</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 下载</span><span class="token function">npm</span> i mini-css-extract-plugin -D<span class="token comment"># yarn 下载</span><span class="token function">yarn</span> <span class="token function">add</span> mini-css-extract-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack-config-js配置-2"><a href="#webpack-config-js配置-2" class="headerlink" title="webpack.config.js配置"></a>webpack.config.js配置</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//将css less sass 资源 单独打包 成独立的文件 不嵌入在 js 中</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/demo/js/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token comment">// 将 style-loader 换成 MiniCssExtractPlugin.loader</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/demo/index.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//    移除空格（结构中的空格，文字间的还是保留的）</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token comment">//    移除注释</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">//指定单独打包的 css 文件的路径和文件名  output标签的 path 下的 ./css/demo.css</span>            filename<span class="token operator">:</span><span class="token string">'./css/demo.css'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="css兼容性处理"><a href="#css兼容性处理" class="headerlink" title="css兼容性处理"></a>css兼容性处理</h1><blockquote><ul><li>通过插件确保所有的css样式中的属性在所有类型的浏览器大多数浏览器的大多数版本都支持,且显示效果一致</li><li>需要使用postcss处理,下载两个包postcss-loader和postcss-preset-env</li><li>posters会找到 package json中的 browserslist里面的配置,通过配置加载css的兼容性</li><li>修改loader的配置， 新版需要写postcss.config.js,  less和sass兼容性同理</li></ul></blockquote><p><img src="http://blog.adalucky.com/notes/ada/image-20220214212919060.png" alt="兼容转换效果"></p><h2 id="插件安装-2"><a href="#插件安装-2" class="headerlink" title="插件安装"></a>插件安装</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># npm 安装postcss-loader,postcss-preset-env 安装至开发环境</span><span class="token function">npm</span> i postcss-loader postcss-preset-env -D<span class="token comment"># yarn 安装</span><span class="token function">yarn</span> <span class="token function">add</span> postcss-loader postcss-preset-env -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>需要新建 <code>postcss.config.js</code>文件、package.json中新增 <code>browserslist</code> 标签、webpack.config.js中使用 <code>postcss-loader</code></li></ul><h3 id="新建-postcss-配置文件"><a href="#新建-postcss-配置文件" class="headerlink" title="新建 postcss 配置文件"></a>新建 postcss 配置文件</h3><ul><li>项目根路径新建 <code>postcss.config.js</code> 文件，该文件为 postcss 的默认配置文件</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// postcss 配置文件，该配置文件引入 postcss-preset-env 插件--&gt;该插件会读取 package.json文件下的 browserslist</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span><span class="token punctuation">{</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-preset-env'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="package-json文件配置信息"><a href="#package-json文件配置信息" class="headerlink" title="package.json文件配置信息"></a>package.json文件配置信息</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^6.6.0"</span><span class="token punctuation">,</span>    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.5.0"</span><span class="token punctuation">,</span>    <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token property">"less-loader"</span><span class="token operator">:</span> <span class="token string">"^10.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"mini-css-extract-plugin"</span><span class="token operator">:</span> <span class="token string">"^2.5.3"</span><span class="token punctuation">,</span>    <span class="token property">"node-sass"</span><span class="token operator">:</span> <span class="token string">"^7.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-loader"</span><span class="token operator">:</span> <span class="token string">"^6.2.1"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.3.3"</span><span class="token punctuation">,</span>    <span class="token property">"sass-loader"</span><span class="token operator">:</span> <span class="token string">"^12.4.0"</span><span class="token punctuation">,</span>    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^3.3.1"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.68.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.9.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"jquery"</span><span class="token operator">:</span> <span class="token string">"^3.6.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"browserslistcomment"</span><span class="token operator">:</span> <span class="token string">"支持80%以上的浏览器,支持最后两个版本,忽略已经死掉的浏览器"</span><span class="token punctuation">,</span>  <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"&gt; 0.2%"</span><span class="token punctuation">,</span>    <span class="token string">"last 2 version"</span><span class="token punctuation">,</span>    <span class="token string">"not dead"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="webpack-config-js配置-3"><a href="#webpack-config-js配置-3" class="headerlink" title="webpack.config.js配置"></a>webpack.config.js配置</h3><ul><li>执行 webpack 打包时如果 less scss 文件中有注释会出现如下截图报错，删除注释即可</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220214211912077.png" alt="less sass 打包报错"></p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//解决css less sass 兼容问题</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/demo/js/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token comment">// 'css/less/sass-loader' 后新增 'postcss-loader' (postcss-loader 会去找到对应的配置文件 postcss.config.js---&gt;package.json下的browserslist属性)</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/demo/index.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//    移除空格（结构中的空格，文字间的还是保留的）</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token comment">//    移除注释</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token comment">//指定单独打包的 css 文件的路径和文件名  output标签的 path 下的 ./css/demo.css</span>            filename<span class="token operator">:</span><span class="token string">'./css/demo.css'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="压缩-css"><a href="#压缩-css" class="headerlink" title="压缩 css"></a>压缩 css</h1><ul><li>下载插件 optimize-css-assets-webpack-plugin</li><li>引入插件：const OptimizeCssAssetsWebpackPlugin =  require(‘optimize-css-assets-webpack-plugin’);</li><li>使用插件： plugins: [ new OptimizeCssAssetsWebpackPlugin() ]</li></ul><h2 id="下载插件-1"><a href="#下载插件-1" class="headerlink" title="下载插件"></a>下载插件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 引入插件（开发环境）</span><span class="token function">npm</span> i optimize-css-assets-webpack-plugin -D<span class="token comment"># yarn 引入插件（开发环境）</span><span class="token function">yarn</span> <span class="token function">add</span> optimize-css-assets-webpack-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack-config-js-配置"><a href="#webpack-config-js-配置" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h2><ul><li>引入：const OptimizeCssAssetsWebpackPlugin = require(‘optimize-css-assets-webpack-plugin’); </li><li>创建对象：new OptimizeCssAssetsWebpackPlugin()</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//压缩 css</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/demo/js/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span><span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/demo/index.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token operator">:</span><span class="token string">'./css/demo.css'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// 用于压缩 css 的，开发环境下可以先不要压缩，不然格式不太好看</span>        <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="图片资源打包"><a href="#图片资源打包" class="headerlink" title="图片资源打包"></a>图片资源打包</h1><h2 id="css中引入图片"><a href="#css中引入图片" class="headerlink" title="css中引入图片"></a>css中引入图片</h2><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul><li>webpack4 需要用 <code>file-loader</code> <code>url-loader</code> 这两个插件（需要下载）</li><li>webpack5 直接使用 <code>assets-module</code>  <strong>因为在<code>v5</code>中<code>url-loader</code>已经被废弃</strong>（该模块不需要下载）</li></ul><h3 id="webpack-config-js-配置-1"><a href="#webpack-config-js-配置-1" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//打包图片资源（css html中引入）</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/demo/js/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//打包图片的规则配置，只有一个 loader 可以直接写，不用写在 use 里面</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>                <span class="token comment">//解析</span>                parser<span class="token operator">:</span> <span class="token punctuation">{</span>                    dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">{</span>                        maxSize<span class="token operator">:</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token comment">//   超过25kb不转base64</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                generator<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token comment">//文件生成路径及规则（超出 maxSize 的会在output标签下的 path下，也就是自己定义的 build 下生成 img/文件名.hash值.图片后缀）</span>                    filename<span class="token operator">:</span> <span class="token string">'img/[name].[hash:6][ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/demo/index.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token operator">:</span> <span class="token string">'./css/demo.css'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// 用于压缩 css 的，开发环境下可以先不要压缩，不然格式不太好看</span>        <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220215001630007.png" alt="图片资源打包"></p><h2 id="html中引入图片"><a href="#html中引入图片" class="headerlink" title="html中引入图片"></a>html中引入图片</h2><h3 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h3><ul><li>使用 html-loader 插件实现</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 安装（开发环境）</span><span class="token function">npm</span> i html-loader -i<span class="token comment"># yarn 安装（开发环境）</span><span class="token function">yarn</span> <span class="token function">add</span> html-loader -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="webpack-config-js-配置-2"><a href="#webpack-config-js-配置-2" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//打包图片资源（css html中引入）</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/demo/js/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment">//打包图片的规则配置，只有一个 loader 可以直接写，不用写在 use 里面</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>                <span class="token comment">//解析</span>                parser<span class="token operator">:</span> <span class="token punctuation">{</span>                    dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token comment">//超过25kb不转base64</span>                        maxSize<span class="token operator">:</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                generator<span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token comment">//文件生成路径及规则（超出 maxSize 的会在output标签下的 path下，也就是自己定义的 build 下生成 img/文件名.hash值.图片后缀）</span>                    filename<span class="token operator">:</span> <span class="token string">'img/[name].[hash:6][ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>loader<span class="token operator">:</span><span class="token string">'html-loader'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>   <span class="token comment">// html中引入的图片打包</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/demo/index.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token operator">:</span> <span class="token string">'./css/demo.css'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">// 用于压缩 css 的，开发环境下可以先不要压缩，不然格式不太好看</span>        <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p>![html中引入图片](/Users/ada/Library/Application Support/typora-user-images/image-20220215223851559.png)</p><h1 id="打包其它资源"><a href="#打包其它资源" class="headerlink" title="打包其它资源"></a>打包其它资源</h1><ul><li>不需要优化和压缩处理，直接输出的资源，称为其他资源，如字体</li></ul><h2 id="字体icon资源打包"><a href="#字体icon资源打包" class="headerlink" title="字体icon资源打包"></a>字体icon资源打包</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>iconfont 图标库下载对应的资源后将【.css .ttf .woff .woff2】文件 copy 至项目下 </li><li>入口 js 中引入 iconfont.css <code>require('../font/iconfont.css')</code></li><li>webpack5 直接使用 <code>asset/resource</code> 模块（无需下载）</li><li>webpack 配置 asset/resource 规则</li></ul><h3 id="下载及-copy-字体文件"><a href="#下载及-copy-字体文件" class="headerlink" title="下载及 copy 字体文件"></a>下载及 copy 字体文件</h3><p><img src="http://blog.adalucky.com/notes/ada/image-20220215235342867.png" alt="下载字体到项目中"></p><h3 id="入口-js-中引入-iconfont"><a href="#入口-js-中引入-iconfont" class="headerlink" title="入口 js 中引入 iconfont"></a>入口 js 中引入 iconfont</h3><ul><li>在入口 js 文件中引入 iconfont.css 文件</li><li><code>require('../font/iconfont.css')</code></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220215235713437.png" alt="入口文件引入iconfont.css"></p><h3 id="webpack-config-js-配置-3"><a href="#webpack-config-js-配置-3" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//打包字体资源</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/demo/js/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>                parser<span class="token operator">:</span> <span class="token punctuation">{</span>                    dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">{</span>                        maxSize<span class="token operator">:</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                generator<span class="token operator">:</span> <span class="token punctuation">{</span>                    filename<span class="token operator">:</span> <span class="token string">'img/[name].[hash:6][ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>loader<span class="token operator">:</span><span class="token string">'html-loader'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// html中引入的图片打包</span>            <span class="token comment">//打包字体资源</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ttf|eot|woff2?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                type<span class="token operator">:</span><span class="token string">"asset/resource"</span><span class="token punctuation">,</span>                generator<span class="token operator">:</span><span class="token punctuation">{</span>                    filename<span class="token operator">:</span><span class="token string">"font/[name].[hash:6][ext]"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/demo/index.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token operator">:</span> <span class="token string">'./css/demo.css'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220216000635948.png" alt="打包字体效果"></p><h1 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>eslint 是一个开源的<code> js 代码检查工具</code>，初衷是为了让程序员可以创建自己的检测规则。实际生产中，团队内往往会制订一套统一的标准，让整个团队的编码风格达到一致</li><li>eslint 其实与 webpack 没有任何关系，两者并不互相依赖，甚至一般情况下我们并不会在 webpack 中进行 eslint 的配置，可以单独使用。</li><li>语法检查使用eslint-loader， 并基于eslint包，<code>只用来检查js语法</code>。（eslint-loader –&gt; eslint-webpack-plugin ）</li><li>注意只检查自己写的js源代码， 第三方库是不用检查的， 可以在npmjs.com中查看规则。</li><li>需要使用js来的规则库来检查代码 “airbnb”， 需要eslint-config-airbnb-base和eslint-plugin-import 两个包</li><li></li><li>eslin进行检查需要依赖eslint-loader，同时告诉它用什么标准去检查 常用的就是 <code>airbnb</code> airbnb 又依赖 eslint-config-airbnb-base和eslint-plugin-import 两个包</li></ul><h2 id="安装插件包"><a href="#安装插件包" class="headerlink" title="安装插件包"></a>安装插件包</h2><ul><li><p>有很多视频在使用 eslint-loader 我在 webpack5.68.0 使用时会有如下报错，网上说 eslint-loader 已经弃用了 采用 eslint-webpack-plugin 插件</p><p>Module build failed (from ./node_modules/eslint-loader/dist/cjs.js):</p><p>TypeError: Cannot read properties of undefined (reading ‘getFormatter’)</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 安装（开发环境）</span><span class="token function">npm</span> i eslint eslint-config-airbnb-base eslint-plugin-import eslint-webpack-plugin -D<span class="token comment"># yarn 安装（开发环境）</span><span class="token function">yarn</span> <span class="token function">add</span>  eslint eslint-config-airbnb-base eslint-plugin-import eslint-webpack-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果在安装的插件的时候有提示 Expected version “^12.22.0 || ^14.17.0 || &gt;=16.0.0” ，需要更换 node 版本</li><li>我是在 node 官网下载最近的一个稳定版本重新安装的就可以了  v16.14.0</li></ul><h2 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>const ESLintPlugin = require(‘eslint-webpack-plugin’);  <code>引入插件</code></li><li>new ESLintPlugin({fix: true })  <code>使用插件，自动修复不合理写法，规则会根据 package.json 中的 eslintConfig 下 extends 对应的属性去检查</code></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(webpack.config.js)</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// eslint 语法规范检查</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ESLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'eslint-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>    entry<span class="token operator">:</span> <span class="token string">'./src/demo/js/index.js'</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>                parser<span class="token operator">:</span> <span class="token punctuation">{</span>                    dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">{</span>                        maxSize<span class="token operator">:</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                generator<span class="token operator">:</span> <span class="token punctuation">{</span>                    filename<span class="token operator">:</span> <span class="token string">'img/[name].[hash:6][ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> loader<span class="token operator">:</span> <span class="token string">'html-loader'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// html中引入的图片打包</span>            <span class="token comment">//打包字体资源</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ttf|eot|woff2?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span>                generator<span class="token operator">:</span> <span class="token punctuation">{</span>                    filename<span class="token operator">:</span> <span class="token string">"font/[name].[hash:6][ext]"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/demo/index.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"demo.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token operator">:</span> <span class="token string">'./css/demo.css'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//js语法检查</span>        <span class="token keyword">new</span> <span class="token class-name">ESLintPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            fix<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 自动修复不合理的写法</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(package.json)</div></div><div class="fold"><ul><li>“scripts”: { “eslint”: “eslint src” }  在控制台可通过执行 <code>npm run eslint</code> 或者 <code>yarn eslint</code> 会去检查 src目录下的 js 规范</li><li> “eslintConfig”: { “extends”: “airbnb-base” }  定义的检查规范为 <code>airbnb-base</code></li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"eslint src"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^6.6.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"^8.9.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-config-airbnb-base"</span><span class="token operator">:</span> <span class="token string">"^15.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-plugin-import"</span><span class="token operator">:</span> <span class="token string">"^2.25.4"</span><span class="token punctuation">,</span>    <span class="token property">"eslint-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^3.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"html-loader"</span><span class="token operator">:</span> <span class="token string">"^3.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.5.0"</span><span class="token punctuation">,</span>    <span class="token property">"less"</span><span class="token operator">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token property">"less-loader"</span><span class="token operator">:</span> <span class="token string">"^10.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"mini-css-extract-plugin"</span><span class="token operator">:</span> <span class="token string">"^2.5.3"</span><span class="token punctuation">,</span>    <span class="token property">"node-sass"</span><span class="token operator">:</span> <span class="token string">"^7.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"optimize-css-assets-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^6.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-loader"</span><span class="token operator">:</span> <span class="token string">"^6.2.1"</span><span class="token punctuation">,</span>    <span class="token property">"postcss-preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.3.3"</span><span class="token punctuation">,</span>    <span class="token property">"sass-loader"</span><span class="token operator">:</span> <span class="token string">"^12.4.0"</span><span class="token punctuation">,</span>    <span class="token property">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^3.3.1"</span><span class="token punctuation">,</span>    <span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.68.0"</span><span class="token punctuation">,</span>    <span class="token property">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.9.2"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"jquery"</span><span class="token operator">:</span> <span class="token string">"^3.6.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"browserslistcomment"</span><span class="token operator">:</span> <span class="token string">"支持80%以上的浏览器,支持最后两个版本,忽略已经死掉的浏览器"</span><span class="token punctuation">,</span>  <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"&gt; 0.2%"</span><span class="token punctuation">,</span>    <span class="token string">"last 2 version"</span><span class="token punctuation">,</span>    <span class="token string">"not dead"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"eslintConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"airbnb-base"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220217233417839.png" alt="eslint检查"></p><h2 id="特殊配置"><a href="#特殊配置" class="headerlink" title="特殊配置"></a>特殊配置</h2><ul><li>有的时候想针对某行代码跳过检查只需要在该行代码上添加 <code>// eslint-disable-next-line</code> 即可跳过对下一行的检查（只针对下一行有效）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220217234825819.png" alt="跳过语法检查"></p><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><ul><li>在前面的章节中，我们每次写完程序或者修改了内容后都需要通过 webpack 进行打包到 build 目录，这种情况一般是用在生产环境，开发完了打包测试上线，在实际的工作中我们更加希望我们每次修改完代码后就能够自动刷新对应的 html css js 等内容便于我们实时的查看调试，这也就本次记录的内容热部署</li><li>devServer给我们提供了开发过程中的服务器，是一个使用了express的Http服务器，它的作用主要是为了监听资源文件的改变，该http服务器和client使用了websocket通信协议，只要资源文件发生改变，webpack-dev-server就会实时的进行编译。</li><li>只会在内存中编译，不会有任何输出,下载webpack-dev-server包</li><li>webpack-dev-server并不能读取你的webpack.config.js的配置output <code>也就是说每次修改了配置文件需要手动重启一下，修改其它的 html css js 会自动刷新</code></li><li>启动devServer指令为: npx webpack serve 本目录执行</li><li>webpack5无法自动刷新，解决：添加配置：target: ‘web’</li></ul><h2 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h2><ul><li>下载 webpack-dev-server 包</li><li>webpackage.config.js 下新增 <code>devServer</code> 属性用于指定端口等信息</li><li>package.json 中指定启动命令</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 安装（开发环境）</span><span class="token function">npm</span> i webpack-dev-server -D <span class="token comment"># yarn 安装（开发环境）</span><span class="token function">yarn</span> <span class="token function">add</span> webpack-dev-server -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="webpack-config-js-配置-4"><a href="#webpack-config-js-配置-4" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h3><ul><li>每次配置文件 webpack.config.js 发生了变化需要重启 devServer 服务器（因为配置文件是在启动时生效，发生改变不能修改启动时的参数设置这些）</li><li>注释了 eslint 检查（开发环境不方便）</li><li>去除了 <code>mode: "development"</code> 更改为在启动命令 <code>scripts</code> 中指定</li><li>新增 <code>target</code> <code>devServer</code> </li><li>htmlWebpackPlugin  filename 需要指定为 index.html 不然会报错 404（应该是热部署启动后默认去读取 index.html 文件）</li><li>如果自动刷新无效的话注意一般是开启了HMR(devServer中 hot:true) 看 entry属性下有没有配置需要监听的html（entry: [‘./src/demo/js/index.js’,’./src/demo/index.html’]） 这里的<code>./src/demo/index.html</code> 就是需要自动刷新的页面 </li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 热部署 htmlWebpackPlugin  filename 需要指定为 index.html 不然会报错 404</span><span class="token keyword">const</span> <span class="token punctuation">{</span>resolve<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> htmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> MiniCssExtractPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mini-css-extract-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> OptimizeCssAssetsWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ESLintPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'eslint-webpack-plugin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'./src/demo/js/index.js'</span><span class="token punctuation">,</span><span class="token string">'./src/demo/index.html'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    output<span class="token operator">:</span> <span class="token punctuation">{</span>        filename<span class="token operator">:</span> <span class="token string">"[name].js"</span><span class="token punctuation">,</span>        path<span class="token operator">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./build"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token operator">:</span> <span class="token punctuation">{</span>        rules<span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.scss$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> use<span class="token operator">:</span> <span class="token punctuation">[</span>MiniCssExtractPlugin<span class="token punctuation">.</span>loader<span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(jpg|png|gif|jpeg)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">"asset"</span><span class="token punctuation">,</span>                parser<span class="token operator">:</span> <span class="token punctuation">{</span>                    dataUrlCondition<span class="token operator">:</span> <span class="token punctuation">{</span>                        maxSize<span class="token operator">:</span> <span class="token number">25</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                generator<span class="token operator">:</span> <span class="token punctuation">{</span>                    filename<span class="token operator">:</span> <span class="token string">'img/[name].[hash:6][ext]'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.html$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> loader<span class="token operator">:</span> <span class="token string">'html-loader'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token comment">// html中引入的图片打包</span>            <span class="token comment">//打包字体资源</span>            <span class="token punctuation">{</span>                test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.ttf|eot|woff2?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>                type<span class="token operator">:</span> <span class="token string">"asset/resource"</span><span class="token punctuation">,</span>                generator<span class="token operator">:</span> <span class="token punctuation">{</span>                    filename<span class="token operator">:</span> <span class="token string">"font/[name].[hash:6][ext]"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">htmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            template<span class="token operator">:</span> <span class="token string">"./src/demo/index.html"</span><span class="token punctuation">,</span>            filename<span class="token operator">:</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span>            chunks<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'main'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            minify<span class="token operator">:</span> <span class="token punctuation">{</span>                collapseWhitespace<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                removeComments<span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">MiniCssExtractPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            filename<span class="token operator">:</span> <span class="token string">'./css/demo.css'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">new</span> <span class="token class-name">OptimizeCssAssetsWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//js语法检查</span>        <span class="token comment">/*new ESLintPlugin({            fix: true // 自动修复不合理的写法        })*/</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment">// 在webpack5 需要加上这个配置项才可以自动刷新，如果自动刷新无效的话注意一般是开启了HMR(devServer中 hot:true) 看 entry属性下有没有配置需要监听的html</span>    target<span class="token operator">:</span> <span class="token string">"web"</span><span class="token punctuation">,</span>    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>        port<span class="token operator">:</span><span class="token number">3001</span><span class="token punctuation">,</span>        compress<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        open<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>        hot<span class="token operator">:</span><span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><ul><li>content-base //设定webpack-dev-server的director根目录。如果不进行设定的话，默认是在当前目录下。</li><li>quiet: //控制台中不输出打包的信息，开发中一般设置为false，进行 打印，这样查看错误比较方面</li><li>no-info: // 不显示任何信息</li><li>colors: //对信息进行颜色输出</li><li>no-colors: //对信息不进行颜色输出</li><li>compress:  //开启gzip压缩</li><li>host &lt;hostname/ip&gt;: //设置ip</li><li>port <number>: //设置端口号，默认是:8080</number></li><li>inline: //webpack-dev-server会在你的webpack.config.js的入口配置文件中再添加一个入口,</li><li>hot: //开发热替换</li><li>open: //启动命令，自动打开浏览器</li><li>history-api-fallback: //查看历史url</li></ul><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><ul><li><code>scripts</code>下新增 <code>dev</code> <code>build</code> 通过命令指定开发模式启动或者打包，并且携带参数指定 mode 这样就不需要在 webpack.config.js 中指定 mode</li><li>命令行中的比配置文件中参数的优先级高</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">{</span>  <span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"eslint"</span><span class="token operator">:</span> <span class="token string">"eslint src"</span><span class="token punctuation">,</span>    <span class="token string">"dev"</span><span class="token operator">:</span> <span class="token string">"webpack serve --mode development"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token operator">:</span> <span class="token string">"webpack --mode production"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^6.6.0"</span><span class="token punctuation">,</span>    <span class="token string">"eslint"</span><span class="token operator">:</span> <span class="token string">"^8.9.0"</span><span class="token punctuation">,</span>    <span class="token string">"eslint-config-airbnb-base"</span><span class="token operator">:</span> <span class="token string">"^15.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"eslint-plugin-import"</span><span class="token operator">:</span> <span class="token string">"^2.25.4"</span><span class="token punctuation">,</span>    <span class="token string">"eslint-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^3.1.1"</span><span class="token punctuation">,</span>    <span class="token string">"html-loader"</span><span class="token operator">:</span> <span class="token string">"^3.1.0"</span><span class="token punctuation">,</span>    <span class="token string">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^5.5.0"</span><span class="token punctuation">,</span>    <span class="token string">"less"</span><span class="token operator">:</span> <span class="token string">"^4.1.2"</span><span class="token punctuation">,</span>    <span class="token string">"less-loader"</span><span class="token operator">:</span> <span class="token string">"^10.2.0"</span><span class="token punctuation">,</span>    <span class="token string">"mini-css-extract-plugin"</span><span class="token operator">:</span> <span class="token string">"^2.5.3"</span><span class="token punctuation">,</span>    <span class="token string">"node-sass"</span><span class="token operator">:</span> <span class="token string">"^7.0.1"</span><span class="token punctuation">,</span>    <span class="token string">"optimize-css-assets-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^6.0.1"</span><span class="token punctuation">,</span>    <span class="token string">"postcss-loader"</span><span class="token operator">:</span> <span class="token string">"^6.2.1"</span><span class="token punctuation">,</span>    <span class="token string">"postcss-preset-env"</span><span class="token operator">:</span> <span class="token string">"^7.3.3"</span><span class="token punctuation">,</span>    <span class="token string">"sass-loader"</span><span class="token operator">:</span> <span class="token string">"^12.4.0"</span><span class="token punctuation">,</span>    <span class="token string">"style-loader"</span><span class="token operator">:</span> <span class="token string">"^3.3.1"</span><span class="token punctuation">,</span>    <span class="token string">"webpack"</span><span class="token operator">:</span> <span class="token string">"^5.68.0"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-cli"</span><span class="token operator">:</span> <span class="token string">"^4.9.2"</span><span class="token punctuation">,</span>    <span class="token string">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^4.7.4"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"jquery"</span><span class="token operator">:</span> <span class="token string">"^3.6.0"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"browserslistcomment"</span><span class="token operator">:</span> <span class="token string">"支持80%以上的浏览器,支持最后两个版本,忽略已经死掉的浏览器"</span><span class="token punctuation">,</span>  <span class="token string">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"&gt; 0.2%"</span><span class="token punctuation">,</span>    <span class="token string">"last 2 versions"</span><span class="token punctuation">,</span>    <span class="token string">"not dead"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"eslintConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"extends"</span><span class="token operator">:</span> <span class="token string">"airbnb-base"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="环境优化"><a href="#环境优化" class="headerlink" title="环境优化"></a>环境优化</h1><ul><li>开发环境的优化：打包构建速度（比如我们只更新了一个js文件重新编译的时候只编译这一个 js 文件，热加载）、优化代码调式</li><li>生产环境的优化：代码运行的性能（例如尽量减小代码文件的大小，只打包引用到了的 css  js ）</li></ul><h2 id="开发环境HMR-模块热替换"><a href="#开发环境HMR-模块热替换" class="headerlink" title="开发环境HMR(模块热替换)"></a>开发环境HMR(模块热替换)</h2><ul><li><code>热模块替换一般是针对开发环境的优化</code></li><li>模块热替换(Hot Module Replacement 即 HMR)是 webpack 提供的最有用的功能之一, 它允许在运行时更新各种模块, 而<code>无需进行完全刷新</code>。</li><li>启用这个功能，只需要修改一下 webpack.config.js 的配置, 使用 webpack 内置的 HMR 插件就可以了， <code>在devServer中使用hot参数（hot:true）</code>。</li><li>启用 webpack 内置的 HMR插件后, module.hot 接口就会暴露在 index.js 中, 接下来需要在 index.js 中配置告诉 webpack 接受HMR的模块。</li></ul><h3 id="样式文件"><a href="#样式文件" class="headerlink" title="样式文件"></a>样式文件</h3><ul><li>样式文件(css less sass)在使用HMR功能的时候，开发环境中使用<code>style-loader</code>（之前使用的 <code>MiniCssExtractPlugin.loader</code> 把所有 css less sass 打包成一个单独的文件，这样 HMR 就没有意义了因为更新了这个所有打包一起的文件比较大，开发环境使用 style-loader 就不会打包成单独的文件，这样就能做到只更新这一个样式文件 ）</li><li>这里我没去实践，一般是会根据配置什么的去设置比如开发环境用 style-loader 线上用 MiniCssExtractPlugin.loader 打包成一个 css 文件</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220223225504907.png" alt="HMR-css"></p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><ul><li>HTML 的HMR功能，默认也没有HMR功能（不用做HMR功能）需要在entry入口中引入html文件(entry:[‘./src/demo/js/index.js’,’./src/demo/index.html’])</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220223230008336.png" alt="HMR-html"></p><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><ul><li>js的HMR功能，默认没有HMR功能，只能处理非入口文件的js文件</li><li>启用 webpack 内置的 HMR插件后, module.hot 接口就会暴露在 index.js 中, 接下来需要在 index.js 中配置告诉 webpack 接受HMR的模块（通过代码 <code>module.hot.accept</code>）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220223225008642.png" alt="HMR-js配置前"></p><ul><li>如上图所示当一个 js 文件发生变化时，所有的 js 都会去执行，如果想要去实现只更新我们自己修改了的 js 文件需要在入口文件中通过代码指定文件示例如下</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//告诉 webpack 接受热替换的模块为 ./print.js</span>    module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">'./print.js'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//服务器检测到了 print.js 的代码变化后需要执行的 module.hot.accept 的回调函数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'./print.js 这个文件有发生变化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>修改 print.js 中将 【111】改为 【33333】 后并未执行 index.js 中的打印语句（打包 css样式的 js 文件这句话），只执行了module.hot.accept的回调函数</p></li><li><p>修改 print.js后并未再次打印这句话，也就证明热加载只加载了 print.js</p></li><li><p>HMR 中只监听了 print.js</p></li><li><p>服务器检测到了 print.js 的代码变化后需要执行的 module.hot.accept 的回调函数</p></li></ul><p>![HMR-js配置后](/Users/ada/Library/Application Support/typora-user-images/image-20220223232055475.png)</p><h2 id="线上环境-去除死代码"><a href="#线上环境-去除死代码" class="headerlink" title="线上环境(去除死代码)"></a>线上环境(去除死代码)</h2><ul><li><code>该内容是针对线上环境</code> 且指的是 js css 这类文件</li><li>html文件 不需要，因为如果不需要的 html 我们会注释掉，然后打包的时候会去压缩注释掉的内容，但是 js css 这些可能会留着暂时不注释，可能以后会用，那么我们就期望打包的时候 没有引用的 js css 这些东西不打包进去（比如去网上 copy 了一个一万行的js 但是我们只用了其中的一部分，但是又不敢乱删除，以前的方法就会把所有的一万行打包进去，优化了的话它自动就会去找到这一万行代码中我们使用到的 js 打包进去）</li><li>或者说引入的第三方的BootStrap jQuery 我们也期望只把我们项目使用到的js css 打包进去多余的就不要</li></ul><h3 id="js-1"><a href="#js-1" class="headerlink" title="js"></a>js</h3><ul><li>Webpack通过 tree-shaking 去掉了实际上并没有使用的js代码来减少包的大小</li><li>tree-shaking 是 webpack 自带的功能不需要下载其它的包（tree-shaking:树摇，摇晃树子把黄了的叶子摇下来不要）</li><li>前提条件：<code>必须使用es6模块化</code>  <code>开启production环境（mode中指定）</code></li></ul><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h4 id="下载插件-2"><a href="#下载插件-2" class="headerlink" title="下载插件"></a>下载插件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># npm 安装（开发环境）</span><span class="token function">npm</span> i purgecss-webpack-plugin -D<span class="token comment"># yarn 安装（开发环境）</span><span class="token function">yarn</span> <span class="token function">add</span> purgecss-webpack-plugin -D<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="webpack-config-js-配置-5"><a href="#webpack-config-js-配置-5" class="headerlink" title="webpack.config.js 配置"></a>webpack.config.js 配置</h4><ul><li>plugins下新增以下内容 四个引入 const 一个 new</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//const {resolve, join} = require('path');</span><span class="token comment">//const PurgecssPlugin = require('purgecss-webpack-plugin');</span><span class="token comment">//const glob = require('glob');</span><span class="token comment">//const PATHS = { src: join(__dirname, 'src')}</span><span class="token keyword">new</span> <span class="token class-name">PurgecssPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            paths<span class="token operator">:</span> glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PATHS</span><span class="token punctuation">.</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/**/*</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">{</span>nodir<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;webpack 是代码编译工具，有入口、出口、loader 和插件。webpack 是一个用于现代&lt;a href=&quot;https://baike.baidu.com/item/JavaScript/321142&quot;&gt;JavaScript&lt;/a&gt;应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个依赖图(dependency graph)，此依赖图对应映射到项目所需的每个模块，并生成一个或多个 &lt;em&gt;bundle&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="前端基础" scheme="https://www.adalucky.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="webpack5" scheme="https://www.adalucky.com/tags/webpack5/"/>
    
    <category term="eslint" scheme="https://www.adalucky.com/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>app</title>
    <link href="https://www.adalucky.com/auto/app/"/>
    <id>https://www.adalucky.com/auto/app/</id>
    <published>2022-02-18T10:41:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Appium是一个开源的，适用于原生或混合移动应用（ hybrid mobile apps ）的自动化测试工具，Appium应用WebDriver: JSON wire protocol驱动安卓和iOS移动应用。Appium选择了Client/Server的设计模式。只要client能够发送http请求给server，那么的话client用什么语言来实现都是可以的，这就是如何做到支持多语言的原因；</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>需要安装的环境和程序：==adb== ==Appium== ==jdk== </li></ul><p><a href="https://developer.android.google.cn/studio?hl=zh_cn" target="_blank" class="LinkCard" style="text-decoration: none;">Android</a></p><h1 id="adb环境"><a href="#adb环境" class="headerlink" title="adb环境"></a>adb环境</h1><h2 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h2><ul><li>前置：电脑已==安装手机驱动==，==usb==调试模式已打开（开发者选项和usb模拟点击根据情况后面会需要打开）</li><li>1.下载安装包（32/64位），解压到非中文路径且路径名无特殊字符</li><li>2.配置系统环境变量和 path 路径</li></ul><p><img src="http://geojsonpublic.510link.com/notes/ada/image-20210723113410445.png" alt="配置系统变量"></p><p><img src="http://geojsonpublic.510link.com/notes/ada/image-20210723113520855.png" alt="配置环境变量path路径"></p><h2 id="mac安装"><a href="#mac安装" class="headerlink" title="mac安装"></a>mac安装</h2><h3 id="下载cmdline-tools"><a href="#下载cmdline-tools" class="headerlink" title="下载cmdline-tools"></a>下载cmdline-tools</h3><ul><li>下载cmdline-tools cmdline-tools的作用是通过命令行去控制下载 SDK 工具包如：platform-tools tools build-tool 等</li><li>创建目录：/Users/ada/Library/Android/sdk/cmdline-tools/latest 存放下载的 cmdline-tools</li><li>下载链接：<a href="https://developer.android.google.cn/studio?hl=zh_cn">https://developer.android.google.cn/studio?hl=zh_cn</a> （页面滑动往下面拉一点找下）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20210724104514141.png" alt="下载cmdline-tools"></p><h3 id="文件解压"><a href="#文件解压" class="headerlink" title="文件解压"></a>文件解压</h3><ul><li>默认情况下sdk同级的其它文件都是没有的，我这边是因为后面下载了工具包所以截图里面有</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20210724110059375.png" alt="文件夹创建和解压"></p><h3 id="sdkmanager-命令行操作"><a href="#sdkmanager-命令行操作" class="headerlink" title="sdkmanager 命令行操作"></a>sdkmanager 命令行操作</h3><ul><li>由于没有配置全局环境，需要先切换到bin目录 执行./sdkmanager</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换路径</span><span class="token builtin class-name">cd</span> /Users/ada/Library/Android/sdk/cmdline-tools/latest/bin<span class="token comment"># 包管理查看</span>./sdkmanager --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210724111351959.png" alt="sdkmanager --list"></p><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><ul><li>通过 <code>sdkmanager</code> 安装 <code>build-tools</code>  <code>platform-tools</code> <code>tools</code></li><li>语法参考官方：<a href="https://developer.android.google.cn/studio/command-line/sdkmanager?hl=zh_cn">https://developer.android.google.cn/studio/command-line/sdkmanager?hl=zh_cn</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装软件包</span>sdkmanager packages <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token comment">#官方示例 sdkmanager 包名 可选参数</span><span class="token comment">#例如，下面展示了如何安装最新的平台工具（包括 adb 和 fastboot）以及适用于 API 级别 28 的 SDK 工具：</span>sdkmanager <span class="token string">"platform-tools"</span> <span class="token string">"platforms;android-28"</span> <span class="token comment"># 这个是官方的示例，根据意思如果不加;号指定版本就是最新的,多个包用空格隔开，用""括起来</span><span class="token comment">#下载build-tools指定版本</span>sdkmanager <span class="token string">"build-tools;30.0.2"</span><span class="token comment">#卸载软件包</span>sdkmanager --uninstall packages <span class="token punctuation">[</span>options<span class="token punctuation">]</span>sdkmanager --uninstall --package_file<span class="token operator">=</span>package_file <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token comment">#更新已安装的软件包</span>sdkmanager --update <span class="token punctuation">[</span>options<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210724113109421.png" alt="下载包"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20210724113109421-20220218222034554.png" alt="下载包"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>配置==系统环境变量==<ul><li>注意上面的高亮，是配置系统环境变量，和windows一样有用户变量，只对当前用户有效，系统变量对所有用户有效，<code>Appium在启动后只认系统变量</code>如果设置的是用户变量到时候可能一直提示你没有设置 ==JAVA_HOME==  ==ANDROID_HOME==</li><li>在Macx系统中 ==/etc/profile== 是系统变量配置文件 ==~/.bash_profile== 是用户变量</li><li>在编辑 /etc/profile 文件的时候如果提示没有权限,那么找到 /etc 文件夹和 profile 文件添加用户的读写权限 修改这种配置文件记得先备份，养成良好的习惯</li></ul></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20210724114800088.png" alt="添加文件编辑权限"></p><ul><li>Mac配置系统变量 ==Android_HOME==  ==JAVA_HOME==（再提示一遍是系统变量）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#步骤一： 打开系统变量配置文件 和 ~/.zshrc文件</span><span class="token function">open</span> -e /etc/profile<span class="token function">open</span> -e ~/.zshrc<span class="token comment"># 步骤二：添加配置（/etc/profile文件）保存</span><span class="token comment"># Java系统变量</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>/usr/libexec/java_home<span class="token variable">)</span></span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASS_PATH</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/lib<span class="token comment"># Android系统变量</span><span class="token assign-left variable">AAPT_HOME</span><span class="token operator">=</span>/Users/ada/Library/Android/sdk/build-tools/30.0.2/<span class="token builtin class-name">export</span> AAPT_HOME<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$AAPT_HOME</span><span class="token assign-left variable">ANDROID_HOME</span><span class="token operator">=</span>/Users/ada/Library/Android/sdk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ANDROID_HOME</span>/tools:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ANDROID_HOME</span>/tools/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ANDROID_HOME</span>/platform-tools:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ANDROID_HOME</span>/build-tools/30.0.2:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ANDROID_HOME</span>/emulator:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> ANDROID_HOME<span class="token builtin class-name">export</span> <span class="token assign-left variable">ANDROID_SDK_ROOT</span><span class="token operator">=</span>/Users/ada/Library/Android/sdk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$ANDROID_SDK_ROOT</span>/emulator:<span class="token variable">$ANDROID_SDK_ROOT</span>/tools:<span class="token environment constant">$PATH</span><span class="token comment"># 步骤三：添加配置（~/.zshrc文件）保存</span><span class="token builtin class-name">source</span> /etc/profile<span class="token builtin class-name">source</span> ~/.bash_profile<span class="token comment">#步骤四：source 生效一下</span><span class="token builtin class-name">source</span> /etc/profile<span class="token builtin class-name">source</span> ~/.zshrc <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210724120624278.png" alt="配置Java、Android系统变量"></p><h2 id="adb环境验证"><a href="#adb环境验证" class="headerlink" title="adb环境验证"></a>adb环境验证</h2><ul><li>在cmd、终端输入 ==adb version==查看是否安装成功</li></ul><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#查看adb的版本</span>adb version<span class="token comment">#查看设备连接</span>adb devices<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210723113959083.png" alt="adb版本查看"></p><h2 id="Appium启动验证"><a href="#Appium启动验证" class="headerlink" title="Appium启动验证"></a>Appium启动验证</h2><p><img src="http://blog.adalucky.com/notes/ada/image-20210724123306877.png" alt="Appium启动验证"></p><h2 id="uiautomatorviewer启动校验"><a href="#uiautomatorviewer启动校验" class="headerlink" title="uiautomatorviewer启动校验"></a>uiautomatorviewer启动校验</h2><ul><li>uiautomatorviewer 是 adb 工具包里面的一个元素探测工具，用于定位识别元素为后期自动化ui元素定位提供基础数据</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20210723114535723.png" alt="启动uiautomatorviewer"></p><h1 id="adb常用命令"><a href="#adb常用命令" class="headerlink" title="adb常用命令"></a>adb常用命令</h1><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="查看当前版本"><a href="#查看当前版本" class="headerlink" title="查看当前版本"></a>查看当前版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看当前的 adb 版本 (这个版本好像低于38 39还是哪个版本以下的如果执行键盘输入中文到app输入框会有乱码现象，之前用DeskDock键盘输入)</span>adb version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210723141132382.png" alt="查看adb版本"></p><h3 id="设备检查及输入"><a href="#设备检查及输入" class="headerlink" title="设备检查及输入"></a>设备检查及输入</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看adb的帮助手册</span>adb --help<span class="token comment"># 检查连接到电脑的安卓设备 </span>adb devices<span class="token comment">#如果有检测到可以验证一下：模拟点击手机返回的命令，手机会模拟返回按键操作，有反应代表连接正常</span>adb shell input keyevent<span class="token comment">#状态 device 在线   offline 离线  unauthorized 未授权  List of devices attached  未检测到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210723150953920.png" alt="检测设备"></p><h3 id="连接模拟器"><a href="#连接模拟器" class="headerlink" title="连接模拟器"></a>连接模拟器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#有时候没有真机，或者真机的版本太高不好获得root权限可以采用模拟器 推荐模拟器【夜神、雷电模拟器】</span>adb connect <span class="token number">127.0</span>.0.1:62001 <span class="token comment">#(先把模拟器打开)，127.0.0.1指的使用本机，62001是夜神模拟器的端口号，根据你的模拟器端口可能会有变化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://geojsonpublic.510link.com/notes/ada/image-20210723152330609.png" alt="连接到模拟器"></p><h2 id="设备操作"><a href="#设备操作" class="headerlink" title="设备操作"></a>设备操作</h2><h3 id="进入设备终端"><a href="#进入设备终端" class="headerlink" title="进入设备终端"></a>进入设备终端</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入到设备的终端控制台 就像xshell连接服务器一样，andriod底层是基于linux的，需要连接，然后也可以用linux命令</span>adb shell<span class="token comment">#退出终端 当需要回退到cmd窗口进行adb命令操作时</span><span class="token builtin class-name">exit</span> 或者 adb shell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="从手机中拉取文件至本地"><a href="#从手机中拉取文件至本地" class="headerlink" title="从手机中拉取文件至本地"></a>从手机中拉取文件至本地</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将手机中的文件拉取到你自己的电脑本地，一般会用于日志的拉取或者tcpdump对网卡的抓包信息</span>adb pull <span class="token operator">&lt;</span>手机路径，源文件<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本机路径，目标文件<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210723154709253.png" alt="拉取文件"></p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#将本地的文件上传/推送到设备中 </span>adb push <span class="token operator">&lt;</span>本机路径，源文件<span class="token operator">&gt;</span>  <span class="token operator">&lt;</span>手机路径，目标路径<span class="token operator">&gt;</span> /新命名文件<span class="token comment">#这里有个小窍门，就是push后面本地文件，可以直接找到拖进去，不用手动输本地路径，可以重复推送，自动覆盖</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://geojsonpublic.510link.com/notes/ada/image-20210723155033298.png" alt="上传文件"></p><h3 id="手机日志"><a href="#手机日志" class="headerlink" title="手机日志"></a>手机日志</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#清理main缓存区域的日志</span>adb logcat -c<span class="token comment">#清理系统事件信息日志</span>adb logcat -c -b events<span class="token comment">#清理手机内所有日志的命令(如果手机之前的日志不需要了一般用这个)</span>adb logcat -c -b main -b events -b radio -b system<span class="token comment">#拉取日志 这里本地路径必须是一个目录，前面是大于符号重定向，后面要给拉取的日志取一个别名，不然拉取会失败，日志是动态的，所以估计3-5秒拉取完成后用ctrl+c/z/x 结束根据电脑快捷键决定</span>adb logcat  <span class="token operator">&gt;</span> <span class="token operator">&lt;</span>本地路径<span class="token operator">&gt;</span>  命名日志名.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#可以通过adb输入一些指令，让设备做对应的动作，比如模拟我们的滑动，截屏，输入等等</span><span class="token comment">#截屏</span>adb shell screencap -p 文件输出路径/fileName.pngadb shell screencap -p /sdcard/01.png <span class="token comment">#截屏并保存在/sdcard/01.png这个路径</span><span class="token comment">#录屏</span>adb shell screenrecord /sdcard/fileName.mp4     <span class="token comment">#ctrl+c结束  --size 设置分辨率  --bit-rate 指定比特率  --rotate  旋转90°</span><span class="token comment">#模拟点击返回按钮</span>adb shell input keyevent<span class="token comment">#模拟手势滑动点击（实现微信跳一跳高分核心方法）</span>adb shell input touchscreen swipe x1 y1 x2 y2 <span class="token function">time</span> <span class="token comment">#(x1,y1)：起始点击点的x y位置  (x2,y2)：终止点击点的x位置  time：操作耗时毫秒数</span><span class="token comment"># 单击屏幕屏幕（点击）</span>adb shell input tap X坐标 Y坐标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><h3 id="安装-卸载APP"><a href="#安装-卸载APP" class="headerlink" title="安装/卸载APP"></a>安装/卸载APP</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#和上传一样可以直接拖，注意格式是apk的文件（手机usb模式换成文件传输，不能为充电模式），成功后会提示success    提示：adb: failed to install，表示有安装过同名的包，可以采用下面的覆盖安装</span>adb <span class="token function">install</span> <span class="token operator">&lt;</span>安装包路径<span class="token operator">&gt;</span><span class="token comment">#覆盖安装</span>adb <span class="token function">install</span> -r  <span class="token operator">&lt;</span>安装包路径<span class="token operator">&gt;</span><span class="token comment">#静默安装 这个不会，据说在比较老的Android版本中支持，它的作用就是安装后同时赋予默认的权限，在自动化测试时候如果监测到没有安装对应的APP那么可以采用尝试，静默安装</span><span class="token comment">#卸载 提示success,代表成功</span>adb uninstall <span class="token operator">&lt;</span>应用包名，一般是com.xxxx.xxxx格式<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210723161135912.png" alt="卸载APP"></p><h3 id="包名及入口获取"><a href="#包名及入口获取" class="headerlink" title="包名及入口获取"></a>包名及入口获取</h3><ul><li>包名、类名、主入口</li><li>package（包名）：在APP中每个APP都拥有唯一的包名不能重复，如果重复了就会提示你已经安装是否覆盖安装</li><li>MainActivity（主入口）：每个APP都有一个主要函数的入口</li><li>activityName（类名）：可以看做是每个页面的一个标识句柄</li></ul><h4 id="前台页面查看"><a href="#前台页面查看" class="headerlink" title="前台页面查看"></a>前台页面查看</h4><h5 id="查看包名类名"><a href="#查看包名类名" class="headerlink" title="查看包名类名"></a>查看包名类名</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#把软件打开保持前台界面，运行命令</span>adb shell dumpsys activity <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"mFocusedActivity"</span> <span class="token comment">#安卓7以内</span>adb shell dumpsys activity <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"mResumedActivity"</span> <span class="token comment">#安卓8以上</span><span class="token comment">#Mac查看包名、主入口</span>adb shell dumpsys window w <span class="token operator">|</span><span class="token function">grep</span> <span class="token punctuation">\</span>/ <span class="token operator">|</span><span class="token function">grep</span> <span class="token assign-left variable">name</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>u0 com.xxxx.xxxx/  uo和/中间的就是包名，以com开头，包名后面跟类名，如果没有查到先把软件关了，重新打开 ，F A记得大写（小驼峰，第一个小写，后面首字母大写）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20210723162335666.png" alt="前台查看包名类名"></p><h5 id="查看启动入口"><a href="#查看启动入口" class="headerlink" title="查看启动入口"></a>查看启动入口</h5><ul><li>先把需要查询的App关掉，然后清除日志，再打开“动态监控”，然后启动App</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#清除日志（关闭 app 后执行）</span>adb logcat -c<span class="token comment"># 动态监控</span>adb logcat <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"Display"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210723164329438.png" alt="查看主入口"></p><h4 id="后台查看"><a href="#后台查看" class="headerlink" title="后台查看"></a>后台查看</h4><ul><li>在不运行APP的情况下，直接查看本地的APP文件</li><li>需要在adb 的 build-tools目录下（aapt同级目录）启动cmd窗口或者配置path路径</li></ul><h5 id="查看包名和启动入口"><a href="#查看包名和启动入口" class="headerlink" title="查看包名和启动入口"></a>查看包名和启动入口</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看.apk安装包的包名和启动入口</span>aapt dump badging apk文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210723163208327.png" alt="查看包名和启动入口"></p><h5 id="查看包名"><a href="#查看包名" class="headerlink" title="查看包名"></a>查看包名</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看文件的包名</span>aapt dump badging C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>inc.apk<span class="token punctuation">(</span>APP的路径<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"package"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20210723163444450.png" alt="查看apk文件包名"></p><h5 id="查看启动入口-1"><a href="#查看启动入口-1" class="headerlink" title="查看启动入口"></a>查看启动入口</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aapt dump badging C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token punctuation">\</span>Desktop<span class="token punctuation">\</span>inc.apk <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"launchable-activity"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://geojsonpublic.510link.com/notes/ada/image-20210723163651451.png" alt="查看apk文件启动入口"></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#</span>dumpsys meminfo 包名<span class="token comment">#读取电量和温度</span>adb shell dumpsys battery<span class="token comment"># 内存使用信息</span>adb shell dumpsys meminfo<span class="token comment">#查看启动时间（一般是看冷启动）  (注意大小写，和更换包名，thistime totaltime里面的数据就是启动时间)</span>adb shell am start -W com.lemon.lemonban/.activity.WelcomeActivity<span class="token comment">#获取当前设备的IP地址（wifi） </span>adb shell <span class="token string">"ip addr | grep global"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动应用</span>adb shell am start -n 包名/启动入口adb shell am start -n com.inc.mobile.manager/com.inc.mobile.manager.view.ui.activity.LaunchActivity<span class="token comment">#多台设备下指定一台设备操作</span>adb -s devicesName 指令       <span class="token comment">#adb进程服务</span>adb start-server 重启服务adb kill-server  关闭服务 <span class="token comment">#Wifi连接/断开设备</span>adb tcpip port设置端口如5555<span class="token punctuation">(</span>需连接usb<span class="token punctuation">)</span>adb connect <span class="token function">ip</span> 连接ip设备adb disconnect ip:port  取消连接ip设备<span class="token comment">#重启/关闭设备</span>adb <span class="token function">reboot</span> <span class="token comment">#重启</span>adb shell <span class="token function">reboot</span> -p <span class="token comment">#关机</span><span class="token comment">#清除程序数据</span>adb shell pm <span class="token function">clear</span> packageName<span class="token comment">#程序安装与卸载</span>adb <span class="token function">install</span> ***.apk    <span class="token comment">#安装</span>adb <span class="token function">install</span> -t ***.apk <span class="token comment">#覆盖安装</span>adb <span class="token function">install</span> -r -t ***.apk <span class="token comment">#RUN出来的包是test-onlu的安装</span>adb uninstall packageName  <span class="token comment">#卸载不保留数据</span>adb uninstall -k packageName <span class="token comment">#卸载保留数据</span><span class="token comment">#查看已安装的应用</span>adb shell pm list packages 查看所有应用adb shell pm list packages -s  查看系统应用adb shell pm list packages -3  查看三方应用<span class="token comment">#查看当前聚焦程序包名、类名</span>adb shell dumpsys activity <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"mFocusedActivity"</span>  安卓≤7（前台运行）adb shell dumpsys activity <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"mResumedActivity"</span>   安卓≥8（前台运行程序）<span class="token comment">#查看apk安装包包名、启动入口、元素探测</span>aapt dump badging ***.apk    <span class="token comment">#查看apk的包名和启动入口</span>aapt dump badging ***.apk <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"package"</span> <span class="token comment">#找apk包名</span>aapt dump badging ***.apk <span class="token operator">|</span> <span class="token function">find</span> <span class="token string">"launchable-activity"</span> <span class="token comment">#找apk启动入口</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Administrator<span class="token operator">&gt;</span>uiautomatorviewer   <span class="token comment">#启动元素探测bat文件</span><span class="token comment">#监控crash/ANR事件：</span>adb shell am monitor<span class="token comment">#其它</span>adb shell dumpsys meminfo PID  内存监控adb shell <span class="token string">"ip addr | grep global"</span> 获取设备的IP地址adb shell am start -W 包名/启动入口  查看启动时间（一般是看冷启动）adb shell wm size  查看屏幕分辨率adb shell dumpsys battery 读取电量和温度adb shell dumpsys meminfo 内存使用信息adb shell input keyevent <span class="token number">26</span> <span class="token number">82</span><span class="token punctuation">(</span><span class="token number">26</span>息屏或唤醒/82菜单键，上滑解锁可以一起用<span class="token punctuation">)</span><span class="token comment">#keyevent对应值: https://www.cnblogs.com/zhuminghui/p/10470865.html</span><span class="token comment">#https://blog.csdn.net/xiezhiming1234/article/details/82117709</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过wifi连接adb"><a href="#通过wifi连接adb" class="headerlink" title="通过wifi连接adb"></a>通过wifi连接adb</h3><ul><li>0.首先==个人不推荐wifi连接，不稳定==，如果需要使用需要满足手机和电脑在同一局域网</li><li>1.保持usb连接,adb devices能监测到设备</li><li>2.==adb tcpip 5555==  确定你的手机和电脑通讯号</li><li>3.拔掉usb线，再通过 ==adb connect 手机ip地址==（跟模拟器差不多一个原理，不需要再输端口号了，上面确定过了，手机IP地址，找到wifi,然后找到详细信息里面的地址，需要在局域网内）</li><li>4.adb 网络断开设备：==adb disconnect  &lt;设备的IP地址&gt;:5555== 即可断开</li><li>5.如果多设备连接的情况，需要给每个设备设置不同的tcpip<br>==adb -s822QADU5246SE tcpip 1996==<br>==adb -s f06d7a07 tcpip 1997==  </li><li>如果一直连接不上，回想一下你的设备会在局域网其它电脑里面连接过该设备吗，手机开发者模式—》调试—》撤销usb调试  然后再试下 第二步 adb tcpip 5555 这个输入一次即可（在不撤销usb调试均有效），后面不用usb 直接进入第三步开始连接  ==不要同一部手机同时使用usb和wifi，会出问题==</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20210723171428438.png" alt="wifi连接adb"></p><h1 id="appium"><a href="#appium" class="headerlink" title="appium"></a>appium</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Appium 是移动端自动化测试工具，市面上还有很多如 Robotium UIAutomator </li><li>Native apps（原生应用）：仅使用Android或iOS的标准SDK编写的应用；</li><li>Web apps（移动浏览器应用）：用移动平台的浏览器访问的应用；</li><li>Hybrid apps（混合应用）：把一个基于webview实现的功能进行包装的应用。**<a href="https://blog.csdn.net/maetelibom/article/details/51557941">更多资料</a>**</li></ul><table><thead><tr><th>栏目</th><th>Appium</th><th>Robotium</th><th>UIAutomator</th></tr></thead><tbody><tr><td>是否支持跨进程</td><td>是</td><td>否</td><td>是</td></tr><tr><td>是否支持跨平台（Android、iOS）</td><td>是</td><td>否</td><td>否</td></tr><tr><td>是否支持脚本录制</td><td>是</td><td>需付费</td><td>否</td></tr><tr><td>是否支持无源码的APK</td><td>是</td><td>是</td><td>是</td></tr><tr><td>支持的编程语言</td><td>主流语言均支持</td><td>Java</td><td>Java</td></tr><tr><td>支持的应用类型</td><td>Native apps、hybrid apps、mobile web apps</td><td>Native apps、hybrid apps、mobile web apps</td><td>Native apps、hybrid apps</td></tr></tbody></table><h2 id="安装Appium-Desktop"><a href="#安装Appium-Desktop" class="headerlink" title="安装Appium Desktop"></a>安装Appium Desktop</h2><p>📌1.安装后首次打开如果为英文版本可调成中文：左上角View—languages—中文</p><p>📌2.配置地址和端口后启动</p><p>📌注：这个程序个人感觉兼容性很差(当时的版本)，下载的时候找到热度高的版本和对应的位数系统,使用本程序前需要注意以下几点：==打开手机的开发者模式，勾选USB调试== ==手机USB模式不要设置为仅充电== ==通过终端adb devices能监测到设备，并且处于已授权状态== ==尽量不使用wifi模式连接，比较卡== ==部分手机可能需要开启【禁止权限监控】开发者选项–&gt;应用–&gt;禁止权限监控==</p><p><img src="http://blog.adalucky.com/notes/ada/image-20210723124135834.png" alt="ip和端口配置"></p><h2 id="安装appium-doctor"><a href="#安装appium-doctor" class="headerlink" title="安装appium-doctor"></a>安装appium-doctor</h2><ul><li>这个安装非必选项，主要用于检测哪些配置没有设置的</li><li>安装命令：==sudo npm install -g appium-doctor==（Mac） 启动命令：==appium-doctor==</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20210723193925024.png" alt="appium-doctor"></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><span class="github-emoji"><span>▶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>运行 Appium 点击上图的“启动服务器V1.15.1”进入下图后点击启动会话“③”</p><p><img src="http://blog.adalucky.com/notes/ada/image-20210723124302077.png" alt="启动会话"></p><h3 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h3><p><span class="github-emoji"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>deviceName**:**设备的名称   如果是WIF无线连接的设备名称输入设备ip:port形式  通过adb devices监会出现：2c0d4390   device,如果监测不到证明没有连上设备，确保驱动安装，调试模式都打开</p><p><span class="github-emoji"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>platformName<strong>：</strong>设备类型 Android / iOS</p><p><span class="github-emoji"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>appPackage<strong>：</strong>获取安装包名&amp;启动入口</p><p><span class="github-emoji"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>appActivity<strong>：</strong>启动路径（启动入口，每个APP只有一个入口）</p><p><img src="http://blog.adalucky.com/notes/ada/image-20210723124418361.png" alt="四大基础数据配置"></p><h3 id="Error报错处理"><a href="#Error报错处理" class="headerlink" title="Error报错处理"></a>Error报错处理</h3><h4 id="Stderr-‘Security-exception-Permission-denial-writing-to-settings"><a href="#Stderr-‘Security-exception-Permission-denial-writing-to-settings" class="headerlink" title="Stderr: ‘Security exception: Permission denial: writing to settings"></a>Stderr: ‘Security exception: Permission denial: writing to settings</h4><ul><li>由于未开启权限监控导致开启方法开发者选项–&gt;应用–&gt;<span class="github-emoji"><span>✅</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 禁止权限监控</li></ul><blockquote><p>报错内容：</p><p>An unknown server-side error occurred while processing the command. Original error: Error executing adbExec. Original error: ‘Command ‘/usr/local/bin/adb -P 5037 -s f06d7a07 shell settings delete global hidden_api_policy_pre_p_apps’ exited with code 255’; Stderr: ‘Security exception: Permission denial: writing to settings requires:android.permission.WRITE_SECURE_SETTINGS java.lang.SecurityException: Permission denial: writing to settings requires:android.permission.WRITE_SECURE_SETTINGS at com.android.providers.settings.SettingsProvider.enforceWritePermission(SettingsProvider.java:2340) at com.android.providers.settings.SettingsProvider.mutateGlobalSetting(SettingsProvider.java:1405) at com.android.providers.settings.SettingsProvider.deleteGlobalSetting(SettingsProvider.java:1388) at com.android.providers.settings.SettingsProvider.call(SettingsProvider.java:603) at android.content.ContentProvider.call(ContentProvider.java:2162) at android.content.ContentProvider$Transport.call(ContentProvider.java:481) at com.android.providers.settings.SettingsService$MyShellCommand.deleteForUser(SettingsService.java:399) at com.android.providers.settings.SettingsService$MyShellCommand.onCommand(SettingsService.java:281) at android.os.ShellCommand.exec(ShellCommand.java:104) at com.android.providers.settings.SettingsService.onShellCommand(SettingsService.java:49) at android.os.Binder.shellCommand(Binder.java:881) at android.os.Binder.onTransact(Binder.java:765) at android.os.Binder.execTransactInternal(Binder.java:1021) at android.os.Binder.execTransact(Binder.java:994)’; Code: ‘255’</p></blockquote><p><img src="http://blog.adalucky.com/notes/ada/image-20210723190856548.png" alt="开启禁止监控权限"></p><h4 id="Could-not-find-a-connected-Android-device-in-20201ms"><a href="#Could-not-find-a-connected-Android-device-in-20201ms" class="headerlink" title="Could not find a connected Android device in 20201ms."></a>Could not find a connected Android device in 20201ms.</h4><ul><li>An unknown server-side error occurred while processing the command. Original error: Could not find a connected Android device in 20201ms. </li></ul><blockquote><p>电脑在设定时间内找不到设备，一般这种情况下用 ==adb devices== 也找不到设备，这个时候去检查一下 ==开发者选项== ==usb调试== 如果都开启了，那再看下==usb连接后不能设置仅充电== ==电脑是否安装了手机的驱动== 如果没有的话需要安装手机的驱动（高通的cpu可以安装高通的通用版），最终要保证能通过 adb 命令检测到手机</p></blockquote><p><img src="http://blog.adalucky.com/notes/ada/image-20210723192042261.png" alt="开启usb调试"></p><h4 id="The-JAVA-HOME-environment-variable-must-be-set-for-Android-Tools-to-work-properly"><a href="#The-JAVA-HOME-environment-variable-must-be-set-for-Android-Tools-to-work-properly" class="headerlink" title="The JAVA_HOME environment variable must be set for Android Tools to work properly"></a>The JAVA_HOME environment variable must be set for Android Tools to work properly</h4><ul><li>未设置java环境变量</li></ul><blockquote><p>An unknown server-side error occurred while processing the command. Original error: Cannot verify the signature of ‘C:\Users\Administrator\AppData\Local\Programs\Appium\resources\app\node_modules\appium\node_modules\appium-uiautomator2-server\apks\appium-uiautomator2-server-v4.21.1.apk’. Original error: The JAVA_HOME environment variable must be set for Android Tools to work properly</p></blockquote><ul><li>通过java javac java -version执行均正常</li><li>通过appium-doctor执行也是正常</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20210724021200458.png" alt="重新安装"></p><h4 id="Injecting-to-another-application-requires-INJECT-EVENTS-permission"><a href="#Injecting-to-another-application-requires-INJECT-EVENTS-permission" class="headerlink" title="Injecting to another application requires INJECT_EVENTS permission"></a>Injecting to another application requires INJECT_EVENTS permission</h4><ul><li>未开启USB模拟点击</li></ul><blockquote><p>An unknown server-side error occurred while processing the command. Original error: java.lang.SecurityException: Injecting to another application requires INJECT_EVENTS permission</p></blockquote><p><img src="http://geojsonpublic.510link.com/notes/ada/image-20210724022950126.png" alt="开启USB模拟点击"></p><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;Appium是一个开源的，适用于原生或混合移动应用（ hybrid mobile apps ）的自动化测试工具，Appium应用WebDriver: JSON wire protocol驱动安卓和iOS移动应用。Appium选择了Client/Server的设计模式。只要client能够发送http请求给server，那么的话client用什么语言来实现都是可以的，这就是如何做到支持多语言的原因；&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="app" scheme="https://www.adalucky.com/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>jenkins</title>
    <link href="https://www.adalucky.com/auto/jenkins/"/>
    <id>https://www.adalucky.com/auto/jenkins/</id>
    <published>2022-02-18T04:21:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Jenkins是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/8105369">开源软件</a>项目，是基于<a href="https://baike.baidu.com/item/Java/85979">Java</a>开发的一种<a href="https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/6250744">持续集成</a>工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件项目可以进行持续集成，本文将记录在 Linux环境下安装及配置 Jenkins</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.jenkins.io/download/" target="_blank" class="LinkCard" style="text-decoration: none;">Jenkins&nbsp;下载地址</a></p><h1 id="简介及搭建"><a href="#简介及搭建" class="headerlink" title="简介及搭建"></a>简介及搭建</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Jenkins是一个用Java编写的开源的持续集成工具。官方网站：<a href="https://jenkins.io/">https://jenkins.io/</a><br>Jenkins能实时监控持续集成过程中所存在的问题，提供详细的日志文件和提醒功能，还能用图表的形式，形象地展示项目构建的趋势和稳定性。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>Jenkins自动化部署可以解决集成、测试、部署等重复性的工作，工具集成的效率明显高于人工操作；并且持续集成可以更早的获取代码变更的信息，从而更早的进入测试阶段，更早的发现问题，这样解决问题的成本就会显著下降：持续集成缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间出现的等待时间；持续集成也意味着开发、集成、测试、部署得以持续</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul><li><p>腾讯云：linux centos7.6 64位</p></li><li><p>Jenkins版本：2.235.5</p></li><li><p>Email Extension Plugin版本：2.75</p></li><li><p>jdk版本：1.8.0_221</p></li><li><p>git版本：2.28.0</p></li><li><p>maven版本：3.6.3</p></li><li><p>allure版本：2.12.1</p><p>注：以上除allure外其它程序均安装至linux服务器上，并配置环境变量</p></li></ul><h2 id="安装JDK1-8"><a href="#安装JDK1-8" class="headerlink" title="安装JDK1.8+"></a>安装JDK1.8+</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">JDK 下载地址</a>  官网需要注册登录，不方便的可以自行百度下载，版本不要差太多（当时是运维发的一个 jdk-8u221-linux-x64.tar.gz）</li><li>注：jdk需要1.8+ 不然Jenkins可能会出错</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902151948.png" alt="jdk下载"></p><h3 id="上传至服务器"><a href="#上传至服务器" class="headerlink" title="上传至服务器"></a>上传至服务器</h3><p>本步骤的目的是为了把下载的 jdk 包上传到服务器，这里提供两种方法，也可以通过自己的方法，只要能传上去就行</p><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><ul><li>通过xftp直接拖取文件（不做演示，因为我没装xftp，哈哈哈）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902151949.png" alt="xftp上传jdk"></p><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><ul><li>通过 linux 命令行方式 上传文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#cd:切换目录</span><span class="token comment">#rz:文件上传（如果提示报错或者找不到是因为没有安装lrzsz输入以下命令安装）</span><span class="token comment">#安装lrzsz</span>yum -y <span class="token function">install</span> lrzsz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/20200902151950.png" alt="rz 命令上传文件"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><ul><li>本步骤的目的是将上传的 tar.gz 的包进行解压</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ls:展示当前文件夹内的文件</span><span class="token comment">#tar -xzvf:解压文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/20200902151951.png" alt="解压jdk 包"></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><ul><li>:wq（冒号wq）:保存退出</li><li>:q(冒号q):直接退出（如果没有修改文件可以直接退出）</li><li>:q!(冒号q!):强制退出不保存（如果改错了可以用这个）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#用vim编辑器打开/etc/profile文件</span><span class="token function">vim</span> /etc/profile <span class="token comment">#编辑打开的文件,没有就新增 JAVA_HOME 换成自己刚才解压后的目录</span><span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/jdk1.8.0_221  <span class="token assign-left variable">JAVA_BIN</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin<span class="token assign-left variable">JRE_HOME</span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/jre<span class="token assign-left variable">JRE_BIN</span><span class="token operator">=</span><span class="token variable">$JRE_HOME</span>/bin<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_BIN</span><span class="token builtin class-name">:</span><span class="token variable">$JRE_BIN</span><span class="token builtin class-name">:</span><span class="token environment constant">$PATH</span><span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar:<span class="token variable">$JRE_HOME</span>/lib<span class="token builtin class-name">export</span> JAVA_HOME JRE_HOME <span class="token environment constant">PATH</span> CLASSPATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220218124941373.png" alt="配置环境变量"></p><ul><li>让刚才修改的配置立即生效</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#让配置立即生效</span><span class="token builtin class-name">source</span> /etc/profile<span class="token comment">#查看java版本</span>java -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/20200902151954.png" alt="配置立即生效"></p><h2 id="启动-Jenkins"><a href="#启动-Jenkins" class="headerlink" title="启动 Jenkins"></a>启动 Jenkins</h2><ul><li>方法一：服务器安装tomcat,并放置Jenkins.war，启动tomcat</li><li>方法二：用java启动（这样就不需要安装和启动tomcat了，省服务器资源 <code>推荐</code>)</li></ul><h3 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h3><ul><li>本地解压tomcat，把war包放到webapps内，运行bin目录下的.bat处理文件，这个时候DOS系统会自己跑起来，会先检测到war包，然后配置环境，如果安装启动成功就可以了</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152623.png" alt="tomacat 启动 jenkins"></p><p><img src="http://blog.adalucky.com/notes/ada/20200902152624.png" alt="Jenkins 解锁密码路径"></p><p><img src="http://blog.adalucky.com/notes/ada/20200902152625.png" alt="启动成功提示"></p><h3 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h3><ul><li>前提是配置好 java 和下载好 jenkins.war 包了</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># oohup启动命令</span><span class="token function">nohup</span> java -jar -Xms512m -Xmx1g -Xmn512m jenkins.war --httpPort<span class="token operator">=</span><span class="token number">9000</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/20200909175325.png" alt="nohup 后台启动 jenkins"></p><h1 id="访问-Jenkins"><a href="#访问-Jenkins" class="headerlink" title="访问 Jenkins"></a>访问 Jenkins</h1><h2 id="解锁登录"><a href="#解锁登录" class="headerlink" title="解锁登录"></a>解锁登录</h2><ul><li>当我们通过 Tomcat 或者 nohup java -jar 的方式 启动好 jenkins 后便可以开始访问及配置了（如果是本地部署的访问 127.0.0.1 服务器部署的访问对应 ip）</li><li>第一次启动有个密码校验，会在 jenkins 的启动日志中有自己找下</li><li><code>以下的图是最开始学 Jenkins的时候截取的，所以是在 windows 上的，但是后面网页上的操作都是一样的所以不重新截图了</code></li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152626.png" alt="访问 jenkins"></p><ul><li>IP、端口和启动的保持一致</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152627.png" alt="配置实例"></p><ul><li>如果点击保持并完成以后页面出现空白页需要修改jenkins的config配置文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /root/.jenkins/config.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/20200902152628.png" alt="解锁后空白页解决方案"></p><h2 id="升级站点"><a href="#升级站点" class="headerlink" title="升级站点"></a>升级站点</h2><ul><li><code>更换url</code>为：<a href="http://mirror.esuni.jp/jenkins/updates/update-center.json">http://mirror.esuni.jp/jenkins/updates/update-center.json</a></li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152629.png" alt="更换站点 url"></p><h2 id="全局环境配置"><a href="#全局环境配置" class="headerlink" title="全局环境配置"></a>全局环境配置</h2><ul><li>指定我们的 jdk 的绝对路径（linux也是一样）</li><li>maven 如果本地有安装就指定，没有安装勾选自动安装（<code>如果没有安装可以点自动安装，截图中的是针对本地已经安装了的</code>）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152630.png" alt="全局环境配置1"></p><p><img src="http://blog.adalucky.com/notes/ada/20200902152631.png" alt="全局环境配置2"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ul><li>是在是找不到截图了，本步骤的目的就是需要装一些插件，通过这些插件去实现一些 jenkins 没有的功能（如果这些插件装过了就不用管）</li><li>安装插件，因为我们要调用svn,邮箱等等服务，必须要依赖插件</li><li>安装插件：<code>Maven Integration</code> <code>Groovy Label Assignment</code> <code>HTML Publisher</code> <code> Email Extension</code> <code>Subversion</code>  有可能插件安装不起来，因为你的war包和当前插件版本匹配，可以更新为最新war包</li></ul><h1 id="新建项目及配置"><a href="#新建项目及配置" class="headerlink" title="新建项目及配置"></a>新建项目及配置</h1><h2 id="新增项目"><a href="#新增项目" class="headerlink" title="新增项目"></a>新增项目</h2><ul><li>创建一个 maven 项目用来构建我们的工程</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152632.png" alt="构建maven项目"></p><h2 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h2><ul><li>配置我们的项目源代码的地址及账号密码信息</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152634.png" alt="配置 git信息"></p><h2 id="Build配置"><a href="#Build配置" class="headerlink" title="Build配置"></a>Build配置</h2><p><img src="http://blog.adalucky.com/notes/ada/20200902152639.png" alt="Build配置"></p><h2 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h2><ul><li><p>所谓的触发器，就是满足什么条件去自动触发，比如每天早上 7 点开始自动去执行，或者当我们自己的 git 仓库或者开发的 git 仓库发生了 push 提交代码</p></li><li><p>时间表达式：*/5 * * * *   一共5个值</p><ul><li>Minute：分钟值  （0-59）</li><li>Hour    ：时钟值  （0-23）</li><li>Dom     ：日期    （1-31）</li><li>Month   ：月份    （1-12）</li><li>Dow    ： 一周中的某一天（0-7），0和7都代表的是礼拜天</li></ul></li><li><p>每个字段的值还可以单独配置</p></li><li><p>*：所有的值      如果在分钟数就是每分钟，日期值上就是每天</p></li><li><p>M-N :指定一个范围区间的值    如果在分钟值上，就是0-10分钟之间</p></li><li><p>M-N/X :    1-30/5(如果在分钟数就可以理解为1-30分钟的时候每隔5分钟)</p></li><li><p>*/x：  */5 如果在分钟值就是每隔5分钟，时钟值就是每隔5小时</p></li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152640.png" alt="构建触发器"></p><h2 id="邮件配置"><a href="#邮件配置" class="headerlink" title="邮件配置"></a>邮件配置</h2><ul><li>配置邮箱的目的是为了让我们项目构建后给我们发邮件通知我们构建成功与否</li><li>发邮件需要装 Email Extension Plugin 插件</li></ul><h3 id="获取smtp服务密码步骤"><a href="#获取smtp服务密码步骤" class="headerlink" title="获取smtp服务密码步骤"></a>获取smtp服务密码步骤</h3><ul><li>QQ邮箱为例</li><li>进入QQ邮箱主页，点击设置</li><li>找到“账户”页签，在开启服务下面，找到IMAP/SMTP服务对应的“开启”按钮点击，然后–》申请密保</li><li>按照弹窗里的提示给腾讯发送短信，你就会收到一个授权码，这个就是密码（记得先保存好授权码）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152643.jpeg" alt="smtp授权码"></p><h3 id="邮件信息配置"><a href="#邮件信息配置" class="headerlink" title="邮件信息配置"></a>邮件信息配置</h3><ul><li>配置系统管理员的邮箱  发件人的邮箱  收件人的邮件</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152549.png" alt="配置系统管理员邮箱"></p><p><img src="http://blog.adalucky.com/notes/ada/20200902152550.png" alt="发件人邮箱配置"></p><ul><li>如果邮箱发生用问题可在构建的控制台输出中 debug里面看日志</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152551.png" alt="开启 debug 模式"></p><h2 id="构建后操作"><a href="#构建后操作" class="headerlink" title="构建后操作"></a>构建后操作</h2><ul><li>我们期望构建后给我们发邮件，上面配置的只是发件人的，现在要配置接收人的邮箱账号</li><li>当时我出现过按照老师的教程配置了控制台也提示邮件发送成功，但是就是收不到最后一番折腾：<a href="https://issues.jenkins-ci.org/browse/JENKINS-34731">https://issues.jenkins-ci.org/browse/JENKINS-34731</a></li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902152552.png" alt="构建后操作配置收件人和模板 1"></p><p><img src="http://blog.adalucky.com/notes/ada/20200902152553.png" alt="构建后操作配置收件人和模板 2"></p><h2 id="报告模板"><a href="#报告模板" class="headerlink" title="报告模板"></a>报告模板</h2><ul><li>以下为格式：点击即可注意测试报告这个地方<a href="http://49.234.62.82:9090/job/tb_api_auto/allure/">http://49.234.62.82:9090/job/tb_api_auto/allure/</a>  最后这个斜杠带上，不然会调制登陆页面</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> (本邮件是程序自动下发的，请勿回复！)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 项目名称：$PROJECT_NAME<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 构建编号：$BUILD_NUMBER<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 构建状态：$BUILD_STATUS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 触发原因：${CAUSE}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 测试报告：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://49.234.62.82:9090/job/tb_api_auto/allure<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>http://49.234.62.82:9090/job/tb_api_auto/allure/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 构建日志地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${BUILD_URL}console<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${BUILD_URL}console/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 构建地址：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$BUILD_URL<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>$BUILD_URL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 构建报告：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${BUILD_URL}testReport<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>${BUILD_URL}testReport/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span> 变更集:${JELLY_SCRIPT,template="html"}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="公司网络匿名访问"><a href="#公司网络匿名访问" class="headerlink" title="公司网络匿名访问"></a>公司网络匿名访问</h2><ul><li>在我们发出的邮件中往往有很多的资源，提供公司的其它人员访问例如我们配置在邮件里面的allure报表,pom，日志等以下内容，但是访问需要对方登陆</li><li>理论上来说是合理的，登录校验，但是有些领导他可能不需要这个账号，或者只是自己在用没给别人建立账号</li><li>于是我们就必须去权限控制里面开启<code>匿名用户的read权限</code>，但是这样又会存在一定的风险性，于是通过<code>访问权限控制+服务器安全组策略进行控制</code></li><li>匿名访问只是针对一部分功能的查看权限，执行权限必须要登录的</li></ul><h3 id="开启匿名访问权限"><a href="#开启匿名访问权限" class="headerlink" title="开启匿名访问权限"></a>开启匿名访问权限</h3><ul><li>Jenkins首页—&gt;Manage Jenkins—-&gt;Security—&gt;Configure Global Security</li></ul><p><img src="http://blog.adalucky.com/notes/ada/20200902151955.png" alt="配置全局安全性"></p><p><img src="http://blog.adalucky.com/notes/ada/20200902151956.png" alt="开启匿名访问"></p><h3 id="服务器安全组配置"><a href="#服务器安全组配置" class="headerlink" title="服务器安全组配置"></a>服务器安全组配置</h3><ul><li>设定只允许公司的IP访问</li><li>上面我们已经实现了匿名用户的访问读取权限，但是我们又不想完全的暴露在互联网上，解决办法就是给服务器设置安全组，针对这个端口只允许固定的ip访问，这样就能保证只有你们公司的人才能看到了当然，你自己回到家也看不了，那么就把家里的ip也配置上吧（我这里就以我腾讯云的服务器为例）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220218143203298.png" alt="入站策略"></p><h2 id="Linux开机自启Jenkins"><a href="#Linux开机自启Jenkins" class="headerlink" title="Linux开机自启Jenkins"></a>Linux开机自启Jenkins</h2><ul><li>这里做的是通过 java -jar 方式直接启动的，如果是 tomcat 的话原理一样的，改成开机自动启动 tomcat，然后就相当于启动了 jenkins</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入etc/rc.local后添加启动命令 （确保该文件有执行权限X）</span><span class="token function">vim</span> /etc/rc.local <span class="token comment">#jenkins开机启动    /ada/jenkins---jenkins.war包所在位置</span><span class="token builtin class-name">cd</span> /ada/jenkins <span class="token operator">&amp;&amp;</span> <span class="token function">nohup</span> java -jar -Xms600m -Xmx1g -Xmn512m jenkins.war --httpPort<span class="token operator">=</span><span class="token number">9090</span> <span class="token operator">&amp;</span><span class="token comment">#重启服务器</span><span class="token function">reboot</span><span class="token comment">#查看服务是否启动成功</span><span class="token function">ps</span> -ef<span class="token operator">|</span><span class="token function">grep</span> jenkins<span class="token comment">#出现如下表示成功</span><span class="token punctuation">[</span>root@VM_0_16_centos jenkins<span class="token punctuation">]</span><span class="token comment"># ps -ef|grep jenkins</span>root      <span class="token number">1025</span>  <span class="token number">1024</span>  <span class="token number">3</span> <span class="token number">16</span>:58 ?        00:00:28 java -jar -Xms600m -Xmx1g -Xmn512m jenkins.war --httpPort<span class="token operator">=</span><span class="token number">9090</span>root      <span class="token number">3602</span>  <span class="token number">1852</span>  <span class="token number">0</span> <span class="token number">17</span>:13 pts/1    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto jenkins<span class="token comment">#情况二：如果开机启动不成功，复制我们cd /ada/jenkins.....这条命令在外面任意位置看是否能启动成功，如果启动成功表示命令没有问题</span><span class="token number">1</span>.然后检查我们格式是否有问题<span class="token number">2</span>.添加java软连接：ln -s /ada/java/jdk1.8.0_221/bin/* /usr/bin/       ----/ada/java/jdk1.8.0_221<span class="token punctuation">(</span>java的安装路径/bin/*就是把里面所有的命令都添加到/user/bin里面<span class="token punctuation">)</span><span class="token number">3</span>.echo <span class="token environment constant">$PATH</span>查看<span class="token punctuation">[</span>root@VM_0_16_centos ~<span class="token punctuation">]</span><span class="token comment"># echo $PATH</span>/ada/java/jdk1.8.0_221/bin:/ada/java/jdk1.8.0_221/jre/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/ada/java/jdk1.8.0_221/bin:/ada/maven/apache-maven-3.6.3/bin:/usr/local/git/bin:/ada/allure/package/bin:/root/bin<span class="token punctuation">[</span>root@VM_0_16_centos ~<span class="token punctuation">]</span><span class="token comment"># ln -s /ada/java/jdk1.8.0_221/bin/* /usr/bin/Connection closing...Socket close.</span><span class="token comment">#reboot重启应该就能开机自动启动了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/20200909174655.png" alt="开机自启动 jenkins"></p><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;Jenkins是一个&lt;a href=&quot;https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/8105369&quot;&gt;开源软件&lt;/a&gt;项目，是基于&lt;a href=&quot;https://baike.baidu.com/item/Java/85979&quot;&gt;Java&lt;/a&gt;开发的一种&lt;a href=&quot;https://baike.baidu.com/item/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/6250744&quot;&gt;持续集成&lt;/a&gt;工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件项目可以进行持续集成，本文将记录在 Linux环境下安装及配置 Jenkins&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="jenkins" scheme="https://www.adalucky.com/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>npm</title>
    <link href="https://www.adalucky.com/auto/npm/"/>
    <id>https://www.adalucky.com/auto/npm/</id>
    <published>2022-02-04T06:14:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>npm全称<strong>node package manager</strong>，是node包管理和分发工具。可以理解为前端的maven。通过npm可以很方便的下载js库，管理前端工程。node已经集成npm工具，在cmd中输入<code>npm -v</code>查看当前npm版本。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=586217027&amp;bvid=BV1Pz4y1S7Uv&amp;cid=283045282&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="认识-npm"><a href="#认识-npm" class="headerlink" title="认识 npm"></a>认识 npm</h1><h2 id="发展简介"><a href="#发展简介" class="headerlink" title="发展简介"></a>发展简介</h2><ul><li>npm：npm是一个JavaScript的包管理程序（Node Package Manager）—&gt;类似与java的maven</li><li>npm的由来：当一个项目依赖的代码越来越多，程序员发现这是一件很麻烦的事情：<ul><li>我要去哪里下载我要的第三方依赖？</li><li>我要用什么版本？</li><li>如何更新我已经使用的第三方依赖？</li><li>等等。。。。。。</li><li>有些程序员就受不鸟了，一个拥有三大美德的程序员 Isaac Z. Schlueter （以下简称 Isaaz）给出了一个解决方案：用一个工具把这些代码集中到一起来管理吧！这个工具就是他用 JavaScript （运行在 Node.js 上）写的 npm，全称是 Node Package Manager</li></ul></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>npm（全称Node Package Manager，即node包管理器）</p></li><li><p>是Node.js默认的、以JavaScript编写的软件包管理系统 </p></li><li><p>npm 来分享和使用代码已经成了前端的标配</p></li><li><p>官网： <a href="https://www.npmjs.com/">https://www.npmjs.com</a></p></li><li><p>npm被全球超过1100万开发人员所依赖</p></li><li><p>拥有超过一百万个软件包，是世界上最大的软件注册表</p></li><li><p>npm的思路大概是这样的：</p><ul><li>买个服务器作为代码仓库（repository），在里面放所有需要被共享的代码</li></ul></li><li><p>发邮件通知 jQuery 、Bootstrap 、Underscore 的作者使用 npm publish 把代码提交到 repository 上，分别取名 jquery、bootstrap 和 underscore（注意大小写）</p><ul><li>社区里的其他人如果想使用这些代码，就把 jquery、bootstrap 和 underscore 写到 package.json 里，然后运行 npm install ，npm 就会帮他们下载代码</li><li>下载完的代码出现在 node_modules 目录里，就可以随意使用了。<br>这些可以被使用的代码被叫做「包」（package），这就是 npm名字的由来：Node Package(包) Manager(管理器)。 </li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220204143504354.png" alt="npm"></p></li></ul><h1 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 npm</h1><ul><li>npm是Node.js默认的软件包管理系统</li><li>安装完毕node后，会默认安装好npm</li><li>npm本身也是基于Node.js开发的软件</li><li>下载Node: <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a> 下载对应的安装包进行安装</li><li>npm 的发展是跟 node.js 的发展相辅相成的。node.js 是由一个在德国工作的美国程序员 Ryan Dahl 写的。他写了 node.js，但是 node.js 缺少一个包管理器，于是他和npm的作者一拍即合、抱团取暖，最终 node.js 内置了 npm</li></ul><h1 id="使用-npm工具管理包"><a href="#使用-npm工具管理包" class="headerlink" title="使用 npm工具管理包"></a>使用 npm工具管理包</h1><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看node版本</span>ada@ASUS:~$ node -vv14.15.4<span class="token comment">#查看npm版本（如果查看不到：linux可能需要ln -s建立软链接，windows需要配置环境变量）</span><span class="token comment">#ada@ASUS:~$ ln  -s  [源文件或目录]  [目标文件或目录]</span><span class="token comment">#ada@ASUS:~$ ln -s /home/ada/software/programming/node/node-v14.15.4-linux-x64/bin /usr/local/bin/npm</span>ada@ASUS:~$ <span class="token function">npm</span> -v<span class="token number">7.6</span>.3<span class="token comment">#设置淘宝镜像并查看镜像源</span><span class="token comment">#方式一：cnpm</span><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.orgcnpm config get registry <span class="token comment">#方式二：npm</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry  <span class="token function">npm</span> config get registry <span class="token comment">#方式三：使用nrm工具切换镜像源</span>npx nrm use taobao（换淘宝源）npx nrm use <span class="token function">npm</span> <span class="token punctuation">(</span>换回官方源<span class="token punctuation">)</span><span class="token function">npm</span> config get registry （查看当前镜像源）<span class="token comment">#安装vue-cli（默认是最新版本）</span><span class="token function">npm</span> <span class="token function">install</span> -g @vue/clivue --version<span class="token comment">#安装/升级npm -g(全局安装)   npm -g install npm@5.9.1  （@后跟版本号可以指定npm版本） </span>ada@ASUS:~$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token function">npm</span> -g<span class="token comment">#安装模块[可选参数：-g，全局安装 Module Name@版本号指定版本安装，默认安装最新版本 ]</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>Module Name<span class="token operator">&gt;</span><span class="token punctuation">[</span>@版本号<span class="token punctuation">]</span> <span class="token punctuation">[</span>-g<span class="token punctuation">]</span><span class="token comment">#更新模块</span><span class="token function">npm</span> update <span class="token operator">&lt;</span>Module Name<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-g<span class="token punctuation">]</span><span class="token comment">#卸载模块</span><span class="token function">npm</span> uninstall <span class="token operator">&lt;</span>Module Name<span class="token operator">&gt;</span><span class="token comment">#运行时依赖,-save参数指定后会在package.json文件中：dependencies节点下写入依赖（不加save默认也是开发时依赖）</span><span class="token function">npm</span> <span class="token function">install</span> -save <span class="token operator">&lt;</span>Module Name<span class="token operator">&gt;</span><span class="token comment">#开发时依赖，-save-dev参数指定后会在package.json文件中：devDependencies节点下写入依赖，开发时候需要的环境，上线不需要的比如压缩代码这些依赖</span><span class="token function">npm</span> <span class="token function">install</span> -save-dev <span class="token operator">&lt;</span>Module Name<span class="token operator">&gt;</span><span class="token comment">#查看所有全局安装的模块</span><span class="token function">npm</span> list -g<span class="token comment">#查看某个模块版本(需要先进入该项目路径)</span><span class="token function">npm</span> list <span class="token operator">&lt;</span>Module Name<span class="token operator">&gt;</span><span class="token comment">#初始化package.json文件[--yes 参数值默认配置，不加需要手动自命名或者自行再修改]</span><span class="token function">npm</span> init <span class="token punctuation">[</span>--yes<span class="token punctuation">]</span><span class="token comment">#清空本地缓存（删除删除node_modules包、删除package.json.lock） 使用npm cache clear可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。</span><span class="token function">sudo</span> <span class="token function">npm</span> cache clean --force<span class="token function">npm</span> cache verify<span class="token comment">#使用npm unpublish &lt;package&gt;@&lt;version&gt;可以撤销发布自己发布过的某个版本代码。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><ul><li>*注:*安装Node时默认安装npm</li><li>需要安装包时先进入项目根路径然后通过npm install <module name=""> 进行安装，安装时自动递归创建node_modules文件夹和包文件夹</module></li><li>devDependencies：开发时的依赖，里面的模块都是开发时候用的，发布发到正式环境以后就用不到它了，比如项目中使用的测试模块，调试的一些东西还有gulp,压缩css、js的module</li><li>dependencies:运行时的依赖，发布后即在生产环境还是需要用到的模块</li><li>不加-save参数默认是开发时依赖</li></ul><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#生成 package.json 文件（加 --yes 参数即为赋予默认值，不加的话也可以一个个参数进行设置，可用 默认值然后去 package.json 文件中再次修改）</span><span class="token function">npm</span> init --yes<span class="token comment">#参数详解</span>name - 包名。version - 包的版本号。description - 包的描述。homepage - 包的官网 url 。author - 包的作者姓名。contributors - 包的其他贡献者姓名。dependencies - 依赖包列表。如果依赖包没有安装，npm 会自动将依赖包安装在 node_module 目录下。repository - 包代码存放的地方的类型，可以是 <span class="token function">git</span> 或 svn，git 可在 Github 上。main - main 字段指定了程序的主入口文件，require<span class="token punctuation">(</span><span class="token string">'moduleName'</span><span class="token punctuation">)</span> 就会加载这个文件。这个字段的默认值是模块根目录下面的 index.js。keywords - 关键字<span class="token comment">#scripts 节点</span>vue下的scripts 可通过子节点名设置对应执行的命令如：npm run dev 实际执行的就是vue-cli-service serve，可自行修改<span class="token string">"scripts"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>  <span class="token string">"dev"</span><span class="token builtin class-name">:</span> <span class="token string">"vue-cli-service serve"</span>,  <span class="token string">"build"</span><span class="token builtin class-name">:</span> <span class="token string">"vue-cli-service build"</span><span class="token punctuation">}</span><span class="token comment">#版本（启动项目npm install 的时候会去生成锁文件，锁定版本）</span>~4.5.X 安装4.5中的最大版本  ^4.X.X 安装4中的最大版本<span class="token number">4.5</span>.1 安装4.5.1版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20220204155124927.png" alt="生成 package.json文件"></p><h1 id="模块的基本应用"><a href="#模块的基本应用" class="headerlink" title="模块的基本应用"></a>模块的基本应用</h1><ul><li>没有webpack之前搜寻整个 node_modules 目录来定位每个包的路径再手动添加到我们 HTML 文件中（实在太太不方便了,示例如下 先引入路径后使用模块）</li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>测试<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!--    引入模块--&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./node_modules/jquery/dist/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--使用模块--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>大多数编程语言都会提供从一个文件导入另一个文件代码的机制。然而 JavaScript 最初设计时并没有这个特性，因为 JavaScript 原本是为了在浏览器端运行而设计的，并没有权限获取计算机客户端的文件系统（安全考虑）。所以很长一段时间以来，组织多个文件的 JavaScript 代码就是把每个文件下载下来，变量是全局共享的。</li><li>CommonJS 中很大的一部分便是对模块系统的规范，</li><li>使用require语句导入包 （<code>新的ES6可以使用import导入包</code>）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220204165148428.png" alt="require语句导入"></p><h1 id="npm-和-yarn-的对比及迁移"><a href="#npm-和-yarn-的对比及迁移" class="headerlink" title="npm 和 yarn 的对比及迁移"></a>npm 和 yarn 的对比及迁移</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>官网：<a href="http://www.yarnpkg.com/">www.yarnpkg.com</a></li><li>Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 ，正如官方文档中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的。因为NPM5以下会出现下面的问题：<ul><li>npm install的时候巨慢。特别是新的项目拉下来要等半天，删除node_modules，重新install的时候依旧如此。</li><li>同一个项目，多人开发时，由于安装的版本不一致出现bug</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>方式一：下载node.js，使用npm安装<ul><li>npm install -g yarn</li><li>查看版本：yarn –version</li></ul></li><li>方式二：下载yarn的安装程序:提供一个.msi文件，在运行时将引导您在Windows上安装Yarn</li><li>Yarn 淘宝源安装，分别复制粘贴以下代码行到黑窗口运行即可</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org -g<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> init                                   //初始化项目   同npm init，执行输入信息后，会生成package.json文件<span class="token function">yarn</span> <span class="token function">install</span>                   //安装package.json里所有包，并将包及它的所有依赖项保存进yarn.lock<span class="token function">yarn</span> <span class="token function">install</span> --flat        //安装一个包的单一版本<span class="token function">yarn</span> <span class="token function">install</span> --force //强制重新下载所有包<span class="token function">yarn</span> <span class="token function">install</span> --production //只安装dependencies里的包<span class="token function">yarn</span> <span class="token function">install</span> --no-lockfile //不读取或生成yarn.lock<span class="token function">yarn</span> <span class="token function">install</span> --pure-lockfile //不生成yarn.lock<span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span> // 在当前的项目中添加一个依赖包，会自动更新到package.json和yarn.lock文件中<span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>version<span class="token punctuation">]</span> // 安装指定版本，这里指的是主要版本，如果需要精确到小版本，使用-E参数<span class="token function">yarn</span> <span class="token function">add</span> <span class="token punctuation">[</span>package<span class="token punctuation">]</span>@<span class="token punctuation">[</span>tag<span class="token punctuation">]</span> // 安装某个tag（比如beta,next或者latest）<span class="token function">yarn</span> <span class="token function">add</span> --dev/-D // 加到 devDependencies<span class="token function">yarn</span> <span class="token function">add</span> --peer/-P // 加到 peerDependencies<span class="token function">yarn</span> <span class="token function">add</span> --optional/-O // 加到 optionalDependencies//默认安装包的主要版本里的最新版本，下面两个命令可以指定版本：<span class="token function">yarn</span> <span class="token function">add</span> --exact/-E // 安装包的精确版本。例如yarn <span class="token function">add</span> foo@1.2.3会接受1.9.1版，但是yarn <span class="token function">add</span> foo@1.2.3 --exact只会接受1.2.3版<span class="token function">yarn</span> <span class="token function">add</span> --tilde/-T //安装包的次要版本里的最新版。例如yarn <span class="token function">add</span> foo@1.2.3 --tilde会接受1.2.9，但不接受1.3.0发布包  <span class="token function">yarn</span> publish移除一个包  <span class="token function">yarn</span> remove <span class="token operator">&lt;</span>packageName<span class="token operator">&gt;</span>     会自动更新package.json和yarn.lock更新一个依赖  <span class="token function">yarn</span> upgrade 用于更新包到基于规范范围的最新版本运行脚本  <span class="token function">yarn</span> run 用来执行在 package.json 中 scripts 属性下定义的脚本显示某个包的信息 <span class="token function">yarn</span> info <span class="token operator">&lt;</span>packageName<span class="token operator">&gt;</span> 可以用来查看某个模块的最新版本信息缓存  <span class="token function">yarn</span> cache<span class="token function">yarn</span> cache list      <span class="token comment"># 列出已缓存的每个包 </span><span class="token function">yarn</span> cache <span class="token function">dir</span>  <span class="token comment"># 返回 全局缓存位置</span><span class="token function">yarn</span> cache clean <span class="token comment"># 清除缓存</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>速度快 </li><li>安装版本统一</li><li>更简洁的输出</li><li>多注册来源处理</li><li>更好的语义化</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20220205121028628.png" alt="yarm 优点"></p><h2 id="npm-迁移值-yarn"><a href="#npm-迁移值-yarn" class="headerlink" title="npm 迁移值 yarn"></a>npm 迁移值 yarn</h2><ul><li>可以从npm迁移到yarn，也可以从yarn迁移到npm。</li><li>有了yarn的压力之后，npm做了一些类似的改进，在npm5.0之前，yarn的优势特别明显。但是在npm之后，通过以上一系列对比，我们可以看到 npm5 在速度和使用上确实有了很大提升，值得尝试。</li><li>如果你已经在个人项目上使用 yarn，并且没有遇到更多问题，目前完全可以继续使用。但如果有兼容 npm 的场景，以及还没有切到 yarn 的项目，那现在就可以试一试 npm5 了。</li></ul><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><h2 id="解决-ES6-兼容问题"><a href="#解决-ES6-兼容问题" class="headerlink" title="解决 ES6 兼容问题"></a>解决 ES6 兼容问题</h2><p><img src="http://blog.adalucky.com/notes/ada/image-20220204173320651.png" alt="ES6转换"></p><ul><li><p>ES6 的语法对于有些老的浏览器不兼容 比如定义变量 const let 这些标识符 无法识别，需要转换成 ES5 的语法，一般有<code>在线解决</code>和<code>提前编译</code>两种方案</p></li><li><p>比较通用的工具方案有babel，jsx，traceur，es6-shim等</p></li><li><p>兼容表：<a href="http://kangax.github.io/compat-table/es6/">http://kangax.github.io/compat-table/es6/</a></p></li><li><p>IE10+、Chrome、FireFox、移动端、NodeJS现在都支持</p></li></ul><h3 id="方式一：在线解决（客户端）"><a href="#方式一：在线解决（客户端）" class="headerlink" title="方式一：在线解决（客户端）"></a>方式一：在线解决（客户端）</h3><p><span class="github-emoji"><span>❌</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>在线转换（通过工具包的方式，这种编译会加大页面渲染的时间,不推荐）</p><ul><li>在script 中引入 babel-core 的 js 文件</li><li>body 中注意声明 <code>type="text/babel"</code></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>测试页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://lib.baomitu.com/babel-core/5.8.38/browser.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/babel<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"this is ada"</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式二：提前编译（服务端）"><a href="#方式二：提前编译（服务端）" class="headerlink" title="方式二：提前编译（服务端）"></a>方式二：提前编译（服务端）</h3><p><span class="github-emoji"><span>⭕</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b55.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>提前编译（强烈建议这种方式，不影响浏览器渲染时间）</p><ul><li>安装依赖</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开发环境依赖安装 babel-cli</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> -save-dev babel-cli<span class="token comment">#环境验证 6.26.0 (babel-core 6.26.3)</span>babel -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>项目根路径新建.babelrc 文件</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">,</span> <span class="token string">"stage-2"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">//设置转码规则</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"transform-runtime"</span><span class="token punctuation">]</span>  <span class="token comment">//设置插件</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li> 安装 es2015 对应的库</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#   "presets": ["es2015", "stage-2"] 上面转码规则设置的 es2015 因此需要安装对应的依赖</span><span class="token function">npm</span> <span class="token function">install</span> babel-core babel-preset-es2015 babel-plugin-transform-runtime babel-preset-stage-2 -save-dev <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>绑定命令</li></ul><pre class="line-numbers language-js" data-language="js"><code class="language-js"># <span class="token keyword">package</span><span class="token punctuation">.</span>json 文件中scripts标签新增一条指令 通过运行 npm run babel 即可把 src 目录下的文件 编译到 babelSrc 下<span class="token string">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token string">"babel"</span><span class="token operator">:</span> <span class="token string">"babel src -w -d babelSrc"</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>编译整个 src 目录并将其输出到 babelSrc 目录。这里的src指的是需要转换的目录，babelSrc指的是输出的内容的存放目录，-w其实是-watch的意思，就是监听文件，实时编译输出<br><code>新建src目录和babelSrc目录，记得一定要建，不然会报错</code>，然后我们启动我们的babel工程。<br>命令行输入npm run babel</p><p><img src="http://blog.adalucky.com/notes/ada/image-20220204220720348.png" alt="babel 解决兼容"></p><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;npm全称&lt;strong&gt;node package manager&lt;/strong&gt;，是node包管理和分发工具。可以理解为前端的maven。通过npm可以很方便的下载js库，管理前端工程。node已经集成npm工具，在cmd中输入&lt;code&gt;npm -v&lt;/code&gt;查看当前npm版本。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="前端基础" scheme="https://www.adalucky.com/tags/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    <category term="npm" scheme="https://www.adalucky.com/tags/npm/"/>
    
    <category term="yarn" scheme="https://www.adalucky.com/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>springboot 2.X</title>
    <link href="https://www.adalucky.com/auto/springboot/"/>
    <id>https://www.adalucky.com/auto/springboot/</id>
    <published>2022-01-27T04:26:00.000Z</published>
    <updated>2022-06-13T14:43:37.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>SpringBoot它基于Spring4.0设计，是由 Pivotal 公司提供的框架。  </p><p><strong>SpringBoot 基于 Spring 开发</strong>。不仅继承了Spring框架原有的优秀特性，它并不是用来替代 Spring 的解决方案，而和 Spring 框架紧密</p><p>结合进一步简化了Spring应用的整个搭建和开发过程。<strong>其设计目的是用来简化 Spring 应用的初始搭建以及开发过程</strong>怎么简化的呢？就是</p><p>通过提供默认配置等方式让我们更容易使用。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://www.bilibili.com/video/BV1nU4y1g7M3?spm_id_from=333.999.0.0" target="_blank" class="LinkCard" style="text-decoration: none;">SpringBoot 2.X</a></p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=676477776&amp;bvid=BV1nU4y1g7M3&amp;cid=435566224&amp;page=5" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute;width: 100%;height: 100%;left: 0;top: 0;"> </iframe></div><h1 id="简介及搭建"><a href="#简介及搭建" class="headerlink" title="简介及搭建"></a>简介及搭建</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>SpringBoot它基于Spring4.0设计，是由 Pivotal 公司提供的框架。</p><p>2014 年 4 月发布 Spring Boot 1.0 基于Spring4.0</p><p>2018 年 3 月 Spring Boot 2.0发布 基于Spring 5.0。</p><p><strong>SpringBoot基于Spring开发</strong>。不仅继承了Spring框架原有的优秀特性，它并不是用来替代 Spring 的解决方案，而和 Spring 框架紧密</p><p>结合进一步简化了Spring应用的整个搭建和开发过程。<strong>其设计目的是用来简化 Spring应用的初始搭建以及开发过程</strong>怎么简化的呢？就是</p><p>通过提供默认配置等方式让我们更容易使用。</p><p>关于 SpringBoot 有一句很出名的话就是<strong>约定大于配置</strong>。采用 Spring Boot 可以大大的简化开发模式，它集成了大量常用的第三方库配</p><p>置，所有你想集成的常用框架，它都有对应的组件支持，例如 Redis、MongoDB、Dubbo、kafka，ES等等。SpringBoot 应用中这些第</p><p>三方库几乎可以零配置地开箱即用，大部分的 SpringBoot 应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。另外</p><p>SpringBoot通过集成大量的框架使得依赖包的版本冲突，以及引用的不稳定性等问题得到了很好的解决。</p><p><code>简化Spring应用开发的一个框架；</code><br><code>对整个企业级开发技术栈的一个大整合build anything；</code><br><code>J2EE开发的一站式解决方案；</code></p><h1 id="配置文件和自动配置原理"><a href="#配置文件和自动配置原理" class="headerlink" title="配置文件和自动配置原理"></a>配置文件和自动配置原理</h1><h1 id="热部署与日志"><a href="#热部署与日志" class="headerlink" title="热部署与日志"></a>热部署与日志</h1><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><h1 id="EasyCode"><a href="#EasyCode" class="headerlink" title="EasyCode"></a>EasyCode</h1><p><img src="http://blog.adalucky.com/notes/ada/image-20220205112930187.png" alt="EasyCode"></p><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(entity.java.vm)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java">##导入宏定义$<span class="token operator">!</span><span class="token punctuation">{</span>define<span class="token punctuation">.</span>vm<span class="token punctuation">}</span>##保存文件（宏定义）#<span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"/entity"</span><span class="token punctuation">,</span> <span class="token string">".java"</span><span class="token punctuation">)</span>##包路径（宏定义）#<span class="token function">setPackageSuffix</span><span class="token punctuation">(</span><span class="token string">"entity"</span><span class="token punctuation">)</span>##自动导入包（全局变量）$<span class="token operator">!</span><span class="token punctuation">{</span>autoImport<span class="token punctuation">.</span>vm<span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">IdType</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableId</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableName</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModelProperty</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName ${tableInfo.name} * @Description $!{tableInfo.comment}实体类   * @Computer Macbook pro * @Date $!time.currTime() * @JDKVersion JDK1.8 */</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"$!{tableInfo.obj.name}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"$!{tableInfo.name}对象"</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"$!{tableInfo.comment}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">serial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>#<span class="token function">foreach</span><span class="token punctuation">(</span>$column in $tableInfo<span class="token punctuation">.</span>fullColumn<span class="token punctuation">)</span>    #<span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>column<span class="token punctuation">.</span>comment<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//  ${column.comment}</span>    #end    #<span class="token keyword">if</span><span class="token punctuation">(</span>$<span class="token punctuation">{</span>column<span class="token punctuation">.</span>comment<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"${column.comment}"</span><span class="token punctuation">)</span>#end    #<span class="token keyword">if</span><span class="token punctuation">(</span>$column<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">IdType</span><span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span>#end    <span class="token keyword">private</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tool<span class="token punctuation">.</span><span class="token function">getClsNameByFullName</span><span class="token punctuation">(</span>$column<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">}</span> $<span class="token operator">!</span><span class="token punctuation">{</span>column<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">;</span>    #end<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><hr><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(mapper.java.vm)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java">##导入宏定义$<span class="token operator">!</span><span class="token punctuation">{</span>define<span class="token punctuation">.</span>vm<span class="token punctuation">}</span>##设置表后缀（宏定义）#<span class="token function">setTableSuffix</span><span class="token punctuation">(</span><span class="token string">"Mapper"</span><span class="token punctuation">)</span>##保存文件（宏定义）#<span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"/mapper"</span><span class="token punctuation">,</span> <span class="token string">"Mapper.java"</span><span class="token punctuation">)</span>##包路径（宏定义）#<span class="token function">setPackageSuffix</span><span class="token punctuation">(</span><span class="token string">"mapper"</span><span class="token punctuation">)</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">}</span><span class="token punctuation">.</span>entity<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName ${tableInfo.name} * @Description $!{tableInfo.comment}表数据库访问层  * @Computer Macbook pro * @Date $!time.currTime() * @JDKVersion JDK1.8 */</span> <span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">interface</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableName<span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><hr><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(mapper.xml.vm)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java">##引入mybatis支持$<span class="token operator">!</span><span class="token punctuation">{</span>mybatisSupport<span class="token punctuation">.</span>vm<span class="token punctuation">}</span>##设置保存名称与保存位置$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setFileName</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Mapper.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>$<span class="token operator">!</span>callback<span class="token punctuation">.</span><span class="token function">setSavePath</span><span class="token punctuation">(</span>$tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$modulePath<span class="token punctuation">,</span> <span class="token string">"/src/main/resources/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##拿到主键#<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>$tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    #<span class="token function">set</span><span class="token punctuation">(</span>$pk <span class="token operator">=</span> $tableInfo<span class="token punctuation">.</span>pkColumn<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#end<span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper"</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>resultMap type<span class="token operator">=</span><span class="token string">"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}"</span> id<span class="token operator">=</span><span class="token string">"$!{tableInfo.name}Map"</span><span class="token operator">&gt;</span>#<span class="token function">foreach</span><span class="token punctuation">(</span>$column in $tableInfo<span class="token punctuation">.</span>fullColumn<span class="token punctuation">)</span>        <span class="token operator">&lt;</span>result property<span class="token operator">=</span><span class="token string">"$!column.name"</span> column<span class="token operator">=</span><span class="token string">"$!column.obj.name"</span> jdbcType<span class="token operator">=</span><span class="token string">"$!column.ext.jdbcType"</span><span class="token operator">/</span><span class="token operator">&gt;</span>#end    <span class="token operator">&lt;</span><span class="token operator">/</span>resultMap<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 批量插入 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"insertBatch"</span> keyProperty<span class="token operator">=</span><span class="token string">"$!pk.name"</span> useGeneratedKeys<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span>        insert into $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">(</span>#<span class="token function">foreach</span><span class="token punctuation">(</span>$column in $tableInfo<span class="token punctuation">.</span>otherColumn<span class="token punctuation">)</span>$<span class="token operator">!</span>column<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name#<span class="token keyword">if</span><span class="token punctuation">(</span>$velocityHasNext<span class="token punctuation">)</span><span class="token punctuation">,</span> #end#end<span class="token punctuation">)</span>        values        <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"entities"</span> item<span class="token operator">=</span><span class="token string">"entity"</span> separator<span class="token operator">=</span><span class="token string">","</span><span class="token operator">&gt;</span>        <span class="token punctuation">(</span>#<span class="token function">foreach</span><span class="token punctuation">(</span>$column in $tableInfo<span class="token punctuation">.</span>otherColumn<span class="token punctuation">)</span>#<span class="token punctuation">{</span>entity<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">{</span>column<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>#<span class="token keyword">if</span><span class="token punctuation">(</span>$velocityHasNext<span class="token punctuation">)</span><span class="token punctuation">,</span> #end#end<span class="token punctuation">)</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 批量插入或按主键更新 <span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"insertOrUpdateBatch"</span> keyProperty<span class="token operator">=</span><span class="token string">"$!pk.name"</span> useGeneratedKeys<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">&gt;</span>        insert into $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">(</span>#<span class="token function">foreach</span><span class="token punctuation">(</span>$column in $tableInfo<span class="token punctuation">.</span>otherColumn<span class="token punctuation">)</span>$<span class="token operator">!</span>column<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name#<span class="token keyword">if</span><span class="token punctuation">(</span>$velocityHasNext<span class="token punctuation">)</span><span class="token punctuation">,</span> #end#end<span class="token punctuation">)</span>        values        <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"entities"</span> item<span class="token operator">=</span><span class="token string">"entity"</span> separator<span class="token operator">=</span><span class="token string">","</span><span class="token operator">&gt;</span>            <span class="token punctuation">(</span>#<span class="token function">foreach</span><span class="token punctuation">(</span>$column in $tableInfo<span class="token punctuation">.</span>otherColumn<span class="token punctuation">)</span>#<span class="token punctuation">{</span>entity<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">{</span>column<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>#<span class="token keyword">if</span><span class="token punctuation">(</span>$velocityHasNext<span class="token punctuation">)</span><span class="token punctuation">,</span> #end#end<span class="token punctuation">)</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>foreach<span class="token operator">&gt;</span>        on duplicate key update         #<span class="token function">foreach</span><span class="token punctuation">(</span>$column in $tableInfo<span class="token punctuation">.</span>otherColumn<span class="token punctuation">)</span>$<span class="token operator">!</span>column<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token function">values</span><span class="token punctuation">(</span>$<span class="token operator">!</span>column<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span> #<span class="token keyword">if</span><span class="token punctuation">(</span>$velocityHasNext<span class="token punctuation">)</span><span class="token punctuation">,</span> #end#end    <span class="token operator">&lt;</span><span class="token operator">/</span>insert<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>mapper<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><hr><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(service.java.vm)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java">##导入宏定义$<span class="token operator">!</span><span class="token punctuation">{</span>define<span class="token punctuation">.</span>vm<span class="token punctuation">}</span>##设置表后缀（宏定义）#<span class="token function">setTableSuffix</span><span class="token punctuation">(</span><span class="token string">"Service"</span><span class="token punctuation">)</span>##保存文件（宏定义）#<span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"/service"</span><span class="token punctuation">,</span> <span class="token string">"Service.java"</span><span class="token punctuation">)</span>##包路径（宏定义）#<span class="token function">setPackageSuffix</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">)</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IService</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">}</span><span class="token punctuation">.</span>entity<span class="token punctuation">.</span>$<span class="token operator">!</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName ${tableInfo.name} * @Description $!{tableInfo.comment}服务接口   * @Computer Macbook pro * @Date $!time.currTime() * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableName<span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token operator">&lt;</span>$<span class="token operator">!</span>tableInfo<span class="token punctuation">.</span>name<span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><hr><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(serviceImpl.java.xml)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java">##导入宏定义$<span class="token operator">!</span><span class="token punctuation">{</span>define<span class="token punctuation">.</span>vm<span class="token punctuation">}</span>##设置表后缀（宏定义）#<span class="token function">setTableSuffix</span><span class="token punctuation">(</span><span class="token string">"ServiceImpl"</span><span class="token punctuation">)</span>##保存文件（宏定义）#<span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"/service/impl"</span><span class="token punctuation">,</span> <span class="token string">"ServiceImpl.java"</span><span class="token punctuation">)</span>##包路径（宏定义）#<span class="token function">setPackageSuffix</span><span class="token punctuation">(</span><span class="token string">"service.impl"</span><span class="token punctuation">)</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ServiceImpl</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">}</span><span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">}</span><span class="token punctuation">.</span>entity<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">}</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName ${tableInfo.name} * @Description $!{tableInfo.comment}服务实现类   * @Computer Macbook pro * @Date $!time.currTime() * @JDKVersion JDK1.8 */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"$!tool.firstLowerCase($tableInfo.name)ServiceImpl"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableName<span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token operator">&lt;</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token class-name">Mapper</span><span class="token punctuation">,</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&gt;</span> <span class="token keyword">implements</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token class-name">Service</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><hr><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(controller.java.vm)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java">##导入宏定义$<span class="token operator">!</span><span class="token punctuation">{</span>define<span class="token punctuation">.</span>vm<span class="token punctuation">}</span>##设置表后缀（宏定义）#<span class="token function">setTableSuffix</span><span class="token punctuation">(</span><span class="token string">"Controller"</span><span class="token punctuation">)</span>##保存文件（宏定义）#<span class="token function">save</span><span class="token punctuation">(</span><span class="token string">"/controller"</span><span class="token punctuation">,</span> <span class="token string">"Controller.java"</span><span class="token punctuation">)</span>##包路径（宏定义）#<span class="token function">setPackageSuffix</span><span class="token punctuation">(</span><span class="token string">"controller"</span><span class="token punctuation">)</span>##定义服务名#<span class="token function">set</span><span class="token punctuation">(</span>$serviceName <span class="token operator">=</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>$<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Service"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>##定义实体对象名#<span class="token function">set</span><span class="token punctuation">(</span>$entityName <span class="token operator">=</span> $<span class="token operator">!</span>tool<span class="token punctuation">.</span><span class="token function">firstLowerCase</span><span class="token punctuation">(</span>$<span class="token operator">!</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">import</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>savePackageName<span class="token punctuation">}</span><span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>$<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token class-name">ServiceImpl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Api</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName ${tableInfo.name} * @Description $!{tableInfo.comment}实体类   * @Computer Macbook pro * @Date $!time.currTime() * @JDKVersion JDK1.8 */</span> <span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/$!tool.firstLowerCase($!tableInfo.name)"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"$!{tableInfo.comment}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableName<span class="token punctuation">}</span> <span class="token punctuation">{</span>    <span class="token comment">//服务对象</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> $<span class="token operator">!</span><span class="token punctuation">{</span>tableInfo<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token class-name">ServiceImpl</span> service<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h1><ul><li></li><li>调用顺序：<strong>遵循Controller–Service接口–ServiceImpt实现类–Mapper接口模式;</strong></li><li>那么在Service接口有多个ServiceImpt实现类的情况，就需要指定参数名来选择哪个ServiceImpt实现类了。 </li><li>只有一个实现类，Controller层用<code>@Autowired</code> 注入 Service接口，如果有多个实现类在实现类中用@Service定义实现类名， Controller层用 @Resource(name=”PCIimpt2”) 指定</li><li>都用  注入都注入 Service接口，有多个就用@Resource指定名称 只有一个就不指定  多态</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Service</span>层（此时有两个接口实现类）    <span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"PCIImpt1"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">PCIImpt1</span> imeplements PCI<span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"PCIimpt2"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">PCIImpt2</span> imeplements PCI<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token class-name">Controller</span>层    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"PCIimpt2"</span><span class="token punctuation">)</span>  <span class="token comment">//填PCIimpt1，注入PCIimpt1实现类，填PCIimpt2，则注入PCIimpt2实现类</span>    <span class="token keyword">private</span> <span class="token class-name">PCI</span> pci<span class="token punctuation">;</span>    <span class="token comment">//注入接口以Resource手动指定接收</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;SpringBoot它基于Spring4.0设计，是由 Pivotal 公司提供的框架。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SpringBoot 基于 Spring 开发&lt;/strong&gt;。不仅继承了Spring框架原有的优秀特性，它并不是用来替代 Spring 的解决方案，而和 Spring 框架紧密&lt;/p&gt;
&lt;p&gt;结合进一步简化了Spring应用的整个搭建和开发过程。&lt;strong&gt;其设计目的是用来简化 Spring 应用的初始搭建以及开发过程&lt;/strong&gt;怎么简化的呢？就是&lt;/p&gt;
&lt;p&gt;通过提供默认配置等方式让我们更容易使用。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="springboot" scheme="https://www.adalucky.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础语法 Pro</title>
    <link href="https://www.adalucky.com/auto/java-chu-ji-pro/"/>
    <id>https://www.adalucky.com/auto/java-chu-ji-pro/</id>
    <published>2021-12-15T16:13:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点  </p><p>Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 </p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/bobocqu/article/details/88366740" target="_blank" class="LinkCard" style="text-decoration: none;">IDEA Mac快捷键</a></p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>函数的概念<ul><li>函数就是定义在类中的具有<code>特定功能</code>的一段独立小程序</li><li>函数也成为方法</li><li>通俗的说：函数（方法）是一段可重复调用的代码段</li></ul></li><li>函数分类<ul><li>普通方法：静态（static）、类方法和实例（对象）方法</li><li>构造函数</li></ul></li><li>其它说明：<ul><li>传参<ul><li>有参数，则必须传入参数</li><li>传参类型要一致</li><li>传参个数也要一致，没有则不需要传参</li></ul></li><li>返回值<ul><li>用关键字<code>return</code>来返回</li><li>返回值 void 的方法默认是有一个 return 返回至调用处，一般不写</li><li>如果有返回值，return的值要与定义的返回值类型一致</li></ul></li><li>可变参数<ul><li>可变参数是 jdk1.5 的新特性</li><li>public static 返回值类型 方法名称(数据类型… 参数名称)   <code>会把传入的数据类型组成一个数组</code></li></ul></li></ul></li></ul><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>function</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName FunctionTester * @Description 类方法 * @Computer Macbook pro * @Date 2021/12/15 23:41 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">getDayInfo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用返回值:"</span><span class="token operator">+</span><span class="token function">getDayInfo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * private      修饰符     * static       静态方法、类方法，如果没有就是对象方法就需要 new 对象去调用     * String       声明没有返回值（如果有返回值就用 void，定义返回值类型 return 返回）     * getDayInfo   方法名，遵循小驼峰、动宾短语、动词命名规范     * (int day)    形参(形参类型 形参名，形参类型2 形参名2)，如果不需要参数可不定义形参，括号必须要有     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getDayInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是工作日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是周末"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"非法的数值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"调用成功"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211216002120832.png" alt="类方法示例"></p><h2 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>function</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName FunctionTester2 * @Description 对象方法 * @Computer Macbook pro * @Date 2021/12/15 23:57 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionTester2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        new 对象</span>        <span class="token class-name">FunctionTester2</span> tester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FunctionTester2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> aInt <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> aDouble <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//        对象调用对象方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tester<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>aInt<span class="token punctuation">,</span>aDouble<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tester<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12.75</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">//      定义带有两个参数类型的对象方法</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> aInt<span class="token punctuation">,</span><span class="token keyword">double</span> aDouble<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> aInt <span class="token operator">+</span> aDouble<span class="token punctuation">;</span>  <span class="token comment">// 返回没有定义的匿名变量值为 aInt + aDouble</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211216002222821.png" alt="对象方法示例"></p><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>function</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName FunctionTester3 * @Description 形参和可变参数 * @Computer Macbook pro * @Date 2021/12/16 21:40 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FunctionTester3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">FunctionTester3</span> functionTester3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FunctionTester3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>functionTester3<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>functionTester3<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        functionTester3<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"ll"</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * for 循环     *     * @param ints     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ints<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+=</span> ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * foreach     *     * @param ints     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> aInt <span class="token operator">:</span> ints        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum1 <span class="token operator">+=</span> aInt<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 可变参数     * @param aStr     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> aStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> aString <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> aStr1 <span class="token operator">:</span> aStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>aStr1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211216222449736.png" alt="形参和可变参数示例"></p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul><li>Java 是面向对象的语言，在 Java 中，<code>一切皆为对象</code></li><li>每一个人都是一个对象<ul><li>属性：姓名、性别、年龄、身高、星座</li><li>行为：吃饭、睡觉、学习、打豆豆</li></ul></li></ul><h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul><li>类：共性事务的抽象，是对某一具有共性事物的描述，是概念上的定义</li><li>对象：对象是共性事务的一个个体现，是这个类事务的一个个体或者说是类的一个<code>实例(instance)</code><ul><li>一个对象是数据和相关方法的集合，数据是对象的状态，方法是对象的行为</li><li>面向对象概念构成了 Java 的核心</li><li>面向对象具有<code>封装</code> <code>继承</code> <code>多态</code> 三大特性</li></ul></li><li>解释：人、手机、水果、苹果是一个类，具体的某个人比如你 比如我是一个具体对象  你的手机 我的手机是一个具体的对象 水果是一个更大的类包含了苹果类可以当成它的父类</li><li>总结：① 类是抽象的、很泛的一个概念，对象是某一具体的的事物 ② 类是对象的模板，对象是类的实例</li><li>场景：小明 坐着 D553高铁 去拉萨<ul><li>类：人类、火车类、地理位置类</li><li>对象：小明、D553高铁、拉萨</li><li>方法、行为：坐着、去</li></ul></li></ul><h2 id="类的创建和实例化"><a href="#类的创建和实例化" class="headerlink" title="类的创建和实例化"></a>类的创建和实例化</h2><h3 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h3><ul><li>类的组成：属性+方法</li><li>语法声明</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符  <span class="token keyword">class</span> 类名称<span class="token punctuation">{</span>  <span class="token comment">// 定义属性</span>  修饰符数据类型属性<span class="token punctuation">;</span><span class="token comment">//声明成员变量（属性）</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">//定义函数 可变参数可用 参数类型... 表示</span>  <span class="token keyword">public</span> 返回值数据类型方法名称<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">,</span>参数类型 参数名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//TODO 程序语句</span>    <span class="token keyword">return</span> 表达式<span class="token punctuation">;</span><span class="token comment">//返回值 void 可不写</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(创建类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>target</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MemberTester * @Description 会员类 * @Computer Macbook pro * @Date 2021/12/16 23:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span>    <span class="token comment">// 一个 P2P 的项目有借款人、有投资人、每个人共有的属性和行为</span><span class="token comment">//  一、数据：共性的数据--&gt;属性（成员变量） 每个会员都有的属性 手机号、密码、用户名、余额</span>    <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>    <span class="token class-name">String</span> regName<span class="token punctuation">;</span>    <span class="token class-name">String</span> amount<span class="token punctuation">;</span>    <span class="token comment">//    二、行为：对象的方法、实例方法(不加 static ) 注册、登录、重置、提现</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">,</span> <span class="token class-name">String</span> regName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">==</span> phone<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">6</span> <span class="token operator">==</span> pwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">8</span> <span class="token operator">&gt;=</span> regName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"注册成功"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"用户信息错误"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">==</span> phone<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">6</span> <span class="token operator">==</span> pwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Login success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Login failed"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h3 id="对象实例化"><a href="#对象实例化" class="headerlink" title="对象实例化"></a>对象实例化</h3><ul><li><p>语法声明</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 语法一</span>类名称对象名称 <span class="token operator">=</span> <span class="token keyword">new</span> 类名称<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 语法二</span>类名称 对象名称 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//声明对象</span>对象名称 <span class="token operator">=</span> <span class="token keyword">new</span> 类名称<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化对象</span><span class="token comment">//有了对象后就可以去设置属性或者调用方法了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>访问属性：对象名称.属性名;</p></li><li><p>为属性赋值：对象名称.属性名 = 值;</p></li><li><p>访问方法：对象名称.方法名();</p></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(实例化)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>target</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MemberExampleTester * @Description MemberTester的实例 * @Computer Macbook pro * @Date 2021/12/16 23:24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberExampleTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        用户 ada 的手机号是 13555555555 密码是 123456 昵称是 阿达 现在他想要要注册</span><span class="token comment">//        类名 对象名 = new 类名();</span>        <span class="token class-name">MemberTester</span> ada <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        设置对象属性</span>        ada<span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">"13555555555"</span><span class="token punctuation">;</span>        ada<span class="token punctuation">.</span>pwd <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        ada<span class="token punctuation">.</span>regName <span class="token operator">=</span> <span class="token string">"阿达"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ada<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>ada<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> ada<span class="token punctuation">.</span>pwd<span class="token punctuation">,</span> ada<span class="token punctuation">.</span>regName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211216233741335.png" alt="类的创建和实例化"></p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><code>构造函数</code>是用<code>构造对象</code>的函数</li><li>示例：User user = new User();</li><li>构造方法必须与类名一致</li><li>使用 new 关键字进行调用</li><li>在每个类中都存在一个默认的无参构造方法，默认不显示</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>构造函数分为两类：带参和无参的构造函数</p><ul><li>无参构造函数（默认构造函数）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//语法示例</span><span class="token keyword">public</span> 类名称<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>带参数构造函数</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> 类名称<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">,</span>参数类型 参数名<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>其它说明：</p><ul><li>构造函数无返回值，返回的是一个具体的对象</li><li>参数类型为 8 大基本数据类型、引用类型</li><li>可以重写默认的构造函数（但是这种应该用处不大，一般都是自己重新定义一个带参数的构造函数）</li><li>写带参数的构造函数的目的是为了方便创建对象 初始化对象</li><li>如果显示的写了构造函数后，<code>还想调用无参的构造函数</code>，<code>就必须显示声明</code>一个<code>无参构造函数</code></li></ul></li></ul><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>调用构造函数语法<ul><li>类名 对象名 = new 类名();  无参构造函数（默认带有一个，如果写了有参的必须显示声明后才能使用，否则找不到）</li><li>类名 对象名 = new 类名(value1,value2);  有参的构造函数</li></ul></li><li>其它注意事项<ul><li>调用带参构造函数创建对象，可以按照我们的意愿来初始化对象的属性（方便我们初始化对象）</li><li>调用无参构造函数：对象属性值对应类型默认值</li><li><code>默认构造函数是自带的</code>(如果没有声明，则编码器会自动补齐)</li><li>如果定义了<code>带参构造函数</code>，会<code>覆盖</code>无参构造函数，此时如果需要调用无参构造函数，则必须<code>显示</code>定义无参构造函数</li></ul></li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><ul><li><code>this</code> 表示当前对象，也就调用的对象</li><li>如果构造函数中不用 this.phone = phone; 而是采用 phone = phone; <code>由于就近原</code>则两个 phone 都是使用的形参的这样就不起作用，除非把形参的变量名和属性名设置成不同的，不过一般不这样用，每次都要去起两个变量名，阅读性也不高</li><li><code>构造函数中的参数可以添加非属性的其它参数</code></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(生成构造函数)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>target</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MemberTester * @Description 会员类 * @Computer Macbook pro * @Date 2021/12/16 23:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span>    <span class="token comment">// 一个 P2P 的项目有借款人、有投资人、每个人共有的属性和行为</span><span class="token comment">//  一、数据：共性的数据--&gt;属性（成员变量） 每个会员都有的属性 手机号、密码、用户名、余额</span>    <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>    <span class="token class-name">String</span> regName<span class="token punctuation">;</span>    <span class="token class-name">String</span> amount<span class="token punctuation">;</span>    <span class="token comment">//</span>    <span class="token keyword">public</span> <span class="token class-name">MemberTester</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">,</span> <span class="token class-name">String</span> regName<span class="token punctuation">,</span> <span class="token class-name">String</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        super(); //Object类先创建出来 构造时会先调用父类的构造函数,这里的 super 可以不写</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pwd <span class="token operator">=</span> pwd<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>regName <span class="token operator">=</span> regName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">=</span> amount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 应为显示声明了带参数的构造函数还想使用无参的就必须要显示声明</span>    <span class="token keyword">public</span> <span class="token class-name">MemberTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">//    二、行为：对象的方法、实例方法(不加 static ) 注册、登录、重置、提现</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">,</span> <span class="token class-name">String</span> regName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">==</span> phone<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">6</span> <span class="token operator">==</span> pwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">8</span> <span class="token operator">&gt;=</span> regName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"注册成功"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"用户信息错误"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span> <span class="token class-name">String</span> pwd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">==</span> phone<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">6</span> <span class="token operator">==</span> pwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Login success"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Login failed"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(调用带参构造函数)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>target</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MemberExampleTester * @Description MemberTester的实例 * @Computer Macbook pro * @Date 2021/12/16 23:24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberExampleTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        用户 ada 的手机号是 13555555555 密码是 123456 昵称是 阿达 现在他想要要注册</span><span class="token comment">//        类名 对象名 = new 类名();</span>        <span class="token class-name">MemberTester</span> ada <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        设置对象属性</span>        ada<span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">"13555555555"</span><span class="token punctuation">;</span>        ada<span class="token punctuation">.</span>pwd <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span>        ada<span class="token punctuation">.</span>regName <span class="token operator">=</span> <span class="token string">"阿达"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ada<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>ada<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> ada<span class="token punctuation">.</span>pwd<span class="token punctuation">,</span> ada<span class="token punctuation">.</span>regName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        构造函数初始化及调用对象方法</span>        <span class="token class-name">MemberTester</span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberTester</span><span class="token punctuation">(</span><span class="token string">"13888888888"</span><span class="token punctuation">,</span> <span class="token string">"666666"</span><span class="token punctuation">,</span> <span class="token string">"link"</span><span class="token punctuation">,</span> <span class="token string">"8000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>phone<span class="token punctuation">,</span> link<span class="token punctuation">.</span>pwd<span class="token punctuation">,</span> link<span class="token punctuation">.</span>regName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211217232353848.png" alt="调用带参数的构造函数示例"></p><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><h4 id="分配过程"><a href="#分配过程" class="headerlink" title="分配过程"></a>分配过程</h4><ul><li>声明对象：Person per = null;      声明对象时会把 per 对象存在<code>占内存中</code></li><li>实例化对象：per = new Person();   会给 per 对象开辟一段队内存空间（给对象赋的属性值就会在这块堆内存中，此时还没给对象的属性进行赋值，那么这些属性值都是类型对应的缺省值 如 String–&gt;null int–&gt;0 ）</li><li>关联：栈内存中的 per 对象会保存一个地址指向堆内存地址的引用 如 0x1354464548 </li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211218001233087.png" alt="内存分配过程说明"></p><h4 id="存放分类"><a href="#存放分类" class="headerlink" title="存放分类"></a>存放分类</h4><ul><li>栈内存<ul><li>基本类型变量（基本数据类型 四类八种）</li><li>对象引用，应用类型名称（比如上面的 per），即队堆的引用地址</li></ul></li><li>堆内存<ul><li>new 创建的对象和数组</li><li>属性</li></ul></li><li>全局数据区（静态区）<ul><li>static 属性</li></ul></li><li>全局代码区<ul><li>方法</li></ul></li><li>字符串池(常量池)<ul><li>jdk1.7 前在方法区，1.7 后再堆中间</li><li>共享的 String 对象</li></ul></li></ul><h4 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(内存分配)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>target</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MemoryTester * @Description 内存分配(堆栈) * @Computer Macbook pro * @Date 2021/12/18 00:02 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemoryTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>                          <span class="token comment">//在字符串池（常量池）中创建了一个字面值为 hello</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>                          <span class="token comment">//字符串池（常量池）中 已经有一个字面值为 hello 的了，那么直接用 str2 指向这个地址</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// new 给 str3 分配一块栈内存执行一个堆内存地址 0x156164646</span>        <span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// new 给 str4 分配另一块栈内存执行一个堆内存地址 0x6484684</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//结果为 true 应为 str1 和 str2 指向的是同一个常量池中的地址</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//结果为 false 指向的不同地址，只能说字面值相等， == 比较的是内存地址</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//结果为 false 指向的不同地址（如果地址相同肯定值也相同了）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------重新分配地址---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str3 <span class="token operator">=</span> str1<span class="token punctuation">;</span>                                   <span class="token comment">//把 str1 的地址分配给 str3</span>        str4 <span class="token operator">=</span> str2<span class="token punctuation">;</span>                                   <span class="token comment">//把 str2 的地址分配给 str4</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str3 <span class="token operator">==</span> str4<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//因为 str2 也是指向 str1 的地址所以 str3 和 str4 最终都是指向的 str1 的地址，因此为 true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------此时 str3 和 str4 的内存没有人引用了会成为垃圾内存，会被 gc 回收---------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211218015523446.png" alt="内存地址分配示例图"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20211218014654174.png" alt="内存地址分配详解图"></p><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><ul><li>数据类型分类：基本数据类型和引用数据类型</li><li>矛盾：基本数据类型不是类(类都是大写)，因此 Java 为了调和矛盾引入了包装类</li><li>解决矛盾：8 个基本数据类型对应 8 个包装类</li></ul><table><thead><tr><th>类型</th><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>整型</td><td>byte</td><td>Byte</td></tr><tr><td>~</td><td>short</td><td>Short</td></tr><tr><td>~</td><td>int</td><td>Interger</td></tr><tr><td>~</td><td>long</td><td>Long</td></tr><tr><td>浮点型</td><td>float</td><td>Float</td></tr><tr><td>~</td><td>double</td><td>Double</td></tr><tr><td>字符型</td><td>char</td><td>Character</td></tr><tr><td>布尔型</td><td>boolean</td><td>Boolean</td></tr></tbody></table><ul><li>包装类：以类的形式来管理基本数据类型<ul><li>如 Integer 使用类的形式表示整数</li><li>Integer i = new Integer(20);</li></ul></li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块[包装类]</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>packages</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName PackageClassTester * @Description 包装类 * @Computer Macbook pro * @Date 2021/12/18 13:25 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PackageClassTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        整型--&gt;Integer--&gt;描述整型数据类型的类</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        包装类语法</span>        <span class="token class-name">Integer</span> aInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aInteger<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      装箱（基本数据类型变成包装类）</span>        <span class="token class-name">Integer</span> <span class="token class-name">Integer</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//手动装箱</span>        <span class="token class-name">Double</span> aDouble <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">20.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      自动装箱（直接把一个 int 类型的数值用 Integer 包装类接收） 自动装箱 自动拆箱是 jdk1.5 后提供的新特性</span>        <span class="token class-name">Integer</span> <span class="token class-name">Integer2</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//      拆箱（包装类变成基本数据类型）</span>        <span class="token keyword">int</span> aInt <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//手动拆箱，调用 数据类型Value() 方法</span>        <span class="token keyword">double</span> adouble <span class="token operator">=</span> aDouble<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aInt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>adouble<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      自动拆箱 Integer 是上面手动装箱的变量，然后用对应的基本类型接收</span>        <span class="token keyword">int</span> bInt <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211219235056452.png" alt="包装类示例"></p><h4 id="包装类常用方法"><a href="#包装类常用方法" class="headerlink" title="包装类常用方法"></a>包装类常用方法</h4><h5 id="xxxValue"><a href="#xxxValue" class="headerlink" title="xxxValue()"></a>xxxValue()</h5><ul><li>以基本数据类型返回指定的数值—&gt;(拆箱)<ul><li>int j = i.intValue();</li></ul></li></ul><h5 id="获得最大最小值"><a href="#获得最大最小值" class="headerlink" title="获得最大最小值"></a>获得最大最小值</h5><ul><li>获得最大值：Integer.MAX_VALUE</li><li>获得最小值：Integer.MIN_VALUE</li></ul><h5 id="将字符串转换为基本数据类型"><a href="#将字符串转换为基本数据类型" class="headerlink" title="将字符串转换为基本数据类型"></a>将字符串转换为基本数据类型</h5><ul><li>如果字符串不是数字格式会出现格式异常</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"10086"</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token class-name">Double</span>。<span class="token function">parseDouble</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">parseString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><h4 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conversion</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName TypeConversionTester * @Description 类型转换 * @Computer Macbook pro * @Date 2021/12/19 23:37 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TypeConversionTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> doubleValue <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> i<span class="token punctuation">;</span>   <span class="token comment">//低位到高位自动转换，测试经理是测试从业人员</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> doubleValue<span class="token punctuation">;</span>  <span class="token comment">//高位到低位强制转换，测试从业人员不一定是测试经理</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"d的值为："</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">"，j的值为："</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211219234832586.png" alt="转换示例"></p><h4 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(会员类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conversion</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MemberTester * @Description 会员类 * @Computer Macbook pro * @Date 2021/12/19 23:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span>    <span class="token class-name">InvestTester</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvestTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BorrowerTester</span> jack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BorrowerTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MemberTester</span> tom1 <span class="token operator">=</span> tom<span class="token punctuation">;</span>    <span class="token comment">// 投资人自动向上转型为会员类</span>    <span class="token class-name">MemberTester</span> jack1 <span class="token operator">=</span> jack<span class="token punctuation">;</span>    <span class="token comment">//借款人自动向上转型为会员类</span>    <span class="token class-name">MemberTester</span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">MemberTester</span> ada <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">InvestTester</span> link1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvestTester</span><span class="token punctuation">)</span> link<span class="token punctuation">;</span> <span class="token comment">//大类型强制转换为小类型</span>    <span class="token class-name">BorrowerTester</span> ada1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BorrowerTester</span><span class="token punctuation">)</span> ada<span class="token punctuation">;</span> <span class="token comment">//大类型强制转换为小类型</span>    <span class="token class-name">InvestTester</span> tom3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvestTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">BorrowerTester</span> tom4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BorrowerTester</span><span class="token punctuation">)</span> tom3<span class="token punctuation">;</span> <span class="token comment">// 无法将投资人转换为借款人</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(投资人)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conversion</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName InvestTester * @Description 投资人也是会员，继承会员类 * @Computer Macbook pro * @Date 2021/12/19 23:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvestTester</span> <span class="token keyword">extends</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(借款人)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conversion</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName BorrowerTester * @Description 借款人也是会员，继承会员类 * @Computer Macbook pro * @Date 2021/12/19 23:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BorrowerTester</span> <span class="token keyword">extends</span> <span class="token class-name">MemberTester</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211220000922126.png" alt="转换示例二"></p><h1 id="Java-三大特性"><a href="#Java-三大特性" class="headerlink" title="Java 三大特性"></a>Java 三大特性</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>封装是 Java 三大特性之一，把对象的<code>内部细节</code>封闭起来，只提供操作对象属性的公共方法（把属性设置为 private，然后提供公共公开的 set get 方法）</li><li><code>封装是面向对象编程语言对客观世界的模拟</code> 例如，电视机它的内部元件就是被封闭起来了，仅仅暴露电视机按钮供人们使用，这样就没有人能任意更改咱们的元件</li><li>Java 里面通过将<code>属性设置成私有</code>的，对属性都使用暴露出来的公共接口去操作，这样数据才更安全，更好维护</li></ul><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>通过公开方法访问数据，可以从方法里加入逻辑控制，避免不合理的访问，可进行数据检查，保证数据完整性，防止不希望的交互和非法的访问便于后期修改，提高代码的可维护性</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>属性私有化：隐藏对象的属性和实现细节，不允许外部直接访问（设置为 private，这样就不能通过 对象.属性名 调用）</li><li>提供公开的方法操作和访问属性（set get）</li><li>get set 只针对属性，如果不需要进行逻辑处理可引入 <code>lombok</code> 后在类名前添加 <code>@Data</code> 注解隐式声明，针对与需要做逻辑处理的显示声明，编写逻辑处理代码</li><li>boolean 类型的属性生成的 get set 方法中 <code>set 会变为 is</code></li><li>pom.xml引入 lombok 依赖后，在类名前添加 <code>@Data</code> 注解</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(lombok依赖)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    依赖  <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>dependencies<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>projectlombok<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>        <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>lombok<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>dependencies<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(设置公共公开方法)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span>encapsulation</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MemberTester * @Description 封装 * @Computer Macbook pro * @Date 2021/12/20 22:37 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">==</span> phone<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(调用公共公开方法)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span>encapsulation</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName BorrowerTester * @Description 调用公共公开方法 * @Computer Macbook pro * @Date 2021/12/20 22:42 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BorrowerTester</span> <span class="token keyword">extends</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BorrowerTester</span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BorrowerTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"13888888888"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211220233157819.png" alt="封装示例"></p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h3><ul><li>继承是 Java 三大特性的另一大特性，继承是从已有的类中派生出新的类，新的类能吸收已有类的属性和行为，并能扩展新的能力</li><li>一个类 A 继承 B 可以通过 extends 来实现（extends 翻译为扩展，我们通俗的称为继承）</li><li>一个不由任何类派生出来的类称为<code>基类（派生类）</code> ，一个派生类（子类）最近的上层类称为该类的<code>父类</code>，从某一个派生类出来的类称为该类的<code>子类</code></li><li>派生类（子类）与父类之间是一个子与父的关系，子跟父之间的关系是 is a 的关系，父类和子类是 has a 的关系<ul><li>水果类 –&gt;热带水果、亚热带水果 –&gt;芒果、香蕉、火龙果（热带水果）</li><li>芒果 extends 热带水果 –&gt; 子类 extends 父类 –&gt; 子类 is a 父类 –&gt; 芒果 is a 热带水果 = 热带水果 has a 芒果</li></ul></li><li>Java 中子类不能获得父类的构造方法</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">修饰符 <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">{</span>  <span class="token comment">//类定义</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(会员类父类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span>inherit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MemberTester * @Description 会员类（父类） * @Computer Macbook pro * @Date 2021/12/20 23:38 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> regName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> amount<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(借款人子类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span>inherit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName BorrowerTester * @Description 借款人继承会员类（子类） * @Computer Macbook pro * @Date 2021/12/20 23:37 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BorrowerTester</span> <span class="token keyword">extends</span> <span class="token class-name">MemberTester</span><span class="token punctuation">{</span>    <span class="token comment">// 子类继承父类，但是子类有自己的一些属性 比如借款人需要关注你是否有车 是否有房</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> hasCar<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> hasHouse<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(投资人子类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span>inherit</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName InvestTester * @Description 投资人继承会员类（子类） * @Computer Macbook pro * @Date 2021/12/20 23:38 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvestTester</span> <span class="token keyword">extends</span> <span class="token class-name">MemberTester</span><span class="token punctuation">{</span><span class="token comment">//    只有投资人才会去投资，因此要单独给它写一个方法，子类自己扩展的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invest</span><span class="token punctuation">(</span><span class="token keyword">double</span> doubleValue<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用：InvestTester.invest()"</span><span class="token operator">+</span><span class="token string">"投资【"</span><span class="token operator">+</span>doubleValue<span class="token operator">+</span><span class="token string">"】元成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(测试)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span>inherit</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName Tester1 * @Description 测试 * @Computer Macbook pro * @Date 2021/12/21 00:31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tester1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">InvestTester</span> ada <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvestTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ada<span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ada<span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// set get方法来自于父类</span>        ada<span class="token punctuation">.</span><span class="token function">invest</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//调用子类扩展的方法</span>        <span class="token class-name">BorrowerTester</span> dream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BorrowerTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dream<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token string">"13555555555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用父类的 set 方法</span>        dream<span class="token punctuation">.</span><span class="token function">setHasCar</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用子类扩展的方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dream<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dream<span class="token punctuation">.</span><span class="token function">isHasCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211221011156193.png" alt="继承示例"></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><ul><li>不同的对象对应相同的方法表现出不同的特征和响应：如对于自行车和汽车他们都定义了刹车的方法，但是它们的刹车方式却完全不同，又比如动物类都有吃东西的方法，食肉动物吃东西的方法是吃肉食，食草动物吃东西的方法是吃草 蔬菜，乐器都会发出声音，不同乐器演奏出来的表现形式各不相同</li><li>用<code>父类类型来接受子类</code>的对象，Java 通过<code>方法重写</code>来实现多态</li><li>通过方法重写，子类可以实现父类的某些方法，<code>使其具有自己的特征</code> (例如都是人类，别人实现一个小目标是一个亿，我们的一个小目标是换个手机，因此要重写“富人”和“穷人”实现目标的方法，使其具有自己的特征)</li><li>通过方法重写 <code>相同的对象（变量），执行同一个方法表现出不同的行为特征，就称为多态</code></li><li>多态的优点：提高代码的复用性，简化代码</li></ul><h3 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h3><ul><li>在很对时候会使用父类类型接受子类对象，但是父类类型又没有实现该方法，会出现报错，如下图所示</li><li>当然可以直接在父类中实现该方法解决报错，不过很多时候子类有自己的实现方式，比如充值的方法，针对于投资人是充值投资，针对于借款人是充值还款，因此要在子类中实现自己的充值方法</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211221012112269.png" alt="多态报错"></p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(会员类父类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span></span><span class="token class-name">Polymorphism</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MemberTester * @Description 多态 * @Computer Macbook pro * @Date 2021/12/21 01:44 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> regName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> amount<span class="token punctuation">;</span>    <span class="token comment">//投资和借款人如测试人员，VIP 客户，系统内部人员充值享有 1.5 倍翻倍</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token keyword">double</span> doubleValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>doubleValue <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">||</span> doubleValue <span class="token operator">&gt;</span> <span class="token number">500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MemberTester.recharge():"</span> <span class="token operator">+</span> <span class="token string">"充值失败，金额必须大于等于 100 或小于等于 50万"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>amount <span class="token operator">+=</span> doubleValue <span class="token operator">*</span> <span class="token number">1.5</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MemberTester.recharge():"</span> <span class="token operator">+</span> <span class="token string">"尊贵的客户恭喜您获得 1.5 倍翻倍机会，当前累计充值【"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】成功，感谢您的使用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(借款人重写充值方法)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span></span><span class="token class-name">Polymorphism</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName BorrowerTester * @Description 多态 * @Computer Macbook pro * @Date 2021/12/21 01:54 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BorrowerTester</span> <span class="token keyword">extends</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span>    <span class="token comment">//借款人还款</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token keyword">double</span> doubleValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>doubleValue <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">||</span> doubleValue <span class="token operator">&gt;</span> <span class="token number">500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BorrowerTester.recharge():"</span> <span class="token operator">+</span> <span class="token string">"充值失败，金额必须大于等于 100 或小于等于 50万"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> doubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BorrowerTester.recharge():"</span> <span class="token operator">+</span> <span class="token string">"还款【"</span> <span class="token operator">+</span> doubleValue <span class="token operator">+</span> <span class="token string">"】成功，累计还款"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元，您的信誉保持良好可继续申请借贷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(投资人重写充值方法)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span></span><span class="token class-name">Polymorphism</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName InvestTester * @Description 多态 * @Computer Macbook pro * @Date 2021/12/21 01:53 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvestTester</span> <span class="token keyword">extends</span> <span class="token class-name">MemberTester</span> <span class="token punctuation">{</span>    <span class="token comment">//投资人充值投资</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token keyword">double</span> doubleValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>doubleValue <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">||</span> doubleValue <span class="token operator">&gt;</span> <span class="token number">500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InvestTester.recharge():"</span> <span class="token operator">+</span> <span class="token string">"充值失败，金额必须大于等于 100 或小于等于 50万"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> doubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InvestTester.recharge():"</span> <span class="token operator">+</span> <span class="token string">"充值【"</span> <span class="token operator">+</span> doubleValue <span class="token operator">+</span> <span class="token string">"】成功，累计充值"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元，您可以去投资赚钱收益了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(不同对象调用实现多态)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span></span><span class="token class-name">Polymorphism</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName Tester1 * @Description 不同对象调用实现多态 * @Computer Macbook pro * @Date 2021/12/21 01:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tester1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MemberTester</span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//其它会员充值（非投资和借款人如测试人员，VIP 客户，系统内部人员）</span>        link<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//其它会员充值（非投资和借款人如测试人员，VIP 客户，系统内部人员）</span>        <span class="token class-name">MemberTester</span> ada <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvestTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ada<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先投资 100 试下水</span>        ada<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//感觉回款还可以，再多投点试下</span>        <span class="token class-name">MemberTester</span> dream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BorrowerTester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dream<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//手上暂时只有 1000 先还了再说</span>        dream<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//发工资了再还 5000</span>### <span class="token class-name">HashSet</span><span class="token operator">+</span> `无序` `不可重复`<span class="token operator">+</span> 支持的数据类型为引用类型（类、数组）（如果添加基本数据类型会自动装箱）<span class="token punctuation">{</span><span class="token operator">%</span> fold 点击显<span class="token operator">/</span>隐代码块<span class="token punctuation">[</span>示例<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token punctuation">}</span>```java<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>gather<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName HashSetTester * @Description HashSet 无序、不可重复 * @Computer Macbook pro * @Date 2021/12/26 14:05 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于不可重复，这里相同的值就覆盖了，因此 size 不变</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"dream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取集合大小</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//判断是否包含 link</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//判断是否为空</span><span class="token comment">//        set.clear(); 清空</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将集合转换成对应数据类型的数组（这里用的父类类型接收）</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> objs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211226144422472.png" alt="HashSet示例"></p><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(遍历)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>gather<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName HashSetTester1 * @Description 遍历HashSet * @Computer Macbook pro * @Date 2021/12/26 14:27 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetTester1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"USA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Japan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============forEach==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> nation <span class="token operator">:</span> nations<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============迭代器一==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span> nation1 <span class="token operator">=</span> nations<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> nation1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============迭代器二==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> nation2 <span class="token operator">=</span> nations<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nation2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211226145148629.png" alt="HashSet遍历"></p><h3 id="示例二-1"><a href="#示例二-1" class="headerlink" title="示例二"></a>示例二</h3><ul><li>其实示例一种虽然实现了多态，但是并没有发挥出多态的优点：提高代码的复用性，简化代码</li><li>也就是说这里的  recharge() 方法写了三遍实现，但是业务逻辑几乎一致（这里不考虑 1.5 倍翻倍了），因此需要优化代码示例如下</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(会员类父类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span></span><span class="token class-name">Polymorphism</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MemberTester1 * @Description 多态简化代码 * @Author ada * @Computer Mac mini * @Date 2021/12/22 18:12 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemberTester1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> regName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> amount<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token keyword">double</span> doubleValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>doubleValue <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">||</span> doubleValue <span class="token operator">&gt;</span> <span class="token number">500000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"MemberTester.recharge():"</span> <span class="token operator">+</span> <span class="token string">"充值失败，金额必须大于等于 100 或小于等于 50万"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAmount</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> doubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(借款人重写)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span></span><span class="token class-name">Polymorphism</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName InvestTester1 * @Description TODO * @Author ada * @Computer Mac mini * @Date 2021/12/22 18:18 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvestTester1</span> <span class="token keyword">extends</span> <span class="token class-name">MemberTester1</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token keyword">double</span> doubleValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span>doubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"InvestTester1.recharge():"</span> <span class="token operator">+</span> <span class="token string">"充值【"</span> <span class="token operator">+</span> doubleValue <span class="token operator">+</span> <span class="token string">"】成功，累计充值"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元，您可以去投资赚钱收益了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(还款人重写)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span></span><span class="token class-name">Polymorphism</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName BorrowerTester1 * @Description TODO * @Author ada * @Computer Mac mini * @Date 2021/12/22 18:29 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BorrowerTester1</span> <span class="token keyword">extends</span> <span class="token class-name">MemberTester1</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">recharge</span><span class="token punctuation">(</span><span class="token keyword">double</span> doubleValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span>doubleValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"BorrowerTester1.recharge():"</span> <span class="token operator">+</span> <span class="token string">"还款【"</span> <span class="token operator">+</span> doubleValue <span class="token operator">+</span> <span class="token string">"】成功，累计还款"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"元，您的信誉保持良好可继续申请借贷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(不同对象调用实现多态)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>trait<span class="token punctuation">.</span></span><span class="token class-name">Polymorphism</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName Tester2 * @Description TODO * @Author ada * @Computer Mac mini * @Date 2021/12/22 18:31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tester2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MemberTester1</span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemberTester1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//其它会员充值（非投资和借款人如测试人员，VIP 客户，系统内部人员）</span>        link<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//其它会员充值（非投资和借款人如测试人员，VIP 客户，系统内部人员）</span>        <span class="token class-name">MemberTester1</span> ada <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvestTester1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ada<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先投资 100 试下水</span>        ada<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//感觉回款还可以，再多投点试下</span>        <span class="token class-name">MemberTester1</span> dream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BorrowerTester1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dream<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//手上暂时只有 1000 先还了再说</span>        dream<span class="token punctuation">.</span><span class="token function">recharge</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//发工资了再还 5000</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211222184315864.png" alt="多态示例二"></p><h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><h2 id="String-API"><a href="#String-API" class="headerlink" title="String API"></a>String API</h2><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(String常用方法)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>string</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">StandardCharsets</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName StringTester * @Description String 类常用 API * @Computer Macbook pro * @Date 2021/12/22 21:25 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// new 给 str 分配</span><span class="token comment">//        判断是以指定字符串开头或结尾</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"hel"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"o"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        字符创截取</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//下标从 0 开始</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//包前不包后</span><span class="token comment">//        字符串拆分</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"ada,link,test"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//以逗号进行分割</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str3 <span class="token operator">:</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str3 <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        字符串查找 indexOf lastIndexOf</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//第一个 a 所在的位置 0</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//最后一个 a 所在的位置 2</span><span class="token comment">//        判断字符串 str 变量是否包含 llo</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"llo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        比较 str 变量和 hello 字面值是否相等,大小写敏感</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        比较 str 变量和 hello 字面值是否相等,大小写不敏感</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"HELlo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        compareTo、compareToIgnoreCase 比较两个字符串 ASC 码差值 如果相等返回 0，左边比右边小返回负数 左比右大返回正数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">.</span><span class="token function">compareToIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// --&gt;  -2</span><span class="token comment">//        字符串拼接</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"he"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"llo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//  --&gt; hello</span><span class="token comment">//        isEmpty 判断字符串是否为空 length() 为 0 时返回 true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//      --&gt;空字符串 这里返回 true</span><span class="token comment">//        trim 去掉左右空格</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"  ada   "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        获取字符串长度</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        toCharArray 将字符串转换为字符数组 然后获取下标为 0 的</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"adaTester"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      charAt 返回字符串指定位置的值，返回值为 char 类型 参数不能为负数，由于下标从 0 开始最大值为 长度-1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      getBytes 得到一个操作系统默认的编码格式的字节数组 byte[]</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"中国"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        大小写转换</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aDA"</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 转换为大写 --&gt; ADA</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aDA"</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 转换为小写 --&gt; ada</span><span class="token comment">//        替换replace没有用到正则 First All 有用到正则 如果匹配 .的话需要用 \\. 进行转义</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把所有的 a 替换成 c --&gt; cdc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//  把第一个 a 替换成 b --&gt; bda</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//  把所有的 a 替换成 c --&gt; cdc</span><span class="token comment">//        字符串描述 String 的类方法 用类名调用 valueOf</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"hello ada"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><ul><li>对于一些固定不变的属性可通过 <code>public static final</code> 修饰为常量</li><li>加了<code>static</code> 后只能在 <code>static</code> 方法中访问</li><li><code>final</code> 属性不可修改 常量不能生成 set 方法</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(设置常量)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>constant</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName FinalTester * @Description 设置常量 * @Computer Macbook pro * @Date 2021/12/22 22:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalTester</span> <span class="token punctuation">{</span>    <span class="token comment">//    常量用大写命名</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> COUNTRY <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> LOCATION <span class="token operator">=</span> <span class="token string">"Earth"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        本类中可以访问</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">FinalTester</span><span class="token punctuation">.</span>COUNTRY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        COUNTRY = "final不可修改";</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(访问常量)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>constant</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName Tester * @Description 访问常量 * @Computer Macbook pro * @Date 2021/12/22 22:59 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Tester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 其它类无法访问 private 的常量</span><span class="token comment">//        System.out.println(FinalTester.COUNTRY);</span><span class="token comment">//        访问时用类名.常量名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">FinalTester</span><span class="token punctuation">.</span>LOCATION<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211222230926992.png" alt="常量示例"></p><h2 id="集合类"><a href="#集合类" class="headerlink" title="集合类"></a>集合类</h2><h3 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h3><ul><li>Java 的集合类是特别有用的工具类</li><li>可以存储多个对象（保存的数据类型需要是引用数据类型）</li><li>常见的有： ArrayList、HashSet、HashMap</li></ul><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li>ArrayList 可变数组，数组列表，<code>有序</code>  <code>可重复</code></li><li>如果是一维数组是需要声明长度的，也就是固定长度，有时候并不满足要求 </li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(示例)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>gather<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName ArrayListTester * @Description ArrayListTester可变数组，数组列表 * @Computer Macbook pro * @Date 2021/12/23 21:49 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayListTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ada"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"link"</span><span class="token punctuation">;</span>        names<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Shadow"</span><span class="token punctuation">;</span><span class="token comment">//        假设现在已经 40 个同学了，那么再来一个同学，String的数组就放不下了，因为固定开辟的长度是 40，因此可以用 ArrayList</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> arrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指定泛型为 String 类型</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        arrayList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Shadow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// get方法获取下标1的值--&gt; link</span>        arrayList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// foreach Lambda 表达式</span>        arrayList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//remove 移除下标为 1 的数据--&gt;link 就会被删除，Shadow 下标从 2 变为 1</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// get方法获取下标1的值--&gt; Shadow</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 获取集合的大小 --&gt; 2 (上面移除了一个)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断对象是否为空 --&gt; false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 判断对象是否包含了一个数据 link --&gt; false</span>        arrayList<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"dream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//  替换下标 1 的值为dream（修改）</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrayList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 输出--&gt;dream</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * Json2Map.strJson json 格式的文本         * User.class 需要转换的类的字节码对象 类名.class         */</span>        <span class="token class-name">User</span> users <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token class-name">Json2Map</span><span class="token punctuation">.</span>strJson<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用users.toString() 因为加了@Data 注解 重写了 toString 方法不然输出就是父类的</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取对象的属性</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>}</code></pre><p>}</p><pre class="line-numbers language-none"><code class="language-none">{% endfold %}![ArrayList示例](http://blog.adalucky.com/notes/ada/image-20211223223052882.png)/** * @author ada * @ClassName Json2Object * @Description Json 转 对象 * @Computer Macbook pro * @Date 2021/12/26 19:03 */public class Json2Object {{% fold 点击显/隐代码块(遍历) %}```javapackage com.tester.ada.common.gather.ArrayList;import java.util.ArrayList;import java.util.Iterator;/** * @author ada * @ClassName ArrayListTester1 * @Description ArrayList 遍历 * @Computer Macbook pro * @Date 2021/12/23 22:37 */public class ArrayListTester1 {    public static void main(String[] args) {        ArrayList&lt;Integer&gt; arrayList = new ArrayList&lt;Integer&gt;();        arrayList.add(1);        arrayList.add(3);        arrayList.add(5);        System.out.println("---------------foreach---------------");        for (Integer number : arrayList) {            System.out.println(number);        }        System.out.println("---------------普通for循环---------------");        for (int i = 0; i &lt; arrayList.size(); i++) {            System.out.println(arrayList.get(i));        }        System.out.println("---------------Lambda表达式一---------------");        arrayList.forEach(number -&gt; {            System.out.println(number);     //写执行的逻辑        });        System.out.println("---------------Lambda表达式二---------------");        arrayList.forEach(System.out::println);        System.out.println("---------------迭代器---------------");        // 迭代器  hasNext--&gt;如果有下一个元素就为 true  next-&gt;得到下一个元素，并且会自动去进行移动，类似 i++改变循环条件        for (Iterator iterator = arrayList.iterator(); iterator.hasNext(); ) {            Integer ints = (Integer) iterator.next();            System.out.println(ints);        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211223225827056.png" alt="ArrayList遍历"></p><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li><code>无序</code> <code>不可重复</code></li><li>支持的数据类型为引用类型（类、数组）（如果添加基本数据类型会自动装箱）</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块[示例]</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>gather<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName HashSetTester * @Description HashSet 无序、不可重复 * @Computer Macbook pro * @Date 2021/12/26 14:05 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由于不可重复，这里相同的值就覆盖了，因此 size 不变</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"dream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//获取集合大小</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"link"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//判断是否包含 link</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//判断是否为空</span><span class="token comment">//        set.clear(); 清空</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将集合转换成对应数据类型的数组（这里用的父类类型接收）</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> obj <span class="token operator">:</span> objs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211226144422472.png" alt="HashSet示例"></p><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(遍历)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>gather<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName HashSetTester1 * @Description 遍历HashSet * @Computer Macbook pro * @Date 2021/12/26 14:27 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashSetTester1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"USA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nations<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Japan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============forEach==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> nation <span class="token operator">:</span> nations<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============迭代器一==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span> nation1 <span class="token operator">=</span> nations<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> nation1<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation1<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============迭代器二==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> nation2 <span class="token operator">=</span> nations<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nation2<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation2<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211226145148629.png" alt="HashSet遍历"></p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li>以键值对的形式来保存数据</li><li>键不可以重复，重复时，后者键值覆盖前者</li><li>键和值支持的数据类型为引用类型</li><li>Map 可以描述任何一个对象信息</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(示例)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>gather<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName HashMapTester * @Description HashMap 键值存储，键不可重复 * @Computer Macbook pro * @Date 2021/12/26 15:11 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// key 相同 覆盖前面的</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Profession"</span><span class="token punctuation">,</span> <span class="token string">"测试工程师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 --&gt; 25（如果 key 不存在，则为 null）</span>        info<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 移除 key 为 name 的</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取大小 --&gt; 2</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// key 中，是否有一个值是 name --&gt; false (上面已经移除了)</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token string">"工程师"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// value 中是否有一个值是 工程师 --&gt; false（要完全匹配）</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> allKey <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取所有的 key 返回的是一个 Set 集合对象 需要循环遍历</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> allValues <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取所有的值 返回一个 Collection 集合对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>allValues<span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"--&gt;"</span> <span class="token operator">+</span> info<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//循环输出</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211226175404008.png" alt="HashMap示例"></p><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(遍历)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>gather<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName HashMapTester1 * @Description HashMap 遍历 * @Computer Macbook pro * @Date 2021/12/26 15:44 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapTester1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"ada"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Profession"</span><span class="token punctuation">,</span> <span class="token string">"测试工程师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============forEach==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"---&gt;"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===============Lambda 表达式==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211226175559781.png" alt="HashMap遍历"></p><h2 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h2><h3 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h3><ul><li><a href="https://baike.baidu.com/item/JSON">JSON</a>(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式</li><li>对象表示为键值对</li><li>数据由逗号分割</li><li>花括号保存对象</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span>  <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span>  <span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span>  <span class="token property">"Profession"</span><span class="token operator">:</span> <span class="token string">"测试工程师"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方括号保存数组</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ada"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span><span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token property">"Profession"</span><span class="token operator">:</span> <span class="token string">"测试工程师"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ada1"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"26"</span><span class="token punctuation">,</span><span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token property">"Profession"</span><span class="token operator">:</span> <span class="token string">"测试工程师1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ada2"</span><span class="token punctuation">,</span> <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span><span class="token property">"gender"</span><span class="token operator">:</span> <span class="token string">"男"</span><span class="token punctuation">,</span><span class="token property">"Profession"</span><span class="token operator">:</span> <span class="token string">"测试工程师2"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Json 可以描述任何一个对象信息</li></ul><h3 id="生成实体类"><a href="#生成实体类" class="headerlink" title="生成实体类"></a>生成实体类</h3><ul><li>除了手写还可以通过一些插件(<code>GsonFormatPlus</code>)快速生成实体类(在插件中搜索安装)</li><li>创建实体类，在类中右键–&gt;生成–&gt;GsonFormatPlus–&gt;粘贴 json 格式文本（GsonFormatPlus中可设置成 Lombok PS：pom.xml 需要先引入）</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211226181100822.png" alt="设置成Lombok"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20211226181523568.png" alt="生成实体"></p><ul><li>@NoArgsConstructor 生成一个无参的构造函数</li><li>@Data 生成 get set 方法</li></ul><h3 id="转换-1"><a href="#转换-1" class="headerlink" title="转换"></a>转换</h3><ul><li>采用第三方工具 fastJson 或 gson（这里以 fastJson 为例）</li><li>fastJson 需要在 pom 中引入</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${fastjson.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>将Json字符串转对象 JSONObject.parse()</li><li>将Json数组格式字符串转对象 JSONObject.parseArray()</li><li>将对象转换为字符串 </li></ul><h4 id="json-字符串转-Map"><a href="#json-字符串转-Map" class="headerlink" title="json 字符串转 Map"></a>json 字符串转 Map</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(转Map)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>json</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName Json2Map * @Description Json 转 Map * @Computer Macbook pro * @Date 2021/12/26 18:20 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Json2Map</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> strJson <span class="token operator">=</span> <span class="token string">"{\n"</span> <span class="token operator">+</span>            <span class="token string">"  \"name\": \"ada\",\n"</span> <span class="token operator">+</span>            <span class="token string">"  \"age\": \"25\",\n"</span> <span class="token operator">+</span>            <span class="token string">"  \"gender\": \"男\",\n"</span> <span class="token operator">+</span>            <span class="token string">"  \"Profession\": \"测试工程师\"\n"</span> <span class="token operator">+</span>            <span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// strJson Json 格式的文本</span>        <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span><span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strJson<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里会直接调用 map.toString()</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211226200534466.png" alt="Json转Map示例"></p><h4 id="Json-字符串转对象"><a href="#Json-字符串转对象" class="headerlink" title="Json 字符串转对象"></a>Json 字符串转对象</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(实体类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>json</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName User * @Description User 实体 * @Computer Macbook pro * @Date 2021/12/26 18:06 */</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> profession<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(转对象)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>common<span class="token punctuation">.</span>json</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName Json2Object * @Description Json 转 对象 * @Computer Macbook pro * @Date 2021/12/26 19:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Json2Object</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         * Json2Map.strJson json 格式的文本         * User.class 需要转换的类的字节码对象 类名.class         */</span>        <span class="token class-name">User</span> users <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token class-name">Json2Map</span><span class="token punctuation">.</span>strJson<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用users.toString() 因为加了@Data 注解 重写了 toString 方法不然输出就是父类的</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取对象的属性</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211226201140430.png" alt="Json转对象示例"></p><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h2><ul><li><a href="https://mvnrepository.com/">Maven 中央仓库</a>  Maven 这个项目维护了一个网站，在这个上面维护了非常多开源的 jar 包，并且维护了每个 jar 包的版本便于开发者们去下载使用</li><li>Maven：解决协同合作时版本问题 协同合作时传输问题</li><li>Maven 是一个项目管理工具，它包含了一个项目对象模型（Project Object Model）–&gt; pom.xml</li><li>作用：项目构建（<code>编译</code> <code>打包</code> <code>发布</code> <code>测试</code> 等等）</li><li>目前大部分企业在在做项目（Java）时的首选项目构建管理工具（部分较老的企业也有用 Ant,Android 一般采用<code>gradle</code>）</li><li>IDE 一般都自带有 Maven，如果没有集成开发环境需要自行下载安装配置环境变量（不管哪种方式使用，做好都修改下镜像源为国内源，本地仓库地址设置为非系统盘–&gt;修改 settings.xml 文件 <code>mirrors</code> <code>localRepository</code>）</li><li>Maven 添加依赖时的流程（比如我们 pom.xml 文件中添加了 fastjson 的依赖配置）<ul><li>查看本地仓库是否有指定的 fastjson 的 jar 包</li><li>如果有直接引入，如果没有自动从远程仓库搜索 fastjson 的 jar 包（如果远程仓库找不到就会报错，有可能版本不对，或者网络原因，或者在私服，或者自己打的 jar包）</li><li>建立 Maven 项目时将从本地资源获得 Maven 的本地资源库依赖资源</li><li>如果没找到，则从默认的 Maven（或者自己配置）的远程仓库查找下载 </li></ul></li><li>POM<ul><li>pom（Project Object Model）即项目对象模型，是 Maven 工作的基本单位</li><li>位于项目目录中的 xml 文件：pom.xml</li><li>pom.xml其中可以包含项目构建的各种配置信息</li><li>每个项目只有一个</li></ul></li><li>Maven 的特点<ul><li>可以使用 Maven 来编译你的代码</li><li>项目打包也可以使用 Maven 来完成</li><li>Maven 可以实现模块化管理</li><li>Maven 可以<code>在线管理依赖</code>，项目依赖也很方便获取</li><li>Maven 提供了一些丰富的插件，方便项目持续集成</li></ul></li></ul><h2 id="新建-Maven-工程参数"><a href="#新建-Maven-工程参数" class="headerlink" title="新建 Maven 工程参数"></a>新建 Maven 工程参数</h2><ul><li>groupId：分组，一般填写组织机构，如 com.incar</li><li>artifactId：项目包名（项目打包成 jar 包的 ID，或者说 jar 包名字）</li><li>version：版本</li><li>name： Maven工程名称</li><li>packaging：打包方式 （jar war pom）我用的 pom</li><li>&lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;:继承父类的依赖（如果是多个子模块都需要用到的依赖，可以在父模块引用依赖子模块添加该标签即可）</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.adalucky<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>automation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>V1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>endpoint<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">&gt;</span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Maven-项目结构"><a href="#Maven-项目结构" class="headerlink" title="Maven 项目结构"></a>Maven 项目结构</h2><ul><li>src/main/java：一般是开发人员写代码的目录</li><li>src/main/resource：开发人员放项目资源的目录</li><li>src/test/java：放单元测试或测试人员写代码的目录</li><li>src/main/resource：放测试资源的目录</li><li>Maven Dependencies：通过 Maven 下载下来的项目依赖包存放的目录</li><li>target：存放构建后文件的目录</li></ul><h1 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h1><h2 id="properties解析"><a href="#properties解析" class="headerlink" title="properties解析"></a>properties解析</h2><ul><li><code>Properties</code> 类是 <code>java.util</code> 提供的工具类</li><li><code>当前类名.class.getResourceAsStream</code> 当前类读取一个文件，并且转换为输入流</li><li>文件路径的更路径是/src/main/resources （可在 idea 的配置文件中修改）</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(properties解析)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>properties<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName PropertiesTester * @Description 解析properties配置文件 * @Author ada * @Computer Mac mini * @Date 2021/12/29 15:19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesTester</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// java提供解析properties配置文件的类</span>        <span class="token comment">//加载资源文件作为一个输入流： 当前类名.class.getResourceAsStream("从当前路径的/src/main/resources根路径开始写文件路径")</span>        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">PropertiesTester</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/config/user.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// properties对象加载这个流，有可能文件地址不对导致流对象为空</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// getProperty 是 Properties类的对象方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"gradle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"profession"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * getProperty方法的封装     *     * @param key 传入的键     * @return 返回键的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取整型数据     *     * @param key 传入的键     * @return 返回键的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> <span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token operator">==</span> value <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取 Boolean 型数据     *     * @param key 传入的键     * @return 返回键的值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token operator">==</span> value <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211229171054316.png" alt="properties解析示例"></p><h2 id="Xml-解析"><a href="#Xml-解析" class="headerlink" title="Xml 解析"></a>Xml 解析</h2><h3 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h3><ul><li>XML：( Extensible Markup Language ) 可扩展的标记语言，类似于 html 都是标记语言（可以写逻辑处理的叫编程语言 比如 js py等等）</li><li>特点<ul><li>可扩展性，在遵循 xml 语法的前提下支持自定义和修改</li><li>标记语言，具有结构性，意味着也是类似于 html 中的标签来定义<code>文档</code></li><li>xml 在姓名中的使用更多的是作为<code>数据载体</code> 而出现的，xml 和 json 都是一种数据交互格式</li><li>非常适合万维网数据 <code>传输</code>，提供统一方法描述和交换结构化数据</li></ul></li><li>xml 与 html 的区别：xml 是作为数据传输的工具，是一种数据载体， html 是数据展示的工具（展示成一个网页）</li></ul><h3 id="文档结构"><a href="#文档结构" class="headerlink" title="文档结构"></a>文档结构</h3><ul><li>xml 的文档结构跟 HTML 类似，也是一种树形结构，从上往下发展</li><li>父、子以及同胞等术语用于描述元素之间的关系<ul><li>父元素拥有子元素</li><li>相同层级上的子元素称为同胞（兄弟或姐妹）</li></ul></li><li>所有的元素都可以有文本内容和属性（类似 html）</li></ul><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><ul><li>xml 声明语法：元素的属性值，必须要用双引号 “ “引起来    注释使用 <code> &lt;!-- 注释内容 --&gt;</code></li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>根元素：</p><ul><li><code>xml 必须包含根元素</code>，它是所有其它元素的父元素，比如一下实例中 person 就是根元素</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>person</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>ada<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>gender</span><span class="token punctuation">&gt;</span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>gender</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>person</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>所有元素标签成对出现</li><li>大小写敏感</li><li>嵌套使用（注意嵌套顺序）</li></ul></li></ul><h3 id="dom4j-解析技术"><a href="#dom4j-解析技术" class="headerlink" title="dom4j 解析技术"></a>dom4j 解析技术</h3><p>dom4j : Document Object Model for Java</p><ul><li>添加依赖：dom4j</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token comment">&lt;!-- dom4j,解析 xml 文件的库 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dom4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${dom4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建解析器 SaxReader 对象</li><li>获取document 对象</li><li>获取根元素</li><li>获取根元素下的子元素</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(xml文件)</div></div><div class="fold"><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><span class="token comment">&lt;!--标签必须要用根元素--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Users</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user_1</span> <span class="token attr-name">cid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>John<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">&gt;</span></span>john@example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>18<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user_1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user_2</span> <span class="token attr-name">cid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>ada<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">&gt;</span></span>ada@example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>22<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user_2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user_3</span> <span class="token attr-name">cid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">&gt;</span></span>link<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">&gt;</span></span>link@example.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user_3</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Users</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(User实体)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>xml<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName User * @Description User 实体类 * @Computer Macbook pro * @Date 2021/12/29 21:20 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(xml</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>xml<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>xml<span class="token punctuation">.</span>entity<span class="token punctuation">.</span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Document</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">DocumentException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span></span><span class="token class-name">Element</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>dom4j<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">SAXReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName XMLTester * @Description 解析 xml 文件工具 * @Author ada * @Computer Mac mini * @Date 2021/12/29 18:57 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XMLTester</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Document</span> document<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建 List 保存每一个 User 对象</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">readXml</span><span class="token punctuation">(</span><span class="token string">"/config/user.xml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 解析 xml 工具类     *     * @param xmlPath xml 路径     * @return 所有对象 List 集合     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">readXml</span><span class="token punctuation">(</span><span class="token class-name">String</span> xmlPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//        创建 SAXReader对象 --&gt; dom4j的依赖引入的</span>        <span class="token class-name">SAXReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SAXReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">//            读取一个 xml 文件 --&gt; 成为一个 Document 对象</span>            document <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">XMLTester</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>xmlPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DocumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//            读取根元素对象</span>        <span class="token class-name">Element</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getRootElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(rootElement.getName());</span><span class="token comment">//        读取根节点下所有的子节点对象（根节点相当一级菜单，然后获取二级菜单）,返回一个 list 列表</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> elements <span class="token operator">=</span> rootElement<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//       element为遍历出的每一个子节点</span>        elements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建 User 对象用 set 方法对实体赋值</span>            <span class="token class-name">String</span> elementName <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//子节点标签名</span>            <span class="token class-name">String</span> idAttr <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">attribute</span><span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 子节点 ID 属性</span><span class="token comment">//            System.out.println(elementName+"--------&gt;id:"+idAttr);</span>            user<span class="token punctuation">.</span><span class="token function">setCid</span><span class="token punctuation">(</span>idAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Element</span><span class="token punctuation">&gt;</span></span> userInfoElements <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">elements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//子节点的子节点对象</span>            userInfoElements<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>userInfoElement <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> tagName <span class="token operator">=</span> userInfoElement<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标签名</span>                <span class="token class-name">String</span> tagValue <span class="token operator">=</span> userInfoElement<span class="token punctuation">.</span><span class="token function">getStringValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//标签中的文本</span><span class="token comment">//                System.out.println(tagName+"--------&gt;"+tagValue);</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>tagValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>tagValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span>tagValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"cid"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    user<span class="token punctuation">.</span><span class="token function">setCid</span><span class="token punctuation">(</span>tagValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> users<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211229215403088.png" alt="解析示例"></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><ul><li>在上面的 xml 解析时如果每次在 xml 的子节点中新增了标签，那么就需要再去添加一个 if else 做判断，不好维护，因此可通过反射技术实现通用性处理</li><li>反射 –&gt; 运行时编程 –&gt; 通用性处理</li></ul><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><ul><li>Java 反射机制是在运行状态中对任意一个类都能够知道这个类的所有属性和方法</li><li>对于任意一个对象都能够调用它的任意一个方法和属性</li><li>这种<code>动态获取信息</code>以及<code>动态调用对象方法</code>的功能称为 Java 语言的反射机制</li></ul><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><ul><li>根据类的自己吗 class 文件获取一个类的细节，包括构建出来，通过对象去调用方法、操作属性</li><li>关键字：<code>反射</code> <code>反向获取</code> <code>映射</code></li><li>Java 中每一个类都有一个 class 对象，可以通过这个 class 对象获取它对应的属性和方法，然后再用这个对象的类去调用获取的方法</li><li>在 Java 中 <code>Class</code> 可以用来描述所有的类 <code>Method</code> 可以描述所有的方法</li></ul><h3 id="反射的实现"><a href="#反射的实现" class="headerlink" title="反射的实现"></a>反射的实现</h3><ul><li>获取类的字节码对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.tester.ada.Parsing.entity.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>通过字节码去创建对象</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">User</span> user<span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>通过字节码获取到可以调用到的方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> methodName <span class="token operator">=</span> <span class="token string">"set"</span><span class="token operator">+</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">chaeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>调用 method</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(反射实现)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span><span class="token class-name">Mapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>xml<span class="token punctuation">.</span>entity<span class="token punctuation">.</span><span class="token class-name">User</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MappingTest * @Description 反射类的实现 * @Author ada * @Computer Mac mini * @Date 2022/1/5 16:51 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappingTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.tester.ada.Parsing.xml.entity.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建类的对象</span>            <span class="token class-name">String</span> methodName <span class="token operator">=</span> <span class="token string">"set"</span> <span class="token operator">+</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>     <span class="token comment">//拼接方法名</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//映射这个 set 方法</span>            method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">"调用反射设值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//用创建的对象（user）调用（invoke）上面映射的方法（method），传入的值为 String类型的 【调用反射设值】</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MappingTest</span><span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220105173656024.png" alt="反射实现示例"></p><h3 id="获取-Class-对象"><a href="#获取-Class-对象" class="headerlink" title="获取 Class 对象"></a>获取 Class 对象</h3><ul><li>Class 类：用于描述类的一个类（属性、方法、构造器）</li><li>Class 对象<ul><li>封装了所有对应的类的细节信息</li><li>将class 文件读入内存，则会创建一个 Class 对象</li><li>Class 对象是 jvm 自动化创建的，一个类只产生一个 Class 对象</li><li><code>运行时编程</code></li></ul></li><li>获得 Class 对象（获取 Test类的 Class）<ul><li>通过对象调用 getClass 方法，例创建 test 对象：test.getClass();</li><li>通过类名去获取：Test.class;</li><li>通过类路径<code>注册</code>获取：Class.forName(“com.tester.ada.Parsing.xml.entity.User”);</li></ul></li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(获取Class)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span><span class="token class-name">Mapping</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MappingTest2 * @Description 获得 Class 对象的三种方式 * @Author ada * @Computer Mac mini * @Date 2022/1/5 17:47 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappingTest2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        方式一：通过对象调用 getClass 方法获取Class</span>        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz1 <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        方式二：通过类名去获取：Test.class;</span>        <span class="token class-name">Class</span> clazz2 <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//        方式三：通过类路径`注册`获取</span>        <span class="token class-name">Class</span> clazz3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            clazz3 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.tester.ada.Parsing.Mapping.Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//Class 对象是 jvm 自动化创建的，一个类只产生一个 Class 对象,因此这里 1 2 3 都是指向的同一个地址</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz2 <span class="token operator">==</span> clazz3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MappingTest2</span><span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220105180139538.png" alt="获取类的Class对象"></p><h3 id="获取类名"><a href="#获取类名" class="headerlink" title="获取类名"></a>获取类名</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(获取类名相关)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span><span class="token class-name">Mapping</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MappingTest3 * @Description 类相关属性获取 * @Author ada * @Computer Mac mini * @Date 2022/1/5 18:05 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappingTest3</span> <span class="token keyword">extends</span> <span class="token class-name">MappingTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">MappingTest3</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//        获取当前类的类名，包括了路径</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前类名【"</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//--&gt;当前类名【com.tester.ada.Parsing.Mapping.MappingTest3】</span><span class="token comment">//        获取当前类的包名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前类的包名【"</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//--&gt;当前类的包名【com.tester.ada.Parsing.Mapping】</span><span class="token comment">//        判断是都为接口</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是否为接口【"</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//--&gt;是否为接口【false】</span><span class="token comment">//        获取父类的类名</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类类名【"</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//--&gt;父类类名【com.tester.ada.Parsing.Mapping.MappingTest】</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MappingTest3</span><span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220105184319042.png" alt="获取类名示例"></p><h3 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(获取字段)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span><span class="token class-name">Mapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName MappingTest4 * @Description 获取字段 * @Author ada * @Computer Mac mini * @Date 2022/1/5 18:47 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappingTest4</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//        获取 public 字段 --&gt;例：public字段：public java.lang.String com.tester.ada.Parsing.Mapping.Test.name</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicFields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>publicFields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"public字段："</span> <span class="token operator">+</span> field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        获取所有字段 --&gt;例：所有字段：private java.lang.Integer com.tester.ada.Parsing.Mapping.Test.age</span>        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allFields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>allFields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有字段："</span> <span class="token operator">+</span> field<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        获取字段的信息：名字+类型+修饰符（public 1,private 2） --&gt;例：字段名：age字段类型：class java.lang.Integer修饰符：2</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>allFields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>field <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字段名："</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t字段类型："</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t修饰符："</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        根据字符获取 Class 对象字段</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"+++++++++++++++++++++++获取指定字符串的属性+++++++++++++++++++++++"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字段名："</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t字段类型："</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\t修饰符："</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220105192657538.png" alt="获取字段"></p><h3 id="获取方法"><a href="#获取方法" class="headerlink" title="获取方法"></a>获取方法</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span><span class="token class-name">Mapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MappingTest5 * @Description 获取方法 * @Computer Macbook pro * @Date 2022/1/5 21:14 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappingTest5</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//        获取当前类的所有 public 方法 示例--&gt;public static java.lang.String com.tester.ada.Parsing.Mapping.Test.demo1()</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>methods<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>method <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1.获取的是类public方法:"</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        获取的是类自身声明的所有方法，包含public、protected和private方法</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>allMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>method <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2.获取的是类自身声明的所有方法:"</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        获取指定方法的 无参数时填 null 或者不填 clazz.getDeclaredMethod 和 getMethods()一样只有范围不一样</span><span class="token comment">//        一个是本类 一个还包含父类或者实现的接口,如果方法的修饰符为protected 请用， getDeclaredMethod 方法，为 public 请用 getMethod 方法</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Method</span> demo1Method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3.方法的修饰符:"</span> <span class="token operator">+</span> demo1Method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"\t方法的名称:"</span> <span class="token operator">+</span> demo1Method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"\t方法的返回值类型:"</span> <span class="token operator">+</span> demo1Method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"\t方法的参数个数:"</span> <span class="token operator">+</span> demo1Method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">"\t方法的参数类型:"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>demo1Method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//        Method[] getMethods() 获取的是类的所有共有方法，这就包括自身的所有public方法，和从基类继承的、从接口实现的所有public方法。</span>        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicMethod <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>publicMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>method <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4.获取的是类和继承实现的public方法:"</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h3 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(方法调用)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span><span class="token class-name">Mapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MappingTest6 * @Description 方法的调用 * @Computer Macbook pro * @Date 2022/1/5 22:09 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappingTest6</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Method</span> method <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"demo4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//方法没有参数,可以不传参数类型或者传 null</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法用 null 调用:"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态方法用对象调用:"</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20220105222231518.png" alt="调用静态方法示例"></p><h3 id="获取构造函数及创建对象"><a href="#获取构造函数及创建对象" class="headerlink" title="获取构造函数及创建对象"></a>获取构造函数及创建对象</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(获取构造函数及创建对象)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span><span class="token class-name">Mapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MappingTest7 * @Description 获取构造函数及创建对象 * @Computer Macbook pro * @Date 2022/1/5 22:30 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappingTest7</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token comment">//        获取当前类所有 public 构造函数 --&gt;例:public com.tester.ada.Parsing.Mapping.Test()</span>        <span class="token class-name">Constructor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> publicConstructors <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        getDeclaredConstructors 获取所有构造函数包括继承、实现、非 public</span><span class="token comment">//        Constructor[] constructors = clazz.getDeclaredConstructors();</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>publicConstructors<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>constructor <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        获取对应参数类型的构造函数 传入参数类型</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Constructor</span> testConstructors <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三个参数构造函数初始化对象:"</span> <span class="token operator">+</span> testConstructors<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化对象</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造函数名称:"</span> <span class="token operator">+</span> testConstructors<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造函数参数列表:"</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>testConstructors<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造函数参数个数:"</span> <span class="token operator">+</span> testConstructors<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造函数修饰符:"</span> <span class="token operator">+</span> testConstructors<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//        获取无参的构造函数 参数类型可以传 null 或者不传</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Constructor</span> tester <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无参构造函数初始化对象:"</span> <span class="token operator">+</span> tester<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//初始化对象</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h3 id="创建对象的两种方式"><a href="#创建对象的两种方式" class="headerlink" title="创建对象的两种方式"></a>创建对象的两种方式</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(创建对象的两种方式)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span><span class="token class-name">Mapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName MappingTest8 * @Description 创建对象 * @Computer Macbook pro * @Date 2022/1/5 23:09 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MappingTest8</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        Class创建对象</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Test</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//        构造器创建对象</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Constructor</span> c <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h2 id="Excel-解析"><a href="#Excel-解析" class="headerlink" title="Excel 解析"></a>Excel 解析</h2><ul><li>采用阿里巴巴的开源工具类 easyExcel</li><li>引入依赖 lombok easyexcel</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${easyexcel.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(dome)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>excel<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">ExcelReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>read<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">ExcelReaderBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName Dome * @Description demo演示 * @Computer Macbook pro * @Date 2022/1/6 22:58 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        创建 ExcelReaderBuilder 实例</span>        <span class="token class-name">ExcelReaderBuilder</span> readerBuilder <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        读取文件对象</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"ada/src/main/resources/excel/easyExcel.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        指定 sheet（可以传下标或者工作表名）</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        自动关闭输入流</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">autoCloseStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        设置文件格式 根据文件的后缀进行设置</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">.</span>XLSX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        注册监听器使用观察者模式进行数据的解析（一行一行读取封装成一个对象称为观察者模式）</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 需要传入ReadListener对象，但是它又是一个接口，所以用 new AnalysisEventListener() 匿名内部类实现抽象方法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                把每次读取的数据封装到 Object o（这是一个多态的应用，实际上是LinkedHashMap类型 ），然后回调 invoke 回调函数</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                数据读取完毕后进行的一些操作（自动调用）</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据读取完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        构建读取器，上面的都是做一些读取的配置相关</span>        <span class="token class-name">ExcelReader</span> reader <span class="token operator">=</span> readerBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        读取所有</span>        reader<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        读取完毕</span>        reader<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 指定监听器类型     * 监听器默认是LinkedHashMap类型 我们指定为 Map 类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        创建 ExcelReaderBuilder 实例</span>        <span class="token class-name">ExcelReaderBuilder</span> readerBuilder <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        读取文件对象</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"ada/src/main/resources/excel/easyExcel.xlsx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        指定 sheet（可以传下标或者工作表名），不指定会默认读取所有的 sheet</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        自动关闭输入流</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">autoCloseStream</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        设置文件格式 根据文件的后缀进行设置</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">.</span>XLSX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        注册监听器使用观察者模式进行数据的解析（一行一行读取封装成一个对象称为观察者模式）</span>        readerBuilder<span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 需要传入ReadListener对象，但是它又是一个接口，所以用 new AnalysisEventListener() 匿名内部类实现抽象方法</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> integerStringMap<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                将默认的 Object类型（实际上是LinkedHashMap类型）指定为 Map&lt;Integer, String&gt; 类型</span>                integerStringMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> v <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                数据读取完毕后进行的一些操作（自动调用）</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据读取完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        构建读取器，上面的都是做一些读取的配置相关</span>        <span class="token class-name">ExcelReader</span> reader <span class="token operator">=</span> readerBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        读取所有</span>        reader<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        读取完毕</span>        reader<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(dome简写)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>excel<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName DomePro * @Description 简化代码 * @Computer Macbook pro * @Date 2022/1/6 23:39 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DomePro</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"ada/src/main/resources/excel/easyExcel.xlsx"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> integerStringMap<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integerStringMap<span class="token punctuation">)</span><span class="token punctuation">;</span>                        dataList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>maps <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                            maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> v <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(实体抽象类)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>excel<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName ExecelData * @Description excel 抽象类，所有的实体类需要继承该类 * @Computer Macbook pro * @Date 2022/1/7 00:25 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ExecelData</span> <span class="token punctuation">{</span>    <span class="token comment">//    抽象类，所有的Excel实体类都需要继承该类，使用@ExcelProperty注解完成实体类和Excel字段的映射</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(封装实体)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>excel<span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ExcelProperty</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName EasyExcelEntity * @Description 实体类，映射成指定对象 * @Computer Macbook pro * @Date 2022/1/7 00:10 * @JDKVersion JDK1.8 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EasyExcelEntity</span> <span class="token keyword">extends</span> <span class="token class-name">ExecelData</span> <span class="token punctuation">{</span>    <span class="token comment">//    @ExcelProperty 注解将表头和实体类映射</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"ID"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"邮箱"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"性别"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> gander<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"积分"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> score<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"IP"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> IP<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"登录次数"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> count<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span><span class="token string">"加入时间"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(easyExcelService)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>excel<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span></span><span class="token class-name">EasyExcel</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">AnalysisContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token class-name">AnalysisEventListener</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>excel<span class="token punctuation">.</span>write<span class="token punctuation">.</span>builder<span class="token punctuation">.</span></span><span class="token class-name">ExcelWriterBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>formula<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">T</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName easyExcelService * @Description 读写 excel 服务 * @Computer Macbook pro * @Date 2022/1/6 22:58 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> easyExcelService <span class="token punctuation">{</span>    <span class="token comment">/**     * @param Source_Path 源路径     * @param sheetIndex  表单索引     * @param clazz       实体类(必须要继承 ExcelData)     * @param &lt;T&gt;         统一指定泛型     * @return 返回实体类对象 list 集合     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">readExcel</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Source_Path</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span> sheetIndex<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExcel</span><span class="token punctuation">(</span><span class="token class-name">Source_Path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> readList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">Source_Path</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span> <span class="token comment">//设置要反射的类为传入的类</span>                    <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>sheetIndex<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">registerReadListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnalysisEventListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">,</span> <span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            readList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAfterAllAnalysed</span><span class="token punctuation">(</span><span class="token class-name">AnalysisContext</span> analysisContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> readList<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @param target_Path    回写的路径     * @param Sheet_name     回写时候工作表命名     * @param execelDataList 回写的数据     * @param clazz          回写的表头对应的实体类     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeExcel</span><span class="token punctuation">(</span><span class="token class-name">String</span> target_Path<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name">Sheet_name</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> execelDataList<span class="token punctuation">,</span> <span class="token class-name">Class</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ExcelWriterBuilder</span> head <span class="token operator">=</span> <span class="token class-name">EasyExcel</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>target_Path<span class="token punctuation">)</span><span class="token comment">//                回写的格式按照.head传入的实体类格式进行写入，避免没有表头</span>                <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExcel</span><span class="token punctuation">(</span>target_Path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            head<span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">.</span>XLS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            head<span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span><span class="token class-name">ExcelTypeEnum</span><span class="token punctuation">.</span>XLSX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        head<span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token class-name">Sheet_name</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>execelDataList<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据已回写至【"</span> <span class="token operator">+</span> target_Path <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 根据传入的文件名称最后一个逗号取后缀判断是否是Excel文件     *     * @param Source_Path 传入的文件路径（必须以xls||xlsx结尾）     * @return 返回 boolean 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isExcel</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Source_Path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> strType <span class="token operator">=</span> <span class="token class-name">Source_Path</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token class-name">Source_Path</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">".xls"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>strType<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">".xlsx"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>strType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件格式不是【xls、xlsx】格式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            0,正常退出，1异常退出,不会进入return false;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token comment">/* public static void main(String[] args) {        List list = readExcel("ada/src/main/resources/excel/easyExcel.xlsx", 0, EasyExcelEntity.class);        System.out.println(list.get(0));        writeExcel("/Users/ada/Desktop/easyExcel2.xlsx","第一页",list,EasyExcelEntity.class);    }*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块(ExcelControlle)</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>excel<span class="token punctuation">.</span>controlle<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>excel<span class="token punctuation">.</span>entity<span class="token punctuation">.</span><span class="token class-name">EasyExcelEntity</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span></span><span class="token class-name">Parsing</span><span class="token punctuation">.</span>excel<span class="token punctuation">.</span>service<span class="token punctuation">.</span>easyExcelService<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>poi<span class="token punctuation">.</span>ss<span class="token punctuation">.</span>formula<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">T</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName ExcelControlle * @Description excel 读写接口 * @Computer Macbook pro * @Date 2022/1/7 01:20 * @JDKVersion JDK1.8 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelControlle</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * @param Source_Path 需要读取Excel文件的全路径xxx.xls/xlsx     * @param sheetIndex  Excel文件中的Sheet的索引，从 0 开始     * @param clazz       Excel需要映射的实体类，该类必须要实现ExecelData接口     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token class-name">Source_Path</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span> sheetIndex<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> easyExcelService<span class="token punctuation">.</span><span class="token function">readExcel</span><span class="token punctuation">(</span><span class="token class-name">Source_Path</span><span class="token punctuation">,</span> sheetIndex<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * @param target_Path    回写的目标路径     * @param Sheet_name     回写的表名称     * @param execelDataList 回写的数据List&lt;&gt;类型     * @param clazz          回写时候该实体类进行格式输出（这个类继承一下ExecelData）     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> target_Path<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token class-name">Sheet_name</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> execelDataList<span class="token punctuation">,</span> <span class="token class-name">Class</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        easyExcelService<span class="token punctuation">.</span><span class="token function">writeExcel</span><span class="token punctuation">(</span>target_Path<span class="token punctuation">,</span> <span class="token class-name">Sheet_name</span><span class="token punctuation">,</span> execelDataList<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token string">"ada/src/main/resources/excel/easyExcel.xlsx"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">EasyExcelEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"/Users/ada/Desktop/easyExcel3.xlsx"</span><span class="token punctuation">,</span> <span class="token string">"第一页"</span><span class="token punctuation">,</span> list<span class="token punctuation">,</span> <span class="token class-name">EasyExcelEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h2><ul><li>异常：代码在运行过程中出现的非正常情况</li><li>异常处理：在程序出现异常时仍然可以正确执行完</li></ul><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><ul><li>判断一门变成语言是都成熟的标准</li><li>可以让异常处理代码和正常业务逻辑分离，保证程序健壮性、容错性、优雅性</li><li>缺点是影响代码的可读性</li></ul><h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><ul><li>方式一：在方法名后 throws 抛出异常的类型</li><li>方式二：在方法名后 throws 抛出 Exception 异常（父类异常，所有的异常都继承该类）</li></ul><h2 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h2><h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><h3 id="为什么需要安装-jdk"><a href="#为什么需要安装-jdk" class="headerlink" title="为什么需要安装 jdk"></a>为什么需要安装 jdk</h3><ul><li>jdk 提供了编译器</li><li>jdk 提供了 java 运行环境（jre）</li><li>jre 下有很多现成的 jar包，这些 jar 包构成了 Java SE 的一个基本框架，实现了基本的服务</li></ul><h3 id="jre-下-jar-包的调用"><a href="#jre-下-jar-包的调用" class="headerlink" title="jre 下 jar 包的调用"></a>jre 下 jar 包的调用</h3><ul><li>jre 下的类<ul><li>java.lang 下面的包不需要导包</li><li>其它类需要 import 导包</li></ul></li><li>自己写的类<ul><li>同一个 package 直接使用，无需显示导入</li><li>其它package 下需要 import 导包</li></ul></li><li>其它项目工程<ul><li>导出 jar 包–&gt;提供开发套件 SDK</li><li>将 jar 包添加到私服/项目构建</li></ul></li></ul><h2 id="重载重写"><a href="#重载重写" class="headerlink" title="重载重写"></a>重载重写</h2><h3 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h3><ul><li>在<code>同一个类</code>中函数名相同，参数类型或个数不同<ul><li>参数的个数不一样</li><li>参数的类型不一样（包括顺序）</li></ul></li></ul><h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><ul><li>方法的重写也称为方法的覆写</li><li>出现继承中，子类重写父类的方法，实现多态（子类定义了和父类同名的方法）</li><li>注意：被重写的方法修饰符（访问权限）不能比父类更严格</li></ul><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ul><li>将程序开发人员按角色区分可分为设计者与调用者</li><li>一个人可能同时又是设计者和调用者</li><li>修饰符的出现是为了控制设计者设计的类有哪些东西可以被调用者使用，哪些东西不能被调用者使用，从而<code>实现访问控制，保护类里面一些重要的部分</code></li><li>private 默认修饰符 protected public 四种访问修饰符按照从左网易权限依次增大</li></ul><table><thead><tr><th>访问位置</th><th>private</th><th>默认修饰符</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>定义的类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一个包中</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>子类中</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>其它包中</td><td>×</td><td>×</td><td>×</td><td>√</td></tr></tbody></table><h3 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h3><h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><ul><li>static：静态<ul><li>可以修饰变量、函数</li><li>类在加载到内存的时候最先加载进来的部分是<code>静态的成员</code></li><li>静态成员的访问不需要依赖对象，可直接通过类名访问: 类名.static属性;  类名.static方法();</li><li>静态成员在内存中只保存一份，生命周期跟类保持一致，所以静态成员是<code>共享的</code></li><li>一般<code>不常改动的</code>数据<code>工具类</code>适合声明为静态的</li></ul></li><li>访问<ul><li>不用实例化对象即可调用</li><li>static 方法只能访问 static 的属性和方法</li><li>非 static 的属性和方法使用实例化对象进行访问</li></ul></li></ul><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><ul><li>final:最终的<ul><li><code>被 final 修饰的变量它的值不能再做修改</code></li><li>被 final 修饰的函数，不能被重写</li><li>被 final 修饰的类，不能被继承</li></ul></li><li>final声明一个常量，标识符全部使用大写</li><li>全局常量: public static final LP_LOGIN_BIN=”xxxxx”;</li></ul><h4 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h4><ul><li><p>abstract:抽象的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ExecelData</span> <span class="token punctuation">{</span>    <span class="token comment">//抽象方法没有方法体</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>抽象类</p><ul><li>使用 abstract 关键字进行声明</li><li>不能直接实例化进行操作（不能 new 对象），通过之类继承完成</li><li>子类需要实现抽象类中全部抽象方法</li></ul></li><li><p>抽象方法</p><ul><li>只声明而未实现的方法（没有方法体）</li><li>使用 abstract 进行声明</li></ul></li><li><p>抽象类是一种模板设计的模式</p></li><li><p>在抽象类中，既可以有具体实现的方法，又有没有具体实现的抽象方法</p></li><li><p>象类之所以被称为抽象类，就是因为它包含有抽象方法。含有抽象方法的类叫做抽象类</p></li></ul><h4 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h4><ul><li><p>interface:接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Action</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">Event</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RequestContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>接口</p><ul><li>使用 interface 关键字进行声明，类名前没有 class</li><li>接口是一种比抽象类还抽象的一种类</li><li>接口中只能定义方法不能有实现了的方法</li><li>在这个接口中，定义了一个没有具体实现的方法，方法名叫做execute()，返回类型是Event。如前面所述，接口中的方法都是没有实现的。这些方法的具体实现是在实现(implements)这个接口的类中给出的</li><li>实现接口通过 implements 关键字声明</li></ul></li></ul><h4 id="抽象类和接口的比较"><a href="#抽象类和接口的比较" class="headerlink" title="抽象类和接口的比较"></a>抽象类和接口的比较</h4><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><ul><li>一个软件设计的好坏，我想很大程度上取决于它的整体架构，而这个整体架构其实就是你对整个宏观商业业务的抽象框架，当代表业务逻辑的高层抽象层结构 合理时，你底层的具体实现需要考虑的就仅仅是一些算法和一些具体的业务实现了。当你需要再开发另一个相近的项目时，你以前的抽象层说不定还可以再次利用</li><li><code>面对对象的设计，复用的重点其实应该是抽象层的复用，而不是具体某一个代码块的复用</code></li><li>说到了抽象，我就不能不提到曾让我头痛的Java接口和Java抽象类了</li><li>既然面向对象设计的重点在于抽象，那Java接口和Java抽象类就有它存在的必然性了。</li><li>Java接口(interface)和Java抽象类(abstract class)代表的就是抽象类型，就是我们需要提出的抽象层的具体表现。OOP面向对象的编程，如果要提高程序的复用率，增加程序 的可维护性，可扩展性，就必须是面向接口的编程，面向抽象的编程，正确地使用接口、抽象类这些有用的抽象类型作为你结构层次上的顶层。</li><li>Java接口和Java抽象类有太多相似的地方，又有太多特别的地方，究竟在什么地方，才是它们的最佳位置呢？把它们比较一下，你就可以发现了</li></ul><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul><li>Java接口和Java抽象类最大的一个区别，就在于Java抽象类可以提供某些方法的部分实现，而Java接口不可以（就是interface中只能定义方法，而不能有方法的实现，而在abstract class中则可以既有方法的具体实现，又有没有具体实现的抽象方法），这大概就是Java抽象类唯一的优点吧，但这个优点非常有用。<code>如果向一个抽象类里加入一个新的具体方法时，那么它所有的子类都一下子都得到了这个新方法，而Java接口做不到这一点，如果向一个Java接口里加入一个 新方法，所有实现这个接口的类就无法成功通过编译了，因为你必须让每一个类都再实现这个方法才行，这显然是Java接口的缺点</code>。倾向于使用抽象类，而不是接口，因为这更容易扩展。</li><li>一个抽象类的实现只能由这个抽象类的子类给出，也就是说，这个实现处在抽象类所定义出的继承的等级结构中，而由于Java语言的单继承性，所以抽象类作为类型定义工具的效能大打折扣。在这一点上，Java接口的优势就出来了，任何一个实现了一个Java接口所规定的方法的类都可以具有这个接口的类型，而一个类可以实现任意多个Java接口，从而这个类就有了多种类型。<code>（使用抽象类，那么继承这个抽象类的子类类型就比较单一，因为子类只能单继承抽象类；而子类能够同时实现多个接口，因为类型就比较多。接口和抽象类都可以定义对象，但是只能用他们的具体实现类来进行实例化。）</code></li><li>从第2点不难看出，Java接口是定义混合类型的理想工具，混合类表明一个类不仅仅具有某个主类型的行为，而且具有其他的次要行为。</li><li>结合1、2点中抽象类和Java接口的各自优势，具精典的设计模式就出来了：声明类型的工作仍然由Java接口承担，但是同时给出一个Java 抽象类，且实现了这个接口，而其他同属于这个抽象类型的具体类可以选择实现这个Java接口，也可以选择继承这个抽象类，<code>也就是说在层次结构中，Java 接口在最上面，然后紧跟着抽象类</code>，这下两个的最大优点都能发挥到极至了。这个模式就是“缺省适配模式”。在Java语言API中用了这种模式，而且全都遵循一定的命名规范：Abstract ＋接口名。<code>（A extends AbstractB implements interfaceC，那么A即可以选择实现(@Override)接口interfaceC中的方法，也可以选择不实现；A即可以选择实现(@Override)抽象类AbstractB中的方法，也可以选择不实现）</code></li></ul><h5 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h5><ul><li>Java接口和Java抽象类的存在就是为了用于具体类的实现和继承的，如果你准备写一个具体类去继承另一个具体类的话，那你的设计就有很大问题了。Java抽象类就是为了继承而存在的，它的抽象方法就是为了强制子类必须去实现的。</li><li>使用Java接口和抽象Java类进行变量的类型声明、参数是类型声明、方法的返还类型说明，以及数据类型的转换等。而不要用具体Java类进行变量的类型声明、参数是类型声明、方法的返还类型说明，以及数据类型的转换等。</li></ul><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点  &lt;/p&gt;
&lt;p&gt;Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 &lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="Java 基础" scheme="https://www.adalucky.com/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java 基础语法</title>
    <link href="https://www.adalucky.com/auto/java-chu-ji/"/>
    <id>https://www.adalucky.com/auto/java-chu-ji/</id>
    <published>2021-12-06T12:25:00.000Z</published>
    <updated>2022-06-13T14:43:37.102Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。由 James Gosling和同事们共同研发，并在 1995 年正式推出。</p><p>后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p><a id="more"></a><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/bobocqu/article/details/88366740" target="_blank" class="LinkCard" style="text-decoration: none;">IDEA Mac快捷键</a></p><h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>注：针对 <code>Mac 版本</code></li></ul><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><ul><li>末尾添加分号：command+shift+enter</li><li>向下插入空行：shift+enter</li><li>向上插入空行：command+enter</li><li>向下复制当前行：command+d</li><li> 删除当前行：command+x</li><li> 批量编辑：option+拖动鼠标左键</li><li> 向上移动一行：shift+option+UP</li><li> 向下移动一行：shift+option+Down</li><li> 格式化代码：command+option+l</li><li> 运行当前类：Control+shift+r</li></ul><h3 id="调试部分、编译"><a href="#调试部分、编译" class="headerlink" title="调试部分、编译"></a>调试部分、编译</h3><ul><li>选择 Run：opt+cmd+F10</li></ul><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><h3 id="IDEA-工具报错"><a href="#IDEA-工具报错" class="headerlink" title="IDEA 工具报错"></a>IDEA 工具报错</h3><h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><h5 id="提交或拉取代码-443"><a href="#提交或拉取代码-443" class="headerlink" title="提交或拉取代码 443"></a>提交或拉取代码 443</h5><ul><li>报错内容：unable to access ‘<a href="https://github.com/adaLucky/hexo-adalucky-blog.git/'">https://github.com/adaLucky/hexo-adalucky-blog.git/'</a>: Failed to connect to github.com port 443: Operation timed out</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global --unset http.proxy <span class="token function">git</span> config --global --unset https.proxy<span class="token function">ssh</span> -T -p <span class="token number">443</span> git@ssh.github.com<span class="token comment"># 进入 ~/.ssh/config 文件（没有的话新建）新增内如下</span>Host github.comHostname ssh.github.comPort <span class="token number">443</span>User <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20211213225428543.png" alt="IDEA 使用 git 报错 443"></p><h1 id="Java-简介"><a href="#Java-简介" class="headerlink" title="Java 简介"></a>Java 简介</h1><h2 id="Java-简介-1"><a href="#Java-简介-1" class="headerlink" title="Java 简介"></a>Java 简介</h2><p>①Java是一门面向对象的通用程序设计语言 ②不依赖特定平台，Write Once,Run Anywhere ③Java一般用作web系统开发，尤其是大型企业级项目 ④编译型和解释型语言，先编译然后在机器上进行解释 ⑤用Java开发的系统的特点：跨平台，安全性高 ⑥Java是一门面向高薪编程的语言</p><h2 id="Java-与-Python-的区别"><a href="#Java-与-Python-的区别" class="headerlink" title="Java 与 Python 的区别"></a>Java 与 Python 的区别</h2><ul><li>Java 是一个编译型和解释型的语言，先编译后解释，Python 是一个解释型语言性能相对 Java 要低（据说 Java 比 python 快 3 倍）</li><li>Java 是强数据类型，必须要指定数据类型，Python 是可以不定义数据类型</li></ul><h2 id="Java-环境校验"><a href="#Java-环境校验" class="headerlink" title="Java 环境校验"></a>Java 环境校验</h2><p>需要本地安装 JDK(本系列以 1.8 为例)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 验证 Java 版本</span>java -version<span class="token comment"># Java 编译器校验 java compile</span>Javac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20211206233850619.png" alt="Java 环境校验"></p><h2 id="编译和解释-Java"><a href="#编译和解释-Java" class="headerlink" title="编译和解释 Java"></a>编译和解释 Java</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWord</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"HelloWord"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello 阿达"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/*public:关键字，表示最大权限class：声明类的关键字HelloWorld:类名static:静态，表示一个类的方法void:空，表示无返回值main:java程序的主函数（方法）或者说函数String[ ]args：参数数组System.out.println：换行打印到控制台的方法"Hello World":字符串，作为函数的实际参数*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://blog.adalucky.com/notes/ada/image-20211206235522930.png" alt="编译解释示意图"></p><h2 id="Java-程序结构"><a href="#Java-程序结构" class="headerlink" title="Java 程序结构"></a>Java 程序结构</h2><ul><li>Java程序由类构成<ul><li>一个源程序可以包含多个类定义，最多包含一个public类定义</li><li>如果包含了public类定义，文件名必须和public类名保持一致</li><li>如果源程序无public类，则可选择任意一个类的名称（推荐）或者一个其他的名称作为文件名</li></ul></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211207210102782.png" alt="三种情况编译示例图"></p><ul><li>对Java应用程序来说，必须在其中的一个类中定义有main()方法，包含main()方法的类是该应用程序的主类</li><li>Java语句包含<code>关键字</code>、<code>标识符</code>、<code>运算符</code>和<code>分隔符</code>等元素。这些元素有着不同的语法含义和组成规则，，它们互相配合，共同组成Java的语句</li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>什么是标识符<ul><li>Java 中变量、类、方法的名称就叫做标识符</li><li>标识符就是自己定义的名称</li></ul></li><li>标识符的命名规则<ul><li>以字母、下划线或者$符号开头（不要以数字开头或关键字）</li><li>后面的字符可以包含字母、数字、下划线和$符号</li><li>遵循大驼峰&amp;小驼峰的命名规范（尽量采用类名采用大驼峰、方法和变量采用小驼峰命名规范）</li></ul></li><li>Java 严格区分字母大小写</li></ul><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><ul><li>分隔符<ul><li>分割符用来区分源程序中的基本成分，可以使编译器确认代码在何处进行分割</li><li>分割符有<code>注释符</code> <code>空白符</code> <code>普通分割符</code></li></ul></li><li>注释符<ul><li>注释是为了提高程序的可读性、可理解性</li><li>注释仅用于阅读源程序，编译时会忽略所有注释</li><li>注释符：// 单行注释   /* */ 多行代码注释   /** */ 文档注释 </li></ul></li><li>空白符<ul><li>空白符包括<code>空格</code> <code>回车</code> <code>换行</code> <code>制表符（Tab）</code> 等符号</li><li>作为程序中各基本成分之间的分割符</li><li>各基本成分可以有一个或者多个分隔符</li><li>系统编译时空白符同注释一样，最后会被忽略</li></ul></li><li>普通分割符<ul><li>用于区分程序中的各种基本成分</li><li><code>普通分隔符不能忽略</code>，在程序中<code>有确切的含义</code></li><li>常见的普通分割符<ul><li>.  点：用于分割包、类、引用变量中的变量和方法</li><li>;  分号：语句结束标志</li><li>:  冒号：说明语句符号</li><li>{} 大括号：定义类体、方法体、复合语句和数组初始化</li><li>[] 方括号：定义数组类型、引用数字的元素值</li><li>() 小括号：方法定义、方法访问中将参数括起来，或表达式中定义运算先后次序</li></ul></li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>变量就是用来存储数据的，一个变量在程序中为一个标识符，在内存中是一块空间，提供了信息和数据临时存放的地方，具有记忆数据的功能</li><li>变量是可以被改变的，命名<code>通常用小写字母开头的单词，驼峰命名方式</code></li><li>变量的三个元素：名称、类型和值</li></ul><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><ul><li>在 Java 中存储一个数据，必须将其保存在一个变量中，变量在使用前必须有定义，即有<code>确定的类型</code>和<code>名称</code></li><li>定义一个X变量，并赋值 4 给它：在数学中为 x=4</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Java 中定义变量一般写法</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>此处 int 是变量类型，在 Java 这门语言中任何数据都是有类型的，所以变量前面需要声明变量的类型</li><li>上面这条语句告诉<code>编译器给定义的数据类型和变量名建立一个变量</code></li></ul><h3 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h3><h4 id="基本数据类型变量"><a href="#基本数据类型变量" class="headerlink" title="基本数据类型变量"></a>基本数据类型变量</h4><ul><li>Java 中有八大基本数据类型，按照类型来可以分成四类八种</li><li>注意事项：整型的字面值默认是<code>int类型</code>，声明 long 类型时后面加 L/l，浮点型的字面值默认是<code>double类型</code>声明 float 类型时后面加 F/f</li><li>在同一个作用于中不能有相同的变量名，遵循小驼峰命名规则</li></ul><table><thead><tr><th>类别</th><th>数据类型</th><th>名称</th><th>字节</th><th>位长</th><th>缺省值</th><th>取值范围</th><th>举例说明</th></tr></thead><tbody><tr><td>布尔型</td><td>布尔型</td><td>boolean</td><td>1</td><td>1</td><td>false</td><td>true、false</td><td>boolean b = true;</td></tr><tr><td>整型（整数）</td><td>字节型</td><td>byte</td><td>1</td><td>8</td><td>0</td><td>-2^7 - 2^7-1</td><td>byte aByte = 10;</td></tr><tr><td>~</td><td>短整型</td><td>short</td><td>2</td><td>16</td><td>0</td><td>-2^15 - 2^15-1</td><td>short aShort = 10;</td></tr><tr><td>~</td><td>整形</td><td>int</td><td>4</td><td>32</td><td>0</td><td>-2^31 - 2^31-1</td><td>int aInt = 1000;</td></tr><tr><td>~</td><td>长整形</td><td>long</td><td>8</td><td>64</td><td>0</td><td>-2^63 - 2^63-1</td><td>long aLong = 10L;</td></tr><tr><td>字符型</td><td>字符型</td><td>char</td><td>4</td><td>32</td><td>‘\u0000’</td><td>‘\u0000’~’\uffff’</td><td>char aChar = ‘c’;</td></tr><tr><td>浮点型（小数）</td><td>单精度</td><td>float</td><td>4</td><td>32</td><td>0.0</td><td>-2^31 - 2^31-1</td><td>float aFloat = 10.0F;</td></tr><tr><td>~</td><td>双精度</td><td>double</td><td>8</td><td>64</td><td>0.0</td><td>-2^63 - 2^63-1</td><td>double aDouble = 10.0;</td></tr></tbody></table><h4 id="引用数据类型变量"><a href="#引用数据类型变量" class="headerlink" title="引用数据类型变量"></a>引用数据类型变量</h4><ul><li>引用类型（复合类型）的变量它就是指的一个内存地址，一个位置信息（相当于门牌号）</li><li>只想的内存中保存着变量所表示的一个值或一组值</li><li>引用数据类型分类<ul><li>数组</li><li>类（类类型如String或自定义的类）</li><li>接口</li><li>枚举</li></ul></li></ul><h4 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h4><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><ul><li>类（类类型如String或自定义的类）</li><li>所有引用类型的默认值都是为 null 如果不初始化去引用就会报空指针异常</li><li>语法：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义一个字符串</span><span class="token class-name">String</span> aString <span class="token operator">=</span> <span class="token string">"helloword"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>字符串类型的变量一般用来存储一串文字信息</li><li>字符串可以跟任意类型的数据进行拼接得到新的字符串，拼接符号为【+】例：”hello”+”word” 、”hello”+666 </li></ul><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul><li><p>概念：①数组是一种数据结构，它是一个容器，用来盛放数据    ②不同类型的数组可以盛放不同的数据类型</p></li><li><p>特点：①数组属于引用数据类型，使用的时候需要<code>new 开辟内存空间</code>的    ②数组的容量是确定的，也就是说在定义数组的时候必须指定数组的大小    ③数组的类型是确定的，也就是在定义数组的时候必须声明数组的类型，一种类型的数组只能放一种类型的数据</p></li><li><p>分类：一维数组，二维数组（Java 中没有二维数组的概念，是从 C中吸取的所以也这么叫了）</p></li><li><p>语法：</p><ul><li>声明是直接开辟内存空间：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 语法一：数据类型数组名称[] = new 数据类型[长度];</span><span class="token keyword">int</span> ages<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 语法二(推荐使用，可读性高一点)：数据类型[] 数组名称 = new 数据类型[长度];</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ages2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>分布声明：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* 数据类型数组名称[] = null;(声明)数组名称 = new 数组类型[长度];(实例化数组)*/</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>ages3 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>ages3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>静态声明</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个数组，并对内部的元素进行初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>myArr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>二维数组：二维数组是一个特殊的一维数组，里面的元素还是一个一维数组，二维数组可以不声明第二维度的长度</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211208204157256.png" alt="二维数组"></p></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="运算符顺序"><a href="#运算符顺序" class="headerlink" title="运算符顺序"></a>运算符顺序</h3><ul><li>运算顺序<ul><li>++ –</li><li>括号</li><li>* / %</li><li>+ -</li></ul></li><li>注意事项<ul><li>同一优先级运算符顺序为<code>从左至右</code></li><li><code>运算复杂的时候要一步步拆解运算</code></li></ul></li><li>建议<ul><li>不要把一个表达式写的过于复杂，可以分布来写</li><li>少使用优先级，可读性差</li><li>多使用（）来控制运算顺序</li></ul></li></ul><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><h4 id="双目运算符"><a href="#双目运算符" class="headerlink" title="双目运算符"></a>双目运算符</h4><ul><li>算数运算符：双目运算符 单目运算符 三目运算符</li><li>一般的双目算数运算符有： + - * / *(取模)</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211208224113808.png" alt="双目运算符"></p><h4 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h4><ul><li><p>一般的单目运算符有：++ –</p><ul><li>单目运算符,操作数在左边先使用操作数，操作数在右边先运算</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211208225235911.png" alt="单目运算符"></p></li></ul><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><ul><li>三目运算符</li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li><p>关系运算符又叫比较运算符</p></li><li><p>&gt;  &lt; ==  != &gt;=  &lt;=</p><p><img src="http://blog.adalucky.com/notes/ada/image-20211208233131333.png" alt="关系运算符"></p></li></ul><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul><li><code>&amp;(逻辑与)</code> <code>&amp;&amp;(短路与)</code> <code>|(逻辑或) </code> <code>||(短路或)</code> <code>!(逻辑非，取反)</code></li><li>两种写法的结果一致</li><li>&amp;和&amp;&amp;的区别在于<code>短路与</code>中，当前面的计算就能得到结果时就不会执行后面的逻辑运算，|和||同理</li><li>&amp; &amp;&amp; 当两个同时满足结果才为真  | ||当有一个条件满足结果就为真</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211209001940763.png" alt="&amp;和&amp;&amp;示例"></p><p><img src="http://blog.adalucky.com/notes/ada/image-20211209002105444.png" alt="|和||示例"></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>operational</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogicOperatorTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//      登录场景</span>        <span class="token class-name">String</span> phone <span class="token operator">=</span> <span class="token string">"13888888888"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> pwd <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">;</span><span class="token comment">//      登录成功条件：如果手机号长度是 11 位，并且密码长度是 6 位，就登录成功，否则提示账户信息错误</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>phone<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">11</span> <span class="token operator">&amp;&amp;</span> pwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短路与——&gt;登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短路与——&gt;账户信息错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//      登录成功条件：如果手机号码长度不是 11 位，或者密码长度不是 6 位，提示账户信息错误</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>phone<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">11</span> <span class="token operator">||</span> pwd<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短路或——&gt;账户信息错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"短路或——&gt;登录成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211209003338960.png" alt="应用场景示例"></p><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ul><li>等于</li><li>扩展的赋值运算符：+= -= *= /= %=</li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211208231443668.png" alt="赋值运算符"></p><h3 id="其它运算符"><a href="#其它运算符" class="headerlink" title="其它运算符"></a>其它运算符</h3><h2 id="循环控制结构"><a href="#循环控制结构" class="headerlink" title="循环控制结构"></a>循环控制结构</h2><h3 id="常见的循环控制结构"><a href="#常见的循环控制结构" class="headerlink" title="常见的循环控制结构"></a>常见的循环控制结构</h3><ul><li>任何变成语言的循环控制代码基本都是一样的<ul><li>for</li><li>while</li><li>do…while</li></ul></li><li>循环语句<ul><li>在满足循环条件（布尔表达式）的情况下，反复的执行某段代码（循环体）</li></ul></li></ul><h3 id="循环语句构成"><a href="#循环语句构成" class="headerlink" title="循环语句构成"></a>循环语句构成</h3><ul><li>初始化语句：初始化工作，在循环开始前执行</li><li>循环条件：布尔表达式，决定否是执行循环体</li><li>循环体：循环条件为真时执行的代码块</li><li>迭代语句：每次循环结束后，循环条件的变量，在核实的时候把循环条件设置为假，保证循环可以结束，从而避免死循环</li></ul><h3 id="while-与-do…while"><a href="#while-与-do…while" class="headerlink" title="while 与 do…while"></a>while 与 do…while</h3><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><ul><li>区别<ul><li>do…while…:先执行循环体，然后再判断循环条件，如果循环条件为真，进行下一次循环，否则终止循环，因此循环体里的代码至少执行一次，因为不管条件满不满足，它是先执行判断条件</li><li>while:先判断条件，条件为真才执行循环体</li></ul></li><li>注意<ul><li>do…while…:循环的循环条件必须有一个分号，表示循环结束</li></ul></li></ul><h4 id="while语法"><a href="#while语法" class="headerlink" title="while语法"></a>while语法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// TODO</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="while示例"><a href="#while示例" class="headerlink" title="while示例"></a>while示例</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>loopControl</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName  WhileTester * @Description while 控制语句 * @Author ada * @Computer Mac mini * @Date 2021/12/10 15:13 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         *  循环控制结构         * 1:初始化语句：int a = 1; 初始化一个变量，循环需要一个起点         * 2:循环条件：a &lt;= 100 控制是都要执行循环逻辑（循环体），条件为 true 执行循环，为 false 则结束循环         * 3:循环体：System.out.println(a); 需要循环去执行的逻辑         * 4:迭代语句：a++;  改变某些变量的值，让循环条件在适当的时候为假，从而结束循环，避免死循环         */</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//        当 a 小于或等于 100 时输出 a</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  当前为死循环，因为变量 A 未发生变化,只要 while 中间的条件值为真就会一直执行循环</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">//让 a 发生变化，使条件语句变为假结束循环</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h4 id="do…while…语法"><a href="#do…while…语法" class="headerlink" title="do…while…语法"></a>do…while…语法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">{</span>  <span class="token comment">//TODO</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="do…while…示例"><a href="#do…while…示例" class="headerlink" title="do…while…示例"></a>do…while…示例</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>loopControl</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName DoWhileTester * @Description do while 控制语句 * @Author ada * @Computer Mac mini * @Date 2021/12/10 15:31 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoWhileTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         *  循环控制结构         * 1:初始化语句：int a = 1; 初始化一个变量，循环需要一个起点         * 2:循环条件：a &lt;= 100 控制是都要执行循环逻辑（循环体），条件为 true 执行循环，为 false 则结束循环         * 3:循环体：System.out.println(a); 需要循环去执行的逻辑         * 4:迭代语句：a++;  改变某些变量的值，让循环条件在适当的时候为假，从而结束循环，避免死循环         */</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//        当 a 小于或等于 100 时输出 a</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>for 循环是更为简介的循环语句<ul><li>执行 for 循环时，先执行初始化语句（只执行一次）</li><li>执行循环体之前，先计算循环条件的值，如果为真，执行循环体</li><li>执行循环体结束，再执行迭代条件</li><li>for 循环的判断条件比循环体多执行一次</li></ul></li><li>基本语法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span>（<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span>）<span class="token punctuation">{</span><span class="token comment">//i代表一个整数初始化语句</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印变量 i 每次循环的值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>语法解释<ul><li>i 代表循环开始的值</li><li>第二个表达式“i &lt;= 10”代表的是循环下去的条件，只有满足条件，循环才会继续下去</li><li>i++ 代表走完一次循环，所以 i 要自增，避免死循环</li><li>三个表达式之间用“;”号来进行分割</li></ul></li></ul><h4 id="普通-for-循环"><a href="#普通-for-循环" class="headerlink" title="普通 for 循环"></a>普通 for 循环</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>loopControl</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName ForLoopTesterBase * @Description 基础 for 循环练习 * @Author ada * @Computer Mac mini * @Date 2021/12/10 16:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForLoopTesterBase</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        for 求和</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------用 for 循环求 1-100 的和------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当i为【"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"】时,sum则为【"</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//        while 求和</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------用 while 循环求 1-100 的和------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum2 <span class="token operator">=</span> sum2 <span class="token operator">+</span> a<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当a为【"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"】时,sum2则为【"</span> <span class="token operator">+</span> sum2 <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h4 id="增强-for-循环"><a href="#增强-for-循环" class="headerlink" title="增强 for 循环"></a>增强 for 循环</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>loopControl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName ForLoopTester * @Description for循环 * @Author ada * @Computer Mac mini * @Date 2021/12/10 15:37 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForLoopTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">/**         *  循环控制结构         * 1:初始化语句：int a = 1; 初始化一个变量，循环需要一个起点         * 2:循环条件：a &lt;= 100 控制是都要执行循环逻辑（循环体），条件为 true 执行循环，为 false 则结束循环         * 3:循环体：System.out.println(a); 需要循环去执行的逻辑         * 4:迭代语句：a++;  改变某些变量的值，让循环条件在适当的时候为假，从而结束循环，避免死循环         */</span>        <span class="token comment">/**         *语法         * for(初始化语句; 循环条件 ; 迭代语句){         *      循环体         * }         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">/**         * 双重 for         */</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> allNames <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token punctuation">{</span><span class="token string">"ada1"</span><span class="token punctuation">,</span> <span class="token string">"test1"</span><span class="token punctuation">,</span> <span class="token string">"base1"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token string">"ada2"</span><span class="token punctuation">,</span> <span class="token string">"test2"</span><span class="token punctuation">,</span> <span class="token string">"base2"</span><span class="token punctuation">,</span> <span class="token string">"git2"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span><span class="token string">"ada3"</span><span class="token punctuation">,</span> <span class="token string">"test3"</span><span class="token punctuation">,</span> <span class="token string">"base3"</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> allNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> allNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">String</span> name <span class="token operator">=</span> names<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组allNames【"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"】【"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"】的值为“"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"”"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment">//        JDK1.5增强 for 循环</span>        <span class="token comment">/**         * for(数据类型 变量名 : 遍历的变量){         *     循环体         * }         */</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> className <span class="token operator">:</span> allNames        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> className            <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment">//      jdk1.8遍历 Map  Lambda 表达式</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        items<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      第一种简写式：</span>        items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Key1: "</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">" Value1: "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      第二种判断式：</span>        items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Key2: "</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">" Value2: "</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      jdk1.8遍历 List Lambda 表达式</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> alist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* List&lt;String&gt; list= Lists.newArrayList();*/</span> <span class="token comment">//两种写法都可以</span>      alist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ada1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      alist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ada2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      alist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ada3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      alist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ada4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      语法一</span>      alist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      语法二</span>      alist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//      jdk1.8遍历数组 Lambda 表达式(通过Arrays.asList先转下)</span>      <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>integer <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h3 id="三种循环比较"><a href="#三种循环比较" class="headerlink" title="三种循环比较"></a>三种循环比较</h3><ul><li>do while 循环次数 = 判断次数 </li><li>while 循环次数 = 判断次数-1</li><li>for 循环次数 = 判断次数-1</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>loopControl</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName CompareTester * @Description 流程控制 * @Author ada * @Computer Mac mini * @Date 2021/12/10 16:08 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//  do while 循环次数 = 判断次数  当 a 等于 500 先循环输出 a然后判断 a 不小于或等于 100循环结束，判断一次循环一次</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//  while 循环次数 = 判断次数-1  当 b 等于 200，判断结果不小于或等于直接不进入循环 循环零次，判断一次</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//  for 循环次数 = 判断次数-1   当 i 等于 150，判断结果不小于或等于直接不进入循环 循环零次，判断一次</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h3 id="continue关键字"><a href="#continue关键字" class="headerlink" title="continue关键字"></a>continue关键字</h3><ul><li>conitue 跳过本次循环(忽略本次循环)</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>loopControl</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName ConitueTester * @Description Conitue 跳过本次循环(忽略本次循环) * @Author ada * @Computer Mac mini * @Date 2021/12/10 16:45 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConitueTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 求 1-100 所有奇数的和</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------用 for 循环求 1-100 所有奇数的和------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当i为【"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"】时,sum则为【"</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------用 while 循环求 1-100 所有奇数的和------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> aSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                aSum <span class="token operator">=</span> aSum <span class="token operator">+</span> a<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当a为【"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"】时,aSum则为【"</span> <span class="token operator">+</span> aSum <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 求 1-100 的和，如果是偶数跳过</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------用 for 循环求 1-100 的和，如果是偶数跳过------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum2 <span class="token operator">=</span> sum2 <span class="token operator">+</span> j<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当j为【"</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">"】时,sum2则为【"</span> <span class="token operator">+</span> sum2 <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------用 while 循环求 1-100 的和，如果是偶数跳过------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> kSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                k<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            kSum<span class="token operator">=</span>kSum<span class="token operator">+</span>k<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当K为【"</span> <span class="token operator">+</span> k <span class="token operator">+</span> <span class="token string">"】时,kSum2则为【"</span> <span class="token operator">+</span> kSum <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            k<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h3 id="break关键字"><a href="#break关键字" class="headerlink" title="break关键字"></a>break关键字</h3><ul><li>break循环控制语句, 跳出整个循环（结束整个循环）</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>loopControl</span><span class="token punctuation">;</span><span class="token comment">/** * @ClassName BreakTester * @Description break循环控制语句, 跳出整个循环（结束整个循环） * @Author ada * @Computer Mac mini * @Date 2021/12/10 16:50 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BreakTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//      for  当 a=55 时停止循环  break跳出</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当i为【"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"】时,sum则为【"</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">//      while  当 a=55 时停止循环  break跳出</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> aSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            aSum <span class="token operator">=</span> aSum <span class="token operator">+</span> a<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当a为【"</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"】时,aSum则为【"</span> <span class="token operator">+</span> aSum <span class="token operator">+</span> <span class="token string">"】"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><ul><li>条件控制语句又叫分支控制结构</li></ul><h3 id="常见的条件控制语句"><a href="#常见的条件控制语句" class="headerlink" title="常见的条件控制语句"></a>常见的条件控制语句</h3><ul><li>if…</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果条件1成立，则执行这里的代码,然后跳出代码块 语法中的条件表达式可以用 &amp; &amp;&amp; | || 进行多个条件组合</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>if…else if…</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果条件1成立，则执行这里的代码,然后跳出代码块 语法中的条件表达式可以用 &amp; &amp;&amp; | || 进行多个条件组合</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果条件2成立，则执行这里的代码,然后跳出代码块 语法中的条件表达式可以用 &amp; &amp;&amp; | || 进行多个条件组合</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>if…else if…else</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果条件1成立，则执行这里的代码,然后跳出代码块 语法中的条件表达式可以用 &amp; &amp;&amp; | || 进行多个条件组合</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//如果条件2成立，则执行这里的代码,然后跳出代码块 语法中的条件表达式可以用 &amp; &amp;&amp; | || 进行多个条件组合</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token comment">//如果条件1和条件2都不成立，则执行这里的代码,然后跳出代码块</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>switch 语句<ul><li>switch有<code>轮换</code>的意思，针对 switch 里的变量a去匹配所有的 case 值，<code>若匹配则执行相关 case 下的代码逻辑</code></li><li>case 代表一种情形</li><li>“:” 冒号表示若复合此种情形，后面就要执行的代码</li><li>break 有打破的意思，这里表述不再往下执行</li><li>default 表示若前面的 case 都没有满足条件，将要执行这里的代码</li><li><code>注意事项</code> switch 语句能够接受的变量类型时有限的，case 常用参数类型为：<code>char</code> <code>byte</code> <code>short</code> <code>int</code> <code>String</code> <code>enum</code></li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>变量a<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">case</span> <span class="token class-name">A</span><span class="token operator">:</span>    <span class="token comment">//TODO</span>    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token keyword">case</span> <span class="token class-name">A</span><span class="token operator">:</span>    <span class="token comment">//TODO</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token operator">:</span>    <span class="token comment">//TODO</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>三目运算</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> adaAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> linkAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">// 三目运算: 条件 ? 条件为真执行 : 否则执行</span><span class="token comment">// 需求:如果 ada 的年龄比 link 的大，输出 ada 是 link 的大哥，否则输出 ada 不是 link 的大哥</span><span class="token class-name">String</span> result <span class="token operator">=</span> adaAge <span class="token operator">&gt;</span> linkAge <span class="token operator">?</span> <span class="token string">"1.ada是 link 的大哥"</span> <span class="token operator">:</span> <span class="token string">"2.ada 不是 link 的大哥 "</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if-语法"><a href="#if-语法" class="headerlink" title="if 语法"></a>if 语法</h3><ul><li>注意事项 if…else if…else…代码块中至少有一个并且只能有一个 if，可以有多个或零个else if 最多有一个 else 或者零个</li><li>语句中只会进入一个分支满足执行完后就会跳出代码块，如示例中的 adaAge &gt; linkAge  if 和 else if 都满足，第一个满足后执行完就会跳出整个分支代码块</li><li>语法中的条件表达式可以用 &amp; &amp;&amp; | || 进行多个条件组合</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conditionalControl</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName IfConditional * @Description TODO * @Computer Macbook pro * @Date 2021/12/14 20:39 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfConditionalTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> adaAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> linkAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token comment">//        逻辑：如果 ada 的年龄比 link 的年龄大输出 ada 是 link 的大哥，否则如果 ada 的年龄比 link 的年龄小输出 link 是 ada 的大哥，否则</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>adaAge <span class="token operator">&gt;</span> linkAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1.ada 是 link 的大哥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 这个else if 条件也是满足的，不过上面的 if 满足了就直接跳出整个代码块了</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>adaAge <span class="token operator">&gt;</span> linkAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2.ada 是 link 的大哥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>linkAge <span class="token operator">&gt;</span> adaAge<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3.ada 是 link 的大哥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4.ada 和 link 同岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211214212816134.png" alt="if 语法示例"></p><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conditionalControl</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName IfConditionalTester2 * @Description if 语法练习 * @Computer Macbook pro * @Date 2021/12/14 21:32 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IfConditionalTester2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dayInt <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">//        需求：给我一个数字，告诉我今天是星期几</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dayInt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dayInt <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dayInt <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dayInt <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dayInt <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dayInt <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dayInt <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数值不在范围内"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211214213844692.png" alt="if 语法示例2"></p><h3 id="switch-语法"><a href="#switch-语法" class="headerlink" title="switch 语法"></a>switch 语法</h3><h4 id="switch-语法一"><a href="#switch-语法一" class="headerlink" title="switch 语法一"></a>switch 语法一</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conditionalControl</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName SwitchConditionalTester * @Description TODO * @Computer Macbook pro * @Date 2021/12/14 22:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchConditionalTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数值不在范围内"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211214222605800.png" alt="switch 示例"></p><h4 id="switch-语法二"><a href="#switch-语法二" class="headerlink" title="switch 语法二"></a>switch 语法二</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conditionalControl</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName SwitchConditionalTester * @Description TODO * @Computer Macbook pro * @Date 2021/12/14 22:03 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchConditionalTester</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是工作日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是休息日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数值不在范围内"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211214221622762.png" alt="switch 示例2"></p><h4 id="case-穿透"><a href="#case-穿透" class="headerlink" title="case 穿透"></a>case 穿透</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conditionalControl</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName SwitchConditionalTester3 * @Description TODO * @Computer Macbook pro * @Date 2021/12/14 22:24 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwitchConditionalTester3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里没有 break，出现 case 穿透</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是星期天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数值不在范围内"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211214223217278.png" alt="case 穿透示例"></p><h4 id="三目运算符-1"><a href="#三目运算符-1" class="headerlink" title="三目运算符"></a>三目运算符</h4><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>conditionalControl</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName ternaryOperatorTester * @Description TODO * @Computer Macbook pro * @Date 2021/12/14 22:38 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> ternaryOperatorTester <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> adaAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> linkAge <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//        三目运算: 条件 ? 条件为真执行 : 否则执行</span><span class="token comment">//        需求:如果 ada 的年龄比 link 的大，输出 ada 是 link 的大哥，否则输出 ada 不是 link 的大哥</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> adaAge <span class="token operator">&gt;</span> linkAge <span class="token operator">?</span> <span class="token string">"1.ada是 link 的大哥"</span> <span class="token operator">:</span> <span class="token string">"2.ada 不是 link 的大哥 "</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211214225021950.png" alt="三目运算符示例"></p><h2 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h2><h3 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h3><ul><li><p>按数据类型</p><ul><li>基本数据类型，四类八种</li><li>引用数据类型（复合数据类型）：String、数组</li></ul></li><li><p>按数据范围</p><ul><li>局部变量1：方法体中定义的变量，作用域从定义处到代码块的第一个<code>}</code></li><li>局部变量2：形式参数（形参），作用在整个方法</li><li>局部变量3：代码块内的，在一个方法中有定义了一个代码块，{方法中的代码块}，这里的局部变量只能在定义处到代码块结束前</li><li>全局变量：在类中定义，也叫做成员变量、类属性、实体，作用域在定义处到类结束  静态的属性只能被静态的方法调用</li><li>全局变量的特点<ul><li>有修饰符（public protected 默认修饰符 private）</li><li>在函数外部</li><li>作用域为整个类，随类或对象消亡时消亡</li></ul></li></ul><table><thead><tr><th>访问位置</th><th>private</th><th>默认修饰符</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>定义的类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一个包中</td><td>×</td><td>√</td><td>√</td><td>√</td></tr><tr><td>子类中</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>其它包中</td><td>×</td><td>×</td><td>×</td><td>√</td></tr></tbody></table><p><img src="http://blog.adalucky.com/notes/ada/image-20211215231104727.png" alt="访问权限示例"></p></li><li><p>注意事项：①局部变量必须被初始化 ②局部变量没有修饰符 ③全局变量可以不初始化，值为默认值（缺省值）④全局变量或对象没有初始化然后还去调用它的方法或属性会报空指针异常 比如一个 String aStr 类型的全局变量没有初始化，还去调用 aStr.length（）就会报空指针异常<code>一个变量或对象还没初始化（已经为 null 了），就没有指向任何一块空间，这个时候你还要去访问它的属性或方法就要报空指针异常</code> ⑤如果局部变量和全局变量重名了，会采取就近原则访问局部变量，如果要访问全局变量用加用 ClassName.varName（建议一个类中不要去定义重名的变量名称，阅读性差）</p></li></ul><p><img src="http://blog.adalucky.com/notes/ada/image-20211215232426041.png" alt="空指针异常"></p><h3 id="变量定义及范围"><a href="#变量定义及范围" class="headerlink" title="变量定义及范围"></a>变量定义及范围</h3><div><div class="fold_hider"><div class="close hider_title">点击显/隐代码块</div></div><div class="fold"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>tester<span class="token punctuation">.</span>ada<span class="token punctuation">.</span>variable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">BaseStream</span><span class="token punctuation">;</span><span class="token comment">/** * @author ada * @ClassName VariableTester * @Description TODO * @Computer Macbook pro * @Date 2021/12/15 21:52 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VariableTester</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> aStr <span class="token operator">=</span> <span class="token string">"类中的静态全局变量"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> dStr <span class="token operator">=</span> <span class="token string">"类中的全局变量"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> bStr <span class="token operator">=</span> <span class="token string">"main方法中的局部变量"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cStr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// cStr 是 myFunction 中的局部变量，无法使用</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dStr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// dStr 是类中的全局变量，无法在静态方法中使用非静态变量</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> cStr <span class="token operator">=</span> <span class="token string">"myFunction 中的局部变量"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bStr<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// bStr 是 main 方法中的局部变量，无法使用</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dStr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></div><p><img src="http://blog.adalucky.com/notes/ada/image-20211215223328797.png" alt="变量定义示例"></p><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。由 James Gosling和同事们共同研发，并在 1995 年正式推出。&lt;/p&gt;
&lt;p&gt;后来 Sun 公司被 Oracle （甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。&lt;/p&gt;</summary>
    
    
    
    <category term="Auto" scheme="https://www.adalucky.com/categories/Auto/"/>
    
    
    <category term="Java 基础" scheme="https://www.adalucky.com/tags/Java-%E5%9F%BA%E7%A1%80/"/>
    
    <category term="IDEA" scheme="https://www.adalucky.com/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>性能测试环境搭建</title>
    <link href="https://www.adalucky.com/performance/xing-neng-ce-shi-huan-jing-da-jian/"/>
    <id>https://www.adalucky.com/performance/xing-neng-ce-shi-huan-jing-da-jian/</id>
    <published>2021-09-09T03:57:00.000Z</published>
    <updated>2022-06-13T14:43:37.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本篇幅主要记录通过VMware和云服务器搭建性能测试的项目步骤，可参考进行搭建自己的项目（本项目为第三方提供的，因此不进行外发）</p><a id="more"></a><h1 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h1><h2 id="服务器的发展"><a href="#服务器的发展" class="headerlink" title="服务器的发展"></a>服务器的发展</h2><blockquote><p>台式机—&gt;刀片机（通过vmwaer虚拟多个系统08年-15年）—&gt;云服务器</p></blockquote><h2 id="虚拟化技术-1"><a href="#虚拟化技术-1" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h2><h3 id="vmware"><a href="#vmware" class="headerlink" title="vmware"></a>vmware</h3><p>vmwaer（08-15年）用vmware虚拟技术虚拟的操作系统,是非常消耗本机的硬件资源，用 vmware虛拟技术虛拟的机器,能产生多个操作系统,更大化使用本机资源,但是,Ⅶware也非常消耗资源,会使用大量的磁盘空间和cpu、内存资源。它对我们本机的性能是有影响,但是因为虚拟了多个操作系统,可以更大化利用空间</p><h3 id="云服务器"><a href="#云服务器" class="headerlink" title="云服务器"></a>云服务器</h3><p>也是虚拟技术发展的产品,虚拟操作系统(比较完整的操作系统)</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p>docker（15 16年后开始,也是操作系统,定制化,缩减版的操作系统( namespace、 unionFS、 cgroup）</p><h1 id="VMware安装项目"><a href="#VMware安装项目" class="headerlink" title="VMware安装项目"></a>VMware安装项目</h1><h2 id="项目导入注意事项"><a href="#项目导入注意事项" class="headerlink" title="项目导入注意事项"></a>项目导入注意事项</h2><blockquote><ul><li>通过vmware导出的操作系统iso文件为ova后缀文件，开机即可使用</li><li>安装 vmware软件、 virtualbox后一定要记得重启动电脑（防止虚拟网卡不生效）</li><li>查看网络连接里面一定要有wmet8必须是启用，部分windows电脑如果虚拟机系统上网有问题记得看下服务里面找到vm相关的网络服务要开启</li><li>Vmware工具,可以在 windows、 linux、mac中安装(版本可以是12以上都可以）</li><li>导入的时候需要选择存储路径(不要使用默认的系统盘路径)</li><li>导入第一次会报错,没有关系,点击重试</li></ul></blockquote><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"http://blog.adalucky.com/mp4-20210527160039918.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><div class="caption"><b class="center-caption">项目导入</b></div><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><ul><li>导入成功之后:编辑虚拟机设置</li><li>根据自己的机器配置,修改内存大小,cp的数量</li><li>网络适配器, vmware一定要选择NAT网络 virtualbox选择桥接网络</li><li>本项目jdk环境1.7，Tomcat8 MySQL5.7（docker部署的）</li><li>本项目登录信息默认账号root  密码123456</li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 启动项目</span><span class="token function">sh</span> /opt/tom<span class="token punctuation">..</span>./bin/st<span class="token punctuation">..</span>.sh start<span class="token comment">#动态查看日志</span><span class="token function">tail</span> -f catalina. out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h2><h3 id="静态ip"><a href="#静态ip" class="headerlink" title="静态ip"></a>静态ip</h3><blockquote><ul><li>静态ip配置的目的是为了固定我们项目的ip地址，这样不用后面去修改连接信息，但是可能会导致换了其它的网络虚拟机就没办法上网的问题</li><li>主要实现方法有2种</li></ul><ul><li>方案一配置路由器:路由器分配，登录路由器页面找到虚拟机的Mac地址进行分配静态ip—这种一般是接触不到我们的公司的路由的</li><li>方案二配置网卡文件(推荐)<ul><li>参考：<a href="https://www.cnblogs.com/jasmine-Jobs/p/5928218.html">https://www.cnblogs.com/jasmine-Jobs/p/5928218.html</a></li><li>虚拟机需要选择桥接网络</li><li>需要指定宿主机使用的网卡</li><li>编辑配置文件</li></ul></li></ul></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入配置文件</span><span class="token builtin class-name">cd</span> /etc/sysconfig/network-scripts<span class="token comment">#通过ls查看，把里面的ifcfg-enp0s3 改为ifcfg-ens33这里如果不改的话可能重启网卡的时候会报失败</span><span class="token function">mv</span> ifcfg-enp0s3 ifcfg-ens33<span class="token comment">#修改ens33</span><span class="token function">vim</span> ifcfg-ens33<span class="token comment">#配置静态ip和网关，dns等信息，wq保存退出 之前在这里踩过坑，很多网上复制出来的GATEWAY都少写了一个E（GATWAY）导致无法上外网</span><span class="token assign-left variable">DNS1</span><span class="token operator">=</span><span class="token number">114.114</span>.114.114   <span class="token comment">#主DNS处理机</span><span class="token assign-left variable">DNS2</span><span class="token operator">=</span><span class="token number">8.8</span>.8.8           <span class="token comment">#辅DNS处理机</span><span class="token assign-left variable">IPADDR</span><span class="token operator">=</span><span class="token number">192.168</span>.1.169    <span class="token comment">#本机静态ip地址（网段根据路由器分配设定）</span><span class="token assign-left variable">PREFIX</span><span class="token operator">=</span><span class="token number">24</span>             <span class="token comment">#子网掩码位。24代表255.255.255.0</span><span class="token assign-left variable">GATEWAY</span><span class="token operator">=</span><span class="token number">192.168</span>.1.1    <span class="token comment">#网关地址（路由器ip）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","loop":true,"video":{"url":"http://blog.adalucky.com/mp4-20210528151633.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><div class="caption"><b class="center-caption">静态IP设置</b></div><h3 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h3><blockquote><p>通过开机启动Tomcat这样能比较方便一些，主要是配置一下rc.local文件</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#修改rc.local</span><span class="token function">vim</span> /etc/rc.local<span class="token comment">#新增Tomcat开机自启动</span><span class="token function">touch</span> /var/lock/subsys/local    <span class="token comment">#这一行是自带的</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/usr/local/java/jdk1.7.0_79   <span class="token comment">#根据java的系统自行配置， cat /etc/profile 命令查看</span>/opt/apache-tomcat-8.5.56/bin/startup.sh start <span class="token comment">#startup.sh文件的路径  start</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注：</strong>内容针对centos7有效，如果centos8按照该方法无效可参考<a href="https://www.cnblogs.com/easonchean/p/14199088.html%EF%BC%8Ccentos8.2%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88">https://www.cnblogs.com/easonchean/p/14199088.html，centos8.2亲测有效</a></p><h1 id="云服务器安装项目"><a href="#云服务器安装项目" class="headerlink" title="云服务器安装项目"></a>云服务器安装项目</h1><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><blockquote><ul><li>这里只提供思路，不做展示了</li><li>1.将虚拟机内/opt下的所有文件打成压缩包上传到云服务器opt下，注意给bin文件夹下的文件赋予执行权限</li><li>2.把java1.7打包放在对应的文件夹下，并配置环境变量</li><li>3.执行install_docker_mysql57.sh文件</li><li>4.如果数据库等信息需要修改的话，可以到这里路径里面配置一下</li><li>配置开机自启可先尝试修改rc.local，我的是centos8无效，后面通过编写Tomcat.service成功参考网址：<a href="https://www.cnblogs.com/easonchean/p/14199088.html">https://www.cnblogs.com/easonchean/p/14199088.html</a></li></ul></blockquote><p><img src="http://blog.adalucky.com/notes/ada/image-20210528161245285.png" alt="云服务器部署kjy"></p><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇幅主要记录通过VMware和云服务器搭建性能测试的项目步骤，可参考进行搭建自己的项目（本项目为第三方提供的，因此不进行外发）&lt;/p&gt;</summary>
    
    
    
    <category term="Performance" scheme="https://www.adalucky.com/categories/Performance/"/>
    
    
    <category term="环境搭建" scheme="https://www.adalucky.com/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>性能测试基础知识</title>
    <link href="https://www.adalucky.com/performance/xing-neng-ce-shi-ji-chu-zhi-shi/"/>
    <id>https://www.adalucky.com/performance/xing-neng-ce-shi-ji-chu-zhi-shi/</id>
    <published>2021-09-08T15:46:00.000Z</published>
    <updated>2022-06-13T14:43:37.106Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本篇幅主要对性能测试中的一些基础预备知识进行描述，其中包括专业名称、指标参数、历史发展、性能测试流程等作为一个简单的知识储备为后期的篇幅打下基础</p><a id="more"></a><h1 id="概念和常识"><a href="#概念和常识" class="headerlink" title="概念和常识"></a>概念和常识</h1><h2 id="常识"><a href="#常识" class="headerlink" title="常识"></a>常识</h2><ul><li>功能或自动化测试目的：找bug预期结果与实际结果进行比对，模拟都是单个用户的操作</li><li>性能测试：模拟 <code>多个人同时</code> 操作时,查看响应时间，接口服务器性能测试中,一定是多个人同时操作,才是性能测试</li><li>响应时间基准：性能中的avgRT可接受的范围≤1500ms,APDEX用户满意度指数＝（1 × 满意样本 ＋ 0.5 × 容忍样本）÷ 样本总数</li><li>事务：一个请求行为,并不一定只有一个接口,所以事务可能是多个 ineterface，默认情况下,1个接口请求1次,认为一个1个事务 Transation。也可以是通过事务控制器,挂载多个接口请求，合并成为1个事务（在页面上输入账号密码后，点击登录，会触发多个接口，这些自动关联可合并为一个事务，多个事务可组成一个 workflow ）</li></ul><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ul><li>狭义的并发：同一时间请求同一事物（同一时间都在并发登陆，单场景）</li><li>广义的并发：同一时间请求不同事物（同一时间，有登陆，有注册，有浏览，有评论，有发呆）</li><li>在性能中，先狭义，再广义，先单接口，后混合场景，这样方便定位到问题</li></ul><h2 id="角色分析"><a href="#角色分析" class="headerlink" title="角色分析"></a>角色分析</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><blockquote><p>用户只关心速度，请求的响应快不快，在不在可以接受的范围内，这个会直接影响到用户的体验</p></blockquote><h3 id="管理层"><a href="#管理层" class="headerlink" title="管理层"></a>管理层</h3><ul><li>应用服务器/数据库服务器资源使用是否合理（资源利用率，资源不回收，泄露，cpu慢查询</li><li>系统能否实现可扩展 （可扩展性方面考虑，比如扩展一个新功能，服务，需要对代码大量更换，修改，甚至要全部重来，这种的扩展性就很差，或者不需要更改多少这种就比较好）</li><li>系统最大支持多少用户（系统容量，比如最多支持10w,100W用户，就支持不了了）</li><li>系统最大业务处理能力  tps(每秒服务器能够处理的请求数)  吞吐量是以KB每秒，或每秒的条数，属于tps的一种，qps一般是开发的称呼，是每秒查询的请求数</li><li>系统性能存在的瓶颈在哪里   定位到那个代码，或者哪个进程等等，或者是硬件的问题</li><li>更换哪些设备能够提高系统性能  cpu核数加大，硬盘等等，比如双11，618都是靠堆服务器</li><li>稳定性，能否支持7x24小时的业务访问（比如跑个几天就必须重启，或者8个小时，12个小时等等，先跑单接口，再跑多个请求混和场景）</li></ul><h3 id="开发人员"><a href="#开发人员" class="headerlink" title="开发人员"></a>开发人员</h3><ul><li>架构设计是否合理（系统架构图是架构师设计的，但是实现还是开发，有些情况可能根本不能实现）</li><li>数据库设计是否存在问题（数据库设计，监控是不是有慢查询）</li><li>代码是否存在性能问题（不同人写的代码方法，算法的复杂度不一样，导致性能处理也不一样）</li><li>代码是否存在不合理的内存使用方式（代码用完了是不是有释放掉，还是一直占用着资源，监控内存是不是会出现内存溢出）</li></ul><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ul><li>执行顺序：<code>负载|得到最大用户数</code> –&gt; <code>性能|得到各项指标</code> –&gt; <code>压力|查看服务器的稳定性</code></li><li>性能测试环境要求：需要搭建独立环境不可同自动化，功能测试环境混合，服务器配置和正式环境一致（硬件，数量可按集群比例划分，网络，架构参数）</li><li>性能测试中不能使用WiFi，不能使用VPN代理等桥接方式</li><li>性能测试的必要性研究，优先级制定（核心功能，用户访问量大的业务）</li><li>反复沟通确认性能指标，量化指标</li></ul><h1 id="参数指标"><a href="#参数指标" class="headerlink" title="参数指标"></a>参数指标</h1><h2 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a>TPS</h2><p>服务器每秒处理的事务数（综合处理能力，IO,CPU,network等）</p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>网络每秒能通过的事务（客户端和服务端传输通讯）</p><h2 id="RPS"><a href="#RPS" class="headerlink" title="RPS"></a>RPS</h2><p>客户端（jmeter，loadrunner不局限于此）用户每秒请求率，例：并发数10，每人1s能发3个请求，rps=30</p><h2 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h2><p>服务器每秒查询率，在企业中如果没有严格区分，默认是把1个事务当做只查询了一次tps=qps–》1：1（但是实际的情况一般是一个事务对应多个查询即1个事务：N个查询）</p><h2 id="HPS"><a href="#HPS" class="headerlink" title="HPS"></a>HPS</h2><p>每秒用户点击率（页面点击，较早的概念）</p><h2 id="RT"><a href="#RT" class="headerlink" title="RT"></a>RT</h2><p>响应时间，Response Time，是指从提交第一个请求到产生第一个响应所用时间，<code>是用户最直观的感受</code>，系统响应时间=网络（N1+N2+N3+N4）+服务处理(A1+A2+A3)</p><p><img src="http://blog.adalucky.com/notes/ada/715a0e91b6ee444ff27cad7985b7c76.png" alt="响应时间"></p><ul><li><h1 id="三大性能场景"><a href="#三大性能场景" class="headerlink" title="三大性能场景"></a>三大性能场景</h1></li></ul><p>执行顺序：<code>负载|得到最大用户数</code> –&gt; <code>性能|得到各项指标</code> –&gt; <code>压力|查看服务器的稳定性</code></p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><blockquote><p>通过工具,模拟多用户发起请求,获取**<code>性能指标值</code>**,用工具来模拟多个人的方式很多</p></blockquote><ul><li>进程:资源拥有者,资源消耗会比较大，如果电脑打开一个qq,系统后台就会生成一个进程以及对应的PID，代表软件<code>loadrunner</code>，性能测试标杆软件、c语言、国内破解(&lt;11）、12免费试用50限制用户数、更新极慢</li><li>线程:使用进程的资源，多线程技术（Thread），代表软件<code>jmeter</code>，建议v5.1.1+</li><li>协程：一个底层调度单元，可以是一个函数，运行在线程之上代表<code>python+locust</code>，自行写py脚本</li></ul><h3 id="可靠性测试"><a href="#可靠性测试" class="headerlink" title="可靠性测试"></a>可靠性测试</h3><p>在给定一定的业务压力下，持续一段时间看系统是否稳定  最大并发*20%</p><h3 id="容量测试"><a href="#容量测试" class="headerlink" title="容量测试"></a>容量测试</h3><blockquote><p>不同数据量级,数万条,百万条数据的操作读写不一样,因为测试环境数据一般不会很多,除非自己创造,所以在测试环境的速度和正式环境会有差异</p></blockquote><p>在性能测试时,如果数据库的数据量级是不一致的,性能指标值,也可能存在差异<br>生成的数据库数据量级百万级,测试环境几千几百条读写速度肯定会有差异，因此在做性能测试的时候数据库的量级要保持一致（可通过主从数据进行同步，或者批量造数据）</p><h2 id="负载测试"><a href="#负载测试" class="headerlink" title="负载测试"></a>负载测试</h2><blockquote><p>逐步增加并发用户数<code>找出最大拐点【区间】</code>,适用于初步测试定位性能区间，可通过多次反复减小步长确定具体的值或较为精确的值</p></blockquote><p>区间判断依据（tps计算：50tpsX60sX60minX8H=144W访问量）</p><ul><li><p>请求报错</p></li><li><p>tps下降</p></li><li><p>响应时间变长长</p></li></ul><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><blockquote><p>在**<code>一定的压力</code><strong>下，持续</strong><code>较长</code>**的时间，<code>测试服务的稳定性，可靠性</code>，一般是以小时为单位或者1-2天（因为现在互联网环境，速度很快）,在服务器出现不稳定的情况下再去做压力测试</p></blockquote><p>一定的压力一般采用如下两种方案：</p><ul><li>最大并发用户数*20%+相对较长时间</li><li>最大并发用户数*80%+相对短时间</li></ul><h1 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h1><h2 id="性能测试目的"><a href="#性能测试目的" class="headerlink" title="性能测试目的"></a>性能测试目的</h2><ul><li>评估系统的处理能力：验证系统的处理能力是不是达到规划是的水平</li><li>发现系统中的性能瓶颈：是不是某个接口响应时间很长，tps很低，硬件是不是可以支持</li><li>验证系统稳定性和可靠性：长时间的测试会不会导致内存溢出</li><li>系统调优：重复执行性能测试，来验证系统调优是否取得预期结果</li></ul><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><ul><li>需求支持50万并发/支持20万并发<ul><li>系统用户数：就是我们系统用户数总数，包括活跃的和僵尸用户</li><li>在线用户数：就是登陆系统的用户，例如：其中有N个用户为在线，但是在线用户数并不一定会对服务器产生压力，比如有的挂机，session过期不算在线用户数</li><li>并发用户数：是对服务器产生压力的用户，例如：可能有10W人在线，但是只有20%用户对服务器产生了压力，也就是说这个接口并发用户数只有20%，以及需要拆分产品的需求，要求50W并发，本来系统就50W，但是并发数可能拆分下来就10%或者更少，<code>要懂得分析</code></li></ul></li></ul><h2 id="性能测试准备"><a href="#性能测试准备" class="headerlink" title="性能测试准备"></a>性能测试准备</h2><ul><li>需求分析</li><li>熟悉业务</li><li>明确性能测试目标(指标值)</li><li>了解软件功能、架构</li><li>制定测试计划,做好工作量评估(2-3倍，主要在环境搭建消耗时间，调优)</li><li>制定测试模型(编辑测试用例，性能场景)</li><li>首先必须要排除网络问题，比如准备千兆交换机，或者局域网的同一网段的千兆网卡</li><li>跑场景的时候，ping服务器，（ping ip -t）,确定网络，有没有丢包现象</li><li>先跑单个接口的性能测试场景（确定没有问题，或者能直接定位到具体问题的模块），再跑混合场景（多个接口混合）</li></ul><h2 id="搭建性能测试环境"><a href="#搭建性能测试环境" class="headerlink" title="搭建性能测试环境"></a>搭建性能测试环境</h2><p>工具选型与准备(jmeter,loadrunner)</p><p>被测系统环境搭建（服务器，服务版本更新，数据库数据准备,数据量级）</p><p>网络配置</p><h2 id="性能测试脚本开发"><a href="#性能测试脚本开发" class="headerlink" title="性能测试脚本开发"></a>性能测试脚本开发</h2><p>选取协议（http，jdbc,websocket…）<br>制作脚本<br>调试脚本<br>验证脚本</p><h2 id="性能测试脚本执行"><a href="#性能测试脚本执行" class="headerlink" title="性能测试脚本执行"></a>性能测试脚本执行</h2><p>试运行</p><p>场景执行（负载，性能，面向目标，混合）</p><h2 id="结果分析与调优"><a href="#结果分析与调优" class="headerlink" title="结果分析与调优"></a>结果分析与调优</h2><p>分析依据:结果图表<br>分析思路:服务器硬件瓶颈&gt;网络瓶颈&gt;服务器σs瓶颈(参数配置、数据<br>库、web服务器)&gt;应用瓶颈(sq语句、数据库设计、业务逻辑、算法)<br>调优：<br>修改脚本或场景</p><h2 id="测试报告与结果跟踪"><a href="#测试报告与结果跟踪" class="headerlink" title="测试报告与结果跟踪"></a>测试报告与结果跟踪</h2><p>性能测试报告<br>性能测试问题跟踪</p><h1 id="应用发展"><a href="#应用发展" class="headerlink" title="应用发展"></a>应用发展</h1><hr><ul><li><p>最开始所有的代码都在一个工程下面，生成一个项目包，随着项目开发，代码越来越多，功能越来越多，导致的问题就来了，如果项目足够大，哪怕是再好的一台服务器也跑不动这个单体架构的项目</p></li><li><p>第二就是项目过大不好管理08年前，然后到了08年10年后就开始把项目和数据库（Oracle,sqlserver,access,mysql,postgrasql）、文件服务器（图片，资源，就像现在的七牛云,ftp,oss）、项目服务器(apache,tomcat,springboot,springcloud)分离、再后面就是集群（12-15年开始蔓延流行，主要是nignx），docker、微服务模块化（16 17年开始出现，只是大家技术没统一拆分方法，后面技术成熟了都用模块化的方式来拆分，所以就用了 springcloud，这样又导致不适用Tomcat了，因为太臃肿所以就用上了docker），中台</p><hr></li><li><p>数据库开始主从同步备份，读写分离，分表分区，非关系型（momgodb：bson格式类似json格式的数据方式存储比较好操作18年左右流行起来的、memcache：缓存数据库13 14年就很流行，后面被readis替代，因为不能持久化（好像是可以配置的比较复杂），断电数据就没了</p></li><li><p>redis：缓存数据库，可以持久化，写入磁盘断电后可以再次读取</p></li><li><p>HBase：大数据分布式文件系统数据库18年左右）</p></li><li><p>时序数据库：influxdb Prometheus（根据时间记录数据，连接起来就像一条折现图，每一行的第一列都是时间戳，做监控平台的时候需要使用展示）</p><hr></li><li><p>拆项目：前后端分离，中台（微服务衍生出来的，接口透传，封装接口，比如现在微服务的拆分导致模块越细，以前本来展示一个前台只需要调用一个后端接口现在可能需要调用三个，那么中台就可以做数据的封装，把三个接口的数据整理组装好一起返回给前端，14 15年就有中台概念，以前叫做数据总线）</p></li></ul><hr><iframe src="https://adalucky.com/simple/" style="overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;" frameborder="0" scrolling="no" allowtransparency="true"></iframe><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇幅主要对性能测试中的一些基础预备知识进行描述，其中包括专业名称、指标参数、历史发展、性能测试流程等作为一个简单的知识储备为后期的篇幅打下基础&lt;/p&gt;</summary>
    
    
    
    <category term="Performance" scheme="https://www.adalucky.com/categories/Performance/"/>
    
    
    <category term="指标参数" scheme="https://www.adalucky.com/tags/%E6%8C%87%E6%A0%87%E5%8F%82%E6%95%B0/"/>
    
    <category term="性能测试流程" scheme="https://www.adalucky.com/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
</feed>
